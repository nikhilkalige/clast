
////////////////////////////////////////////////////////////////////////////////
// File autogenerated by clastgen
//  Clang - clang version 8.0.0 
//
// Warning. Changes made here will be overwritten.
////////////////////////////////////////////////////////////////////////////////
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "internal.h"

#include <clang/AST/AST.h>
#include <clang/ASTMatchers/ASTMatchers.h>
#include <clang/ASTMatchers/ASTMatchFinder.h>


namespace py = pybind11;

void autogenerated_classes_2(pybind11::module& m)
{

    py::class_<clang::ChooseExpr, stmt_deleter<clang::ChooseExpr>::type>(m, "ChooseExpr" , py::base<clang::Expr>())

        .def("isConditionTrue", (bool (clang::ChooseExpr::*)() const)&clang::ChooseExpr::isConditionTrue  )
        .def("setIsConditionTrue", (void (clang::ChooseExpr::*)(bool))&clang::ChooseExpr::setIsConditionTrue  )
        .def("isConditionDependent", (bool (clang::ChooseExpr::*)() const)&clang::ChooseExpr::isConditionDependent  )
        .def("getChosenSubExpr", (clang::Expr * (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getChosenSubExpr , py::return_value_policy::reference_internal )
        .def("getCond", (clang::Expr * (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getCond , py::return_value_policy::reference_internal )
        .def("setCond", (void (clang::ChooseExpr::*)(clang::Expr *))&clang::ChooseExpr::setCond  )
        .def("getLHS", (clang::Expr * (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getLHS , py::return_value_policy::reference_internal )
        .def("setLHS", (void (clang::ChooseExpr::*)(clang::Expr *))&clang::ChooseExpr::setLHS  )
        .def("getRHS", (clang::Expr * (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getRHS , py::return_value_policy::reference_internal )
        .def("setRHS", (void (clang::ChooseExpr::*)(clang::Expr *))&clang::ChooseExpr::setRHS  )
        .def("getBuiltinLoc", (clang::SourceLocation (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getBuiltinLoc  )
        .def("setBuiltinLoc", (void (clang::ChooseExpr::*)(clang::SourceLocation))&clang::ChooseExpr::setBuiltinLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::ChooseExpr::*)(clang::SourceLocation))&clang::ChooseExpr::setRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ChooseExpr::*)() const)&clang::ChooseExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ChooseExpr::*)())&clang::ChooseExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ChooseExpr::*)() const)&clang::ChooseExpr::children  )
    ;

    py::class_<clang::GNUNullExpr, stmt_deleter<clang::GNUNullExpr>::type>(m, "GNUNullExpr" , py::base<clang::Expr>())

        .def("getTokenLocation", (clang::SourceLocation (clang::GNUNullExpr::*)() const)&clang::GNUNullExpr::getTokenLocation  )
        .def("setTokenLocation", (void (clang::GNUNullExpr::*)(clang::SourceLocation))&clang::GNUNullExpr::setTokenLocation  )
        .def("getBeginLoc", (clang::SourceLocation (clang::GNUNullExpr::*)() const)&clang::GNUNullExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::GNUNullExpr::*)() const)&clang::GNUNullExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::GNUNullExpr::*)())&clang::GNUNullExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::GNUNullExpr::*)() const)&clang::GNUNullExpr::children  )
    ;

    py::class_<clang::VAArgExpr, stmt_deleter<clang::VAArgExpr>::type>(m, "VAArgExpr" , py::base<clang::Expr>())

        .def("getSubExpr", [](const clang::VAArgExpr& self) -> const clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getSubExpr", []( clang::VAArgExpr& self) -> clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("setSubExpr", (void (clang::VAArgExpr::*)(clang::Expr *))&clang::VAArgExpr::setSubExpr  )
        .def("isMicrosoftABI", (bool (clang::VAArgExpr::*)() const)&clang::VAArgExpr::isMicrosoftABI  )
        .def("setIsMicrosoftABI", (void (clang::VAArgExpr::*)(bool))&clang::VAArgExpr::setIsMicrosoftABI  )
        .def("getWrittenTypeInfo", (clang::TypeSourceInfo * (clang::VAArgExpr::*)() const)&clang::VAArgExpr::getWrittenTypeInfo , py::return_value_policy::reference_internal )
        .def("setWrittenTypeInfo", (void (clang::VAArgExpr::*)(clang::TypeSourceInfo *))&clang::VAArgExpr::setWrittenTypeInfo  )
        .def("getBuiltinLoc", (clang::SourceLocation (clang::VAArgExpr::*)() const)&clang::VAArgExpr::getBuiltinLoc  )
        .def("setBuiltinLoc", (void (clang::VAArgExpr::*)(clang::SourceLocation))&clang::VAArgExpr::setBuiltinLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::VAArgExpr::*)() const)&clang::VAArgExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::VAArgExpr::*)(clang::SourceLocation))&clang::VAArgExpr::setRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::VAArgExpr::*)() const)&clang::VAArgExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::VAArgExpr::*)() const)&clang::VAArgExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::VAArgExpr::*)())&clang::VAArgExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::VAArgExpr::*)() const)&clang::VAArgExpr::children  )
    ;

    py::class_<clang::InitListExpr, stmt_deleter<clang::InitListExpr>::type>(m, "InitListExpr" , py::base<clang::Expr>())

        .def("getNumInits", (unsigned int (clang::InitListExpr::*)() const)&clang::InitListExpr::getNumInits  )
        //.def("inits", (llvm::ArrayRef<clang::Expr *> (clang::InitListExpr::*)())&clang::InitListExpr::inits  )
        //.def("inits", (llvm::ArrayRef<clang::Expr *> (clang::InitListExpr::*)() const)&clang::InitListExpr::inits  )
        .def("getInit", [](const clang::InitListExpr& self, unsigned int Init) -> const clang::Expr * {
         return self.getInit(Init);
        } , py::return_value_policy::reference_internal)
        .def("getInit", []( clang::InitListExpr& self, unsigned int Init) -> clang::Expr * {
         return self.getInit(Init);
        } , py::return_value_policy::reference_internal)
        .def("setInit", (void (clang::InitListExpr::*)(unsigned int, clang::Expr *))&clang::InitListExpr::setInit  )
        .def("reserveInits", (void (clang::InitListExpr::*)(const clang::ASTContext &, unsigned int))&clang::InitListExpr::reserveInits  )
        .def("resizeInits", (void (clang::InitListExpr::*)(const clang::ASTContext &, unsigned int))&clang::InitListExpr::resizeInits  )
        .def("updateInit", (clang::Expr * (clang::InitListExpr::*)(const clang::ASTContext &, unsigned int, clang::Expr *))&clang::InitListExpr::updateInit , py::return_value_policy::reference_internal )
        .def("getArrayFiller", []( clang::InitListExpr& self) -> clang::Expr * {
         return self.getArrayFiller();
        } , py::return_value_policy::reference_internal)
        .def("getArrayFiller", [](const clang::InitListExpr& self) -> const clang::Expr * {
         return self.getArrayFiller();
        } , py::return_value_policy::reference_internal)
        .def("setArrayFiller", (void (clang::InitListExpr::*)(clang::Expr *))&clang::InitListExpr::setArrayFiller  )
        .def("hasArrayFiller", (bool (clang::InitListExpr::*)() const)&clang::InitListExpr::hasArrayFiller  )
        .def("getInitializedFieldInUnion", []( clang::InitListExpr& self) -> clang::FieldDecl * {
         return self.getInitializedFieldInUnion();
        } , py::return_value_policy::reference_internal)
        .def("getInitializedFieldInUnion", [](const clang::InitListExpr& self) -> const clang::FieldDecl * {
         return self.getInitializedFieldInUnion();
        } , py::return_value_policy::reference_internal)
        .def("setInitializedFieldInUnion", (void (clang::InitListExpr::*)(clang::FieldDecl *))&clang::InitListExpr::setInitializedFieldInUnion  )
        .def("isExplicit", (bool (clang::InitListExpr::*)() const)&clang::InitListExpr::isExplicit  )
        .def("isStringLiteralInit", (bool (clang::InitListExpr::*)() const)&clang::InitListExpr::isStringLiteralInit  )
        .def("isTransparent", (bool (clang::InitListExpr::*)() const)&clang::InitListExpr::isTransparent  )
        //.def("isIdiomaticZeroInitializer", (bool (clang::InitListExpr::*)(const clang::LangOptions &) const)&clang::InitListExpr::isIdiomaticZeroInitializer  )
        .def("getLBraceLoc", (clang::SourceLocation (clang::InitListExpr::*)() const)&clang::InitListExpr::getLBraceLoc  )
        .def("setLBraceLoc", (void (clang::InitListExpr::*)(clang::SourceLocation))&clang::InitListExpr::setLBraceLoc  )
        .def("getRBraceLoc", (clang::SourceLocation (clang::InitListExpr::*)() const)&clang::InitListExpr::getRBraceLoc  )
        .def("setRBraceLoc", (void (clang::InitListExpr::*)(clang::SourceLocation))&clang::InitListExpr::setRBraceLoc  )
        .def("isSemanticForm", (bool (clang::InitListExpr::*)() const)&clang::InitListExpr::isSemanticForm  )
        .def("getSemanticForm", (clang::InitListExpr * (clang::InitListExpr::*)() const)&clang::InitListExpr::getSemanticForm , py::return_value_policy::reference_internal )
        .def("isSyntacticForm", (bool (clang::InitListExpr::*)() const)&clang::InitListExpr::isSyntacticForm  )
        .def("getSyntacticForm", (clang::InitListExpr * (clang::InitListExpr::*)() const)&clang::InitListExpr::getSyntacticForm , py::return_value_policy::reference_internal )
        .def("setSyntacticForm", (void (clang::InitListExpr::*)(clang::InitListExpr *))&clang::InitListExpr::setSyntacticForm  )
        .def("hadArrayRangeDesignator", (bool (clang::InitListExpr::*)() const)&clang::InitListExpr::hadArrayRangeDesignator  )
        .def("sawArrayRangeDesignator", (void (clang::InitListExpr::*)(bool))&clang::InitListExpr::sawArrayRangeDesignator  )
        .def("getBeginLoc", (clang::SourceLocation (clang::InitListExpr::*)() const)&clang::InitListExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::InitListExpr::*)() const)&clang::InitListExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::InitListExpr::*)())&clang::InitListExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::InitListExpr::*)() const)&clang::InitListExpr::children  )
    ;

    py::class_<clang::DesignatedInitExpr, stmt_deleter<clang::DesignatedInitExpr>::type>(m, "DesignatedInitExpr" , py::base<clang::Expr>())

        .def("size", (unsigned int (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::size  )
        //.def("designators", (llvm::MutableArrayRef<clang::DesignatedInitExpr::Designator> (clang::DesignatedInitExpr::*)())&clang::DesignatedInitExpr::designators  )
        //.def("designators", (llvm::ArrayRef<clang::DesignatedInitExpr::Designator> (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::designators  )
        //.def("getDesignator", (clang::DesignatedInitExpr::Designator * (clang::DesignatedInitExpr::*)(unsigned int))&clang::DesignatedInitExpr::getDesignator , py::return_value_policy::reference_internal )
        //.def("getDesignator", (const clang::DesignatedInitExpr::Designator * (clang::DesignatedInitExpr::*)(unsigned int) const)&clang::DesignatedInitExpr::getDesignator , py::return_value_policy::reference_internal )
        //.def("setDesignators", (void (clang::DesignatedInitExpr::*)(const clang::ASTContext &, const clang::DesignatedInitExpr::Designator *, unsigned int))&clang::DesignatedInitExpr::setDesignators  )
        //.def("getArrayIndex", (clang::Expr * (clang::DesignatedInitExpr::*)(const clang::DesignatedInitExpr::Designator &) const)&clang::DesignatedInitExpr::getArrayIndex , py::return_value_policy::reference_internal )
        //.def("getArrayRangeStart", (clang::Expr * (clang::DesignatedInitExpr::*)(const clang::DesignatedInitExpr::Designator &) const)&clang::DesignatedInitExpr::getArrayRangeStart , py::return_value_policy::reference_internal )
        //.def("getArrayRangeEnd", (clang::Expr * (clang::DesignatedInitExpr::*)(const clang::DesignatedInitExpr::Designator &) const)&clang::DesignatedInitExpr::getArrayRangeEnd , py::return_value_policy::reference_internal )
        .def("getEqualOrColonLoc", (clang::SourceLocation (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::getEqualOrColonLoc  )
        .def("setEqualOrColonLoc", (void (clang::DesignatedInitExpr::*)(clang::SourceLocation))&clang::DesignatedInitExpr::setEqualOrColonLoc  )
        .def("usesGNUSyntax", (bool (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::usesGNUSyntax  )
        .def("setGNUSyntax", (void (clang::DesignatedInitExpr::*)(bool))&clang::DesignatedInitExpr::setGNUSyntax  )
        .def("getInit", (clang::Expr * (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::getInit , py::return_value_policy::reference_internal )
        .def("setInit", (void (clang::DesignatedInitExpr::*)(clang::Expr *))&clang::DesignatedInitExpr::setInit  )
        .def("getNumSubExprs", (unsigned int (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::getNumSubExprs  )
        .def("getSubExpr", (clang::Expr * (clang::DesignatedInitExpr::*)(unsigned int) const)&clang::DesignatedInitExpr::getSubExpr , py::return_value_policy::reference_internal )
        .def("setSubExpr", (void (clang::DesignatedInitExpr::*)(unsigned int, clang::Expr *))&clang::DesignatedInitExpr::setSubExpr  )
        //.def("ExpandDesignator", (void (clang::DesignatedInitExpr::*)(const clang::ASTContext &, unsigned int, const clang::DesignatedInitExpr::Designator *, const clang::DesignatedInitExpr::Designator *))&clang::DesignatedInitExpr::ExpandDesignator  )
        .def("getDesignatorsSourceRange", (clang::SourceRange (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::getDesignatorsSourceRange  )
        .def("getBeginLoc", (clang::SourceLocation (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DesignatedInitExpr::*)())&clang::DesignatedInitExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::DesignatedInitExpr::*)() const)&clang::DesignatedInitExpr::children  )
    ;

    py::class_<clang::NoInitExpr, stmt_deleter<clang::NoInitExpr>::type>(m, "NoInitExpr" , py::base<clang::Expr>())

        .def("getBeginLoc", (clang::SourceLocation (clang::NoInitExpr::*)() const)&clang::NoInitExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::NoInitExpr::*)() const)&clang::NoInitExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::NoInitExpr::*)())&clang::NoInitExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::NoInitExpr::*)() const)&clang::NoInitExpr::children  )
    ;

    py::class_<clang::DesignatedInitUpdateExpr, stmt_deleter<clang::DesignatedInitUpdateExpr>::type>(m, "DesignatedInitUpdateExpr" , py::base<clang::Expr>())

        .def("getBeginLoc", (clang::SourceLocation (clang::DesignatedInitUpdateExpr::*)() const)&clang::DesignatedInitUpdateExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::DesignatedInitUpdateExpr::*)() const)&clang::DesignatedInitUpdateExpr::getEndLoc  )
        .def("getBase", (clang::Expr * (clang::DesignatedInitUpdateExpr::*)() const)&clang::DesignatedInitUpdateExpr::getBase , py::return_value_policy::reference_internal )
        .def("setBase", (void (clang::DesignatedInitUpdateExpr::*)(clang::Expr *))&clang::DesignatedInitUpdateExpr::setBase  )
        .def("getUpdater", (clang::InitListExpr * (clang::DesignatedInitUpdateExpr::*)() const)&clang::DesignatedInitUpdateExpr::getUpdater , py::return_value_policy::reference_internal )
        .def("setUpdater", (void (clang::DesignatedInitUpdateExpr::*)(clang::Expr *))&clang::DesignatedInitUpdateExpr::setUpdater  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DesignatedInitUpdateExpr::*)())&clang::DesignatedInitUpdateExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::DesignatedInitUpdateExpr::*)() const)&clang::DesignatedInitUpdateExpr::children  )
    ;

    py::class_<clang::ArrayInitLoopExpr, stmt_deleter<clang::ArrayInitLoopExpr>::type>(m, "ArrayInitLoopExpr" , py::base<clang::Expr>())

        .def("getCommonExpr", (clang::OpaqueValueExpr * (clang::ArrayInitLoopExpr::*)() const)&clang::ArrayInitLoopExpr::getCommonExpr , py::return_value_policy::reference_internal )
        .def("getSubExpr", (clang::Expr * (clang::ArrayInitLoopExpr::*)() const)&clang::ArrayInitLoopExpr::getSubExpr , py::return_value_policy::reference_internal )
        //.def("getArraySize", (llvm::APInt (clang::ArrayInitLoopExpr::*)() const)&clang::ArrayInitLoopExpr::getArraySize  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ArrayInitLoopExpr::*)() const)&clang::ArrayInitLoopExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ArrayInitLoopExpr::*)() const)&clang::ArrayInitLoopExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ArrayInitLoopExpr::*)())&clang::ArrayInitLoopExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ArrayInitLoopExpr::*)() const)&clang::ArrayInitLoopExpr::children  )
    ;

    py::class_<clang::ArrayInitIndexExpr, stmt_deleter<clang::ArrayInitIndexExpr>::type>(m, "ArrayInitIndexExpr" , py::base<clang::Expr>())

        .def("getBeginLoc", (clang::SourceLocation (clang::ArrayInitIndexExpr::*)() const)&clang::ArrayInitIndexExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ArrayInitIndexExpr::*)() const)&clang::ArrayInitIndexExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ArrayInitIndexExpr::*)())&clang::ArrayInitIndexExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ArrayInitIndexExpr::*)() const)&clang::ArrayInitIndexExpr::children  )
    ;

    py::class_<clang::ImplicitValueInitExpr, stmt_deleter<clang::ImplicitValueInitExpr>::type>(m, "ImplicitValueInitExpr" , py::base<clang::Expr>())

        .def("getBeginLoc", (clang::SourceLocation (clang::ImplicitValueInitExpr::*)() const)&clang::ImplicitValueInitExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ImplicitValueInitExpr::*)() const)&clang::ImplicitValueInitExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ImplicitValueInitExpr::*)())&clang::ImplicitValueInitExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ImplicitValueInitExpr::*)() const)&clang::ImplicitValueInitExpr::children  )
    ;

    py::class_<clang::ParenListExpr, stmt_deleter<clang::ParenListExpr>::type>(m, "ParenListExpr" , py::base<clang::Expr>())

        .def("getNumExprs", (unsigned int (clang::ParenListExpr::*)() const)&clang::ParenListExpr::getNumExprs  )
        .def("getExpr", []( clang::ParenListExpr& self, unsigned int Init) -> clang::Expr * {
         return self.getExpr(Init);
        } , py::return_value_policy::reference_internal)
        .def("getExpr", [](const clang::ParenListExpr& self, unsigned int Init) -> const clang::Expr * {
         return self.getExpr(Init);
        } , py::return_value_policy::reference_internal)
        //.def("exprs", (llvm::ArrayRef<clang::Expr *> (clang::ParenListExpr::*)())&clang::ParenListExpr::exprs  )
        .def("getLParenLoc", (clang::SourceLocation (clang::ParenListExpr::*)() const)&clang::ParenListExpr::getLParenLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::ParenListExpr::*)() const)&clang::ParenListExpr::getRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ParenListExpr::*)() const)&clang::ParenListExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ParenListExpr::*)() const)&clang::ParenListExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ParenListExpr::*)())&clang::ParenListExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ParenListExpr::*)() const)&clang::ParenListExpr::children  )
    ;

    py::class_<clang::GenericSelectionExpr, stmt_deleter<clang::GenericSelectionExpr>::type>(m, "GenericSelectionExpr" , py::base<clang::Expr>())

        .def("getNumAssocs", (unsigned int (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getNumAssocs  )
        .def("getGenericLoc", (clang::SourceLocation (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getGenericLoc  )
        .def("getDefaultLoc", (clang::SourceLocation (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getDefaultLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getRParenLoc  )
        .def("getAssocExpr", [](const clang::GenericSelectionExpr& self, unsigned int i) -> const clang::Expr * {
         return self.getAssocExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("getAssocExpr", []( clang::GenericSelectionExpr& self, unsigned int i) -> clang::Expr * {
         return self.getAssocExpr(i);
        } , py::return_value_policy::reference_internal)
        //.def("getAssocExprs", (llvm::ArrayRef<clang::Expr *> (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getAssocExprs  )
        .def("getAssocTypeSourceInfo", [](const clang::GenericSelectionExpr& self, unsigned int i) -> const clang::TypeSourceInfo * {
         return self.getAssocTypeSourceInfo(i);
        } , py::return_value_policy::reference_internal)
        .def("getAssocTypeSourceInfo", []( clang::GenericSelectionExpr& self, unsigned int i) -> clang::TypeSourceInfo * {
         return self.getAssocTypeSourceInfo(i);
        } , py::return_value_policy::reference_internal)
        //.def("getAssocTypeSourceInfos", (llvm::ArrayRef<clang::TypeSourceInfo *> (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getAssocTypeSourceInfos  )
        .def("getAssocType", (clang::QualType (clang::GenericSelectionExpr::*)(unsigned int) const)&clang::GenericSelectionExpr::getAssocType  )
        .def("getControllingExpr", [](const clang::GenericSelectionExpr& self) -> const clang::Expr * {
         return self.getControllingExpr();
        } , py::return_value_policy::reference_internal)
        .def("getControllingExpr", []( clang::GenericSelectionExpr& self) -> clang::Expr * {
         return self.getControllingExpr();
        } , py::return_value_policy::reference_internal)
        .def("isResultDependent", (bool (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::isResultDependent  )
        .def("getResultIndex", (unsigned int (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getResultIndex  )
        .def("getResultExpr", [](const clang::GenericSelectionExpr& self) -> const clang::Expr * {
         return self.getResultExpr();
        } , py::return_value_policy::reference_internal)
        .def("getResultExpr", []( clang::GenericSelectionExpr& self) -> clang::Expr * {
         return self.getResultExpr();
        } , py::return_value_policy::reference_internal)
        .def("getBeginLoc", (clang::SourceLocation (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::GenericSelectionExpr::*)())&clang::GenericSelectionExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::GenericSelectionExpr::*)() const)&clang::GenericSelectionExpr::children  )
    ;

    py::class_<clang::ExtVectorElementExpr, stmt_deleter<clang::ExtVectorElementExpr>::type>(m, "ExtVectorElementExpr" , py::base<clang::Expr>())

        .def("getBase", [](const clang::ExtVectorElementExpr& self) -> const clang::Expr * {
         return self.getBase();
        } , py::return_value_policy::reference_internal)
        .def("getBase", []( clang::ExtVectorElementExpr& self) -> clang::Expr * {
         return self.getBase();
        } , py::return_value_policy::reference_internal)
        .def("setBase", (void (clang::ExtVectorElementExpr::*)(clang::Expr *))&clang::ExtVectorElementExpr::setBase  )
        //.def("getAccessor", (clang::IdentifierInfo & (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::getAccessor  )
        //.def("setAccessor", (void (clang::ExtVectorElementExpr::*)(clang::IdentifierInfo *))&clang::ExtVectorElementExpr::setAccessor  )
        .def("getAccessorLoc", (clang::SourceLocation (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::getAccessorLoc  )
        .def("setAccessorLoc", (void (clang::ExtVectorElementExpr::*)(clang::SourceLocation))&clang::ExtVectorElementExpr::setAccessorLoc  )
        .def("getNumElements", (unsigned int (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::getNumElements  )
        .def("containsDuplicateElements", (bool (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::containsDuplicateElements  )
        //.def("getEncodedElementAccess", (void (clang::ExtVectorElementExpr::*)(llvm::SmallVectorImpl<unsigned int> &) const)&clang::ExtVectorElementExpr::getEncodedElementAccess  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::getEndLoc  )
        .def("isArrow", (bool (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::isArrow  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ExtVectorElementExpr::*)())&clang::ExtVectorElementExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ExtVectorElementExpr::*)() const)&clang::ExtVectorElementExpr::children  )
    ;

    py::class_<clang::BlockExpr, stmt_deleter<clang::BlockExpr>::type>(m, "BlockExpr" , py::base<clang::Expr>())

        .def("getBlockDecl", [](const clang::BlockExpr& self) -> const clang::BlockDecl * {
         return self.getBlockDecl();
        } , py::return_value_policy::reference_internal)
        .def("getBlockDecl", []( clang::BlockExpr& self) -> clang::BlockDecl * {
         return self.getBlockDecl();
        } , py::return_value_policy::reference_internal)
        .def("setBlockDecl", (void (clang::BlockExpr::*)(clang::BlockDecl *))&clang::BlockExpr::setBlockDecl  )
        .def("getCaretLocation", (clang::SourceLocation (clang::BlockExpr::*)() const)&clang::BlockExpr::getCaretLocation  )
        .def("getBody", [](const clang::BlockExpr& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getBody", []( clang::BlockExpr& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getBeginLoc", (clang::SourceLocation (clang::BlockExpr::*)() const)&clang::BlockExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::BlockExpr::*)() const)&clang::BlockExpr::getEndLoc  )
        //.def("getFunctionType", (const clang::FunctionProtoType * (clang::BlockExpr::*)() const)&clang::BlockExpr::getFunctionType , py::return_value_policy::reference_internal )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::BlockExpr::*)())&clang::BlockExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::BlockExpr::*)() const)&clang::BlockExpr::children  )
    ;

    py::class_<clang::AsTypeExpr, stmt_deleter<clang::AsTypeExpr>::type>(m, "AsTypeExpr" , py::base<clang::Expr>())

        .def("getSrcExpr", (clang::Expr * (clang::AsTypeExpr::*)() const)&clang::AsTypeExpr::getSrcExpr , py::return_value_policy::reference_internal )
        .def("getBuiltinLoc", (clang::SourceLocation (clang::AsTypeExpr::*)() const)&clang::AsTypeExpr::getBuiltinLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::AsTypeExpr::*)() const)&clang::AsTypeExpr::getRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::AsTypeExpr::*)() const)&clang::AsTypeExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::AsTypeExpr::*)() const)&clang::AsTypeExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::AsTypeExpr::*)())&clang::AsTypeExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::AsTypeExpr::*)() const)&clang::AsTypeExpr::children  )
    ;

    py::class_<clang::PseudoObjectExpr, stmt_deleter<clang::PseudoObjectExpr>::type>(m, "PseudoObjectExpr" , py::base<clang::Expr>())

        .def("getSyntacticForm", []( clang::PseudoObjectExpr& self) -> clang::Expr * {
         return self.getSyntacticForm();
        } , py::return_value_policy::reference_internal)
        .def("getSyntacticForm", [](const clang::PseudoObjectExpr& self) -> const clang::Expr * {
         return self.getSyntacticForm();
        } , py::return_value_policy::reference_internal)
        .def("getResultExprIndex", (unsigned int (clang::PseudoObjectExpr::*)() const)&clang::PseudoObjectExpr::getResultExprIndex  )
        .def("getResultExpr", []( clang::PseudoObjectExpr& self) -> clang::Expr * {
         return self.getResultExpr();
        } , py::return_value_policy::reference_internal)
        .def("getResultExpr", [](const clang::PseudoObjectExpr& self) -> const clang::Expr * {
         return self.getResultExpr();
        } , py::return_value_policy::reference_internal)
        .def("getNumSemanticExprs", (unsigned int (clang::PseudoObjectExpr::*)() const)&clang::PseudoObjectExpr::getNumSemanticExprs  )
        //.def("semantics", (llvm::iterator_range<clang::Expr *const *> (clang::PseudoObjectExpr::*)())&clang::PseudoObjectExpr::semantics  )
        //.def("semantics", (llvm::iterator_range<const clang::Expr *const *> (clang::PseudoObjectExpr::*)() const)&clang::PseudoObjectExpr::semantics  )
        .def("getSemanticExpr", []( clang::PseudoObjectExpr& self, unsigned int index) -> clang::Expr * {
         return self.getSemanticExpr(index);
        } , py::return_value_policy::reference_internal)
        .def("getSemanticExpr", [](const clang::PseudoObjectExpr& self, unsigned int index) -> const clang::Expr * {
         return self.getSemanticExpr(index);
        } , py::return_value_policy::reference_internal)
        .def("getExprLoc", (clang::SourceLocation (clang::PseudoObjectExpr::*)() const)&clang::PseudoObjectExpr::getExprLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::PseudoObjectExpr::*)() const)&clang::PseudoObjectExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::PseudoObjectExpr::*)() const)&clang::PseudoObjectExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::PseudoObjectExpr::*)())&clang::PseudoObjectExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::PseudoObjectExpr::*)() const)&clang::PseudoObjectExpr::children  )
    ;

    py::class_<clang::AtomicExpr, stmt_deleter<clang::AtomicExpr>::type>(m, "AtomicExpr" , py::base<clang::Expr>())

        .def("getPtr", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getPtr , py::return_value_policy::reference_internal )
        .def("getOrder", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getOrder , py::return_value_policy::reference_internal )
        .def("getScope", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getScope , py::return_value_policy::reference_internal )
        .def("getVal1", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getVal1 , py::return_value_policy::reference_internal )
        .def("getOrderFail", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getOrderFail , py::return_value_policy::reference_internal )
        .def("getVal2", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getVal2 , py::return_value_policy::reference_internal )
        .def("getWeak", (clang::Expr * (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getWeak , py::return_value_policy::reference_internal )
        .def("getValueType", (clang::QualType (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getValueType  )
        .def("getOp", (clang::AtomicExpr::AtomicOp (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getOp  )
        .def("getNumSubExprs", [](const clang::AtomicExpr& self) -> unsigned int {
         return self.getNumSubExprs();
        } )
        .def("isVolatile", (bool (clang::AtomicExpr::*)() const)&clang::AtomicExpr::isVolatile  )
        .def("isCmpXChg", (bool (clang::AtomicExpr::*)() const)&clang::AtomicExpr::isCmpXChg  )
        .def("isOpenCL", (bool (clang::AtomicExpr::*)() const)&clang::AtomicExpr::isOpenCL  )
        .def("getBuiltinLoc", (clang::SourceLocation (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getBuiltinLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::AtomicExpr::*)())&clang::AtomicExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::AtomicExpr::*)() const)&clang::AtomicExpr::children  )
        //.def("getScopeModel", (std::unique_ptr<clang::AtomicScopeModel, std::default_delete<clang::AtomicScopeModel> > (clang::AtomicExpr::*)() const)&clang::AtomicExpr::getScopeModel  )
    ;

    py::class_<clang::TypoExpr, stmt_deleter<clang::TypoExpr>::type>(m, "TypoExpr" , py::base<clang::Expr>())

        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::TypoExpr::*)())&clang::TypoExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::TypoExpr::*)() const)&clang::TypoExpr::children  )
        .def("getBeginLoc", (clang::SourceLocation (clang::TypoExpr::*)() const)&clang::TypoExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::TypoExpr::*)() const)&clang::TypoExpr::getEndLoc  )
    ;

    py::class_<clang::SourceManager>(m, "SourceManager" )

        .def("clearIDTables", (void (clang::SourceManager::*)())&clang::SourceManager::clearIDTables  )
        .def("initializeForReplay", (void (clang::SourceManager::*)(const clang::SourceManager &))&clang::SourceManager::initializeForReplay  )
        //.def("getDiagnostics", (clang::DiagnosticsEngine & (clang::SourceManager::*)() const)&clang::SourceManager::getDiagnostics  )
        //.def("getFileManager", (clang::FileManager & (clang::SourceManager::*)() const)&clang::SourceManager::getFileManager  )
        .def("setOverridenFilesKeepOriginalName", (void (clang::SourceManager::*)(bool))&clang::SourceManager::setOverridenFilesKeepOriginalName  )
        .def("userFilesAreVolatile", (bool (clang::SourceManager::*)() const)&clang::SourceManager::userFilesAreVolatile  )
        //.def("getModuleBuildStack", (llvm::ArrayRef<std::pair<std::__cxx11::basic_string<char>, clang::FullSourceLoc> > (clang::SourceManager::*)() const)&clang::SourceManager::getModuleBuildStack  )
        //.def("setModuleBuildStack", (void (clang::SourceManager::*)(llvm::ArrayRef<std::pair<std::__cxx11::basic_string<char>, clang::FullSourceLoc> >))&clang::SourceManager::setModuleBuildStack  )
        //.def("pushModuleBuildStack", (void (clang::SourceManager::*)(llvm::StringRef, clang::FullSourceLoc))&clang::SourceManager::pushModuleBuildStack  )
        //.def("getMainFileID", (clang::FileID (clang::SourceManager::*)() const)&clang::SourceManager::getMainFileID  )
        //.def("setMainFileID", (void (clang::SourceManager::*)(clang::FileID))&clang::SourceManager::setMainFileID  )
        //.def("setPreambleFileID", (void (clang::SourceManager::*)(clang::FileID))&clang::SourceManager::setPreambleFileID  )
        //.def("getPreambleFileID", (clang::FileID (clang::SourceManager::*)() const)&clang::SourceManager::getPreambleFileID  )
        //.def("createFileID", (clang::FileID (clang::SourceManager::*)(const clang::FileEntry *, clang::SourceLocation, clang::SrcMgr::CharacteristicKind, int, unsigned int))&clang::SourceManager::createFileID  )
        //.def("createFileID", (clang::FileID (clang::SourceManager::*)(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >, clang::SrcMgr::CharacteristicKind, int, unsigned int, clang::SourceLocation))&clang::SourceManager::createFileID  )
        //.def("createFileID", (clang::FileID (clang::SourceManager::*)(clang::SourceManager::UnownedTag, llvm::MemoryBuffer *, clang::SrcMgr::CharacteristicKind, int, unsigned int, clang::SourceLocation))&clang::SourceManager::createFileID  )
        //.def("getOrCreateFileID", (clang::FileID (clang::SourceManager::*)(const clang::FileEntry *, clang::SrcMgr::CharacteristicKind))&clang::SourceManager::getOrCreateFileID  )
        .def("createMacroArgExpansionLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation, unsigned int))&clang::SourceManager::createMacroArgExpansionLoc  )
        .def("createExpansionLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation, clang::SourceLocation, unsigned int, bool, int, unsigned int))&clang::SourceManager::createExpansionLoc  )
        .def("createTokenSplitLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation, clang::SourceLocation))&clang::SourceManager::createTokenSplitLoc  )
        //.def("getMemoryBufferForFile", (llvm::MemoryBuffer * (clang::SourceManager::*)(const clang::FileEntry *, bool *))&clang::SourceManager::getMemoryBufferForFile  )
        //.def("overrideFileContents", (void (clang::SourceManager::*)(const clang::FileEntry *, llvm::MemoryBuffer *, bool))&clang::SourceManager::overrideFileContents  )
        //.def("overrideFileContents", (void (clang::SourceManager::*)(const clang::FileEntry *, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >))&clang::SourceManager::overrideFileContents  )
        //.def("overrideFileContents", (void (clang::SourceManager::*)(const clang::FileEntry *, const clang::FileEntry *))&clang::SourceManager::overrideFileContents  )
        //.def("isFileOverridden", (bool (clang::SourceManager::*)(const clang::FileEntry *) const)&clang::SourceManager::isFileOverridden  )
        //.def("disableFileContentsOverride", (void (clang::SourceManager::*)(const clang::FileEntry *))&clang::SourceManager::disableFileContentsOverride  )
        //.def("setFileIsTransient", (void (clang::SourceManager::*)(const clang::FileEntry *))&clang::SourceManager::setFileIsTransient  )
        .def("setAllFilesAreTransient", (void (clang::SourceManager::*)(bool))&clang::SourceManager::setAllFilesAreTransient  )
        //.def("getBuffer", (llvm::MemoryBuffer * (clang::SourceManager::*)(clang::FileID, clang::SourceLocation, bool *) const)&clang::SourceManager::getBuffer  )
        //.def("getBuffer", (llvm::MemoryBuffer * (clang::SourceManager::*)(clang::FileID, bool *) const)&clang::SourceManager::getBuffer  )
        //.def("getFileEntryForID", (const clang::FileEntry * (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getFileEntryForID , py::return_value_policy::reference_internal )
        //.def("getFileEntryForSLocEntry", (const clang::FileEntry * (clang::SourceManager::*)(const clang::SrcMgr::SLocEntry &) const)&clang::SourceManager::getFileEntryForSLocEntry , py::return_value_policy::reference_internal )
        //.def("getBufferData", (llvm::StringRef (clang::SourceManager::*)(clang::FileID, bool *) const)&clang::SourceManager::getBufferData  )
        //.def("getNumCreatedFIDsForFileID", (unsigned int (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getNumCreatedFIDsForFileID  )
        //.def("setNumCreatedFIDsForFileID", (void (clang::SourceManager::*)(clang::FileID, unsigned int, bool) const)&clang::SourceManager::setNumCreatedFIDsForFileID  )
        //.def("getFileID", (clang::FileID (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getFileID  )
        .def("getFilename", (llvm::StringRef (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getFilename  )
        //.def("getLocForStartOfFile", (clang::SourceLocation (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getLocForStartOfFile  )
        //.def("getLocForEndOfFile", (clang::SourceLocation (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getLocForEndOfFile  )
        //.def("getIncludeLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getIncludeLoc  )
        //.def("getModuleImportLoc", (std::pair<clang::SourceLocation, llvm::StringRef> (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getModuleImportLoc  )
        .def("getExpansionLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getExpansionLoc  )
        .def("getFileLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getFileLoc  )
        //.def("getImmediateExpansionRange", (clang::CharSourceRange (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getImmediateExpansionRange  )
        //.def("getExpansionRange", (clang::CharSourceRange (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getExpansionRange  )
        //.def("getExpansionRange", (clang::CharSourceRange (clang::SourceManager::*)(clang::SourceRange) const)&clang::SourceManager::getExpansionRange  )
        //.def("getExpansionRange", (clang::CharSourceRange (clang::SourceManager::*)(clang::CharSourceRange) const)&clang::SourceManager::getExpansionRange  )
        .def("getSpellingLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getSpellingLoc  )
        .def("getImmediateSpellingLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getImmediateSpellingLoc  )
        //.def("getComposedLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::FileID, unsigned int) const)&clang::SourceManager::getComposedLoc  )
        //.def("getDecomposedLoc", (std::pair<clang::FileID, unsigned int> (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getDecomposedLoc  )
        //.def("getDecomposedExpansionLoc", (std::pair<clang::FileID, unsigned int> (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getDecomposedExpansionLoc  )
        //.def("getDecomposedSpellingLoc", (std::pair<clang::FileID, unsigned int> (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getDecomposedSpellingLoc  )
        //.def("getDecomposedIncludedLoc", (std::pair<clang::FileID, unsigned int> (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getDecomposedIncludedLoc  )
        .def("getFileOffset", (unsigned int (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getFileOffset  )
        .def("isMacroArgExpansion", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation *) const)&clang::SourceManager::isMacroArgExpansion  )
        .def("isMacroBodyExpansion", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isMacroBodyExpansion  )
        .def("isAtStartOfImmediateMacroExpansion", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation *) const)&clang::SourceManager::isAtStartOfImmediateMacroExpansion  )
        .def("isAtEndOfImmediateMacroExpansion", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation *) const)&clang::SourceManager::isAtEndOfImmediateMacroExpansion  )
        .def("isInSLocAddrSpace", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation, unsigned int, unsigned int *) const)&clang::SourceManager::isInSLocAddrSpace  )
        .def("isInSameSLocAddrSpace", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation, int *) const)&clang::SourceManager::isInSameSLocAddrSpace  )
        .def("getCharacterData", [](const clang::SourceManager& self, clang::SourceLocation SL) -> const char * {
          bool Invalid = false;
          const char * res = self.getCharacterData(SL, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        //.def("getColumnNumber", (unsigned int (clang::SourceManager::*)(clang::FileID, unsigned int, bool *) const)&clang::SourceManager::getColumnNumber  )
        .def("getSpellingColumnNumber", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> unsigned int {
          bool Invalid = false;
          unsigned int res = self.getSpellingColumnNumber(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        .def("getExpansionColumnNumber", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> unsigned int {
          bool Invalid = false;
          unsigned int res = self.getExpansionColumnNumber(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        .def("getPresumedColumnNumber", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> unsigned int {
          bool Invalid = false;
          unsigned int res = self.getPresumedColumnNumber(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        //.def("getLineNumber", (unsigned int (clang::SourceManager::*)(clang::FileID, unsigned int, bool *) const)&clang::SourceManager::getLineNumber  )
        .def("getSpellingLineNumber", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> unsigned int {
          bool Invalid = false;
          unsigned int res = self.getSpellingLineNumber(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        .def("getExpansionLineNumber", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> unsigned int {
          bool Invalid = false;
          unsigned int res = self.getExpansionLineNumber(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        .def("getPresumedLineNumber", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> unsigned int {
          bool Invalid = false;
          unsigned int res = self.getPresumedLineNumber(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        .def("getBufferName", [](const clang::SourceManager& self, clang::SourceLocation Loc) -> llvm::StringRef {
          bool Invalid = false;
          llvm::StringRef res = self.getBufferName(Loc, &Invalid);
          if(Invalid) {
            throw std::runtime_error("Invalid response");
          }
          return res;
        } )
        //.def("getFileCharacteristic", (clang::SrcMgr::CharacteristicKind (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getFileCharacteristic  )
        //.def("getPresumedLoc", (clang::PresumedLoc (clang::SourceManager::*)(clang::SourceLocation, bool) const)&clang::SourceManager::getPresumedLoc  )
        .def("isInMainFile", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isInMainFile  )
        .def("isWrittenInSameFile", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation) const)&clang::SourceManager::isWrittenInSameFile  )
        .def("isWrittenInMainFile", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isWrittenInMainFile  )
        .def("isWrittenInBuiltinFile", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isWrittenInBuiltinFile  )
        .def("isWrittenInCommandLineFile", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isWrittenInCommandLineFile  )
        .def("isInSystemHeader", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isInSystemHeader  )
        .def("isInExternCSystemHeader", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isInExternCSystemHeader  )
        .def("isInSystemMacro", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isInSystemMacro  )
        //.def("getFileIDSize", (unsigned int (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::getFileIDSize  )
        //.def("isInFileID", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::FileID, unsigned int *) const)&clang::SourceManager::isInFileID  )
        .def("getLineTableFilenameID", (unsigned int (clang::SourceManager::*)(llvm::StringRef))&clang::SourceManager::getLineTableFilenameID  )
        //.def("AddLineNote", (void (clang::SourceManager::*)(clang::SourceLocation, unsigned int, int, bool, bool, clang::SrcMgr::CharacteristicKind))&clang::SourceManager::AddLineNote  )
        .def("hasLineTable", (bool (clang::SourceManager::*)() const)&clang::SourceManager::hasLineTable  )
        //.def("getLineTable", (clang::LineTableInfo & (clang::SourceManager::*)())&clang::SourceManager::getLineTable  )
        .def("getContentCacheSize", (unsigned long (clang::SourceManager::*)() const)&clang::SourceManager::getContentCacheSize  )
        //.def("getMemoryBufferSizes", (clang::SourceManager::MemoryBufferSizes (clang::SourceManager::*)() const)&clang::SourceManager::getMemoryBufferSizes  )
        .def("getDataStructureSizes", (unsigned long (clang::SourceManager::*)() const)&clang::SourceManager::getDataStructureSizes  )
        //.def("translateFileLineCol", (clang::SourceLocation (clang::SourceManager::*)(const clang::FileEntry *, unsigned int, unsigned int) const)&clang::SourceManager::translateFileLineCol  )
        //.def("translateFile", (clang::FileID (clang::SourceManager::*)(const clang::FileEntry *) const)&clang::SourceManager::translateFile  )
        //.def("translateLineCol", (clang::SourceLocation (clang::SourceManager::*)(clang::FileID, unsigned int, unsigned int) const)&clang::SourceManager::translateLineCol  )
        .def("getMacroArgExpandedLocation", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getMacroArgExpandedLocation  )
        .def("isBeforeInTranslationUnit", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation) const)&clang::SourceManager::isBeforeInTranslationUnit  )
        //.def("isInTheSameTranslationUnit", (std::pair<bool, bool> (clang::SourceManager::*)(std::pair<clang::FileID, unsigned int> &, std::pair<clang::FileID, unsigned int> &) const)&clang::SourceManager::isInTheSameTranslationUnit  )
        .def("isBeforeInSLocAddrSpace", [](const clang::SourceManager& self, clang::SourceLocation LHS , clang::SourceLocation RHS) -> bool {
         return self.isBeforeInSLocAddrSpace(LHS, RHS);
        } )
        .def("isBeforeInSLocAddrSpace", [](const clang::SourceManager& self, clang::SourceLocation LHS , unsigned int RHS) -> bool {
         return self.isBeforeInSLocAddrSpace(LHS, RHS);
        } )
        .def("isPointWithin", (bool (clang::SourceManager::*)(clang::SourceLocation, clang::SourceLocation, clang::SourceLocation) const)&clang::SourceManager::isPointWithin  )
        //.def("hasFileInfo", (bool (clang::SourceManager::*)(const clang::FileEntry *) const)&clang::SourceManager::hasFileInfo  )
        .def("PrintStats", (void (clang::SourceManager::*)() const)&clang::SourceManager::PrintStats  )
        .def("dump", (void (clang::SourceManager::*)() const)&clang::SourceManager::dump  )
        .def("local_sloc_entry_size", (unsigned int (clang::SourceManager::*)() const)&clang::SourceManager::local_sloc_entry_size  )
        //.def("getLocalSLocEntry", (const clang::SrcMgr::SLocEntry & (clang::SourceManager::*)(unsigned int, bool *) const)&clang::SourceManager::getLocalSLocEntry  )
        .def("loaded_sloc_entry_size", (unsigned int (clang::SourceManager::*)() const)&clang::SourceManager::loaded_sloc_entry_size  )
        //.def("getLoadedSLocEntry", (const clang::SrcMgr::SLocEntry & (clang::SourceManager::*)(unsigned int, bool *) const)&clang::SourceManager::getLoadedSLocEntry  )
        //.def("getSLocEntry", (const clang::SrcMgr::SLocEntry & (clang::SourceManager::*)(clang::FileID, bool *) const)&clang::SourceManager::getSLocEntry  )
        .def("getNextLocalOffset", (unsigned int (clang::SourceManager::*)() const)&clang::SourceManager::getNextLocalOffset  )
        //.def("setExternalSLocEntrySource", (void (clang::SourceManager::*)(clang::ExternalSLocEntrySource *))&clang::SourceManager::setExternalSLocEntrySource  )
        //.def("AllocateLoadedSLocEntries", (std::pair<int, unsigned int> (clang::SourceManager::*)(unsigned int, unsigned int))&clang::SourceManager::AllocateLoadedSLocEntries  )
        .def("isLoadedSourceLocation", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isLoadedSourceLocation  )
        .def("isLocalSourceLocation", (bool (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::isLocalSourceLocation  )
        //.def("isLoadedFileID", (bool (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::isLoadedFileID  )
        //.def("isLocalFileID", (bool (clang::SourceManager::*)(clang::FileID) const)&clang::SourceManager::isLocalFileID  )
        .def("getImmediateMacroCallerLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getImmediateMacroCallerLoc  )
        .def("getTopMacroCallerLoc", (clang::SourceLocation (clang::SourceManager::*)(clang::SourceLocation) const)&clang::SourceManager::getTopMacroCallerLoc  )
    ;

    py::class_<clang::ASTContext>(m, "ASTContext" )

        //.def("getTraversalScope", (std::vector<clang::Decl *, std::allocator<clang::Decl *> > (clang::ASTContext::*)() const)&clang::ASTContext::getTraversalScope  )
        //.def("setTraversalScope", (void (clang::ASTContext::*)(const std::vector<clang::Decl *, std::allocator<clang::Decl *> > &))&clang::ASTContext::setTraversalScope  )
        //.def("getParents", (clang::ASTContext::DynTypedNodeList (clang::ASTContext::*)(const clang::ast_type_traits::DynTypedNode &))&clang::ASTContext::getParents  )
        //.def("getPrintingPolicy", (const clang::PrintingPolicy & (clang::ASTContext::*)() const)&clang::ASTContext::getPrintingPolicy  )
        //.def("setPrintingPolicy", (void (clang::ASTContext::*)(const clang::PrintingPolicy &))&clang::ASTContext::setPrintingPolicy  )
        .def("getSourceManager", []( clang::ASTContext& self) -> clang::SourceManager & {
         return self.getSourceManager();
        } )
        .def("getSourceManager", [](const clang::ASTContext& self) -> const clang::SourceManager & {
         return self.getSourceManager();
        } )
        //.def("getAllocator", (llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096, 4096> & (clang::ASTContext::*)() const)&clang::ASTContext::getAllocator  )
        //.def("Deallocate", (void (clang::ASTContext::*)(void *) const)&clang::ASTContext::Deallocate  )
        .def("getASTAllocatedMemory", (unsigned long (clang::ASTContext::*)() const)&clang::ASTContext::getASTAllocatedMemory  )
        .def("getSideTableAllocatedMemory", (unsigned long (clang::ASTContext::*)() const)&clang::ASTContext::getSideTableAllocatedMemory  )
        //.def("getDiagAllocator", (clang::PartialDiagnostic::StorageAllocator & (clang::ASTContext::*)())&clang::ASTContext::getDiagAllocator  )
        //.def("getTargetInfo", (const clang::TargetInfo & (clang::ASTContext::*)() const)&clang::ASTContext::getTargetInfo  )
        //.def("getAuxTargetInfo", (const clang::TargetInfo * (clang::ASTContext::*)() const)&clang::ASTContext::getAuxTargetInfo , py::return_value_policy::reference_internal )
        .def("getIntTypeForBitwidth", (clang::QualType (clang::ASTContext::*)(unsigned int, unsigned int) const)&clang::ASTContext::getIntTypeForBitwidth  )
        .def("getRealTypeForBitwidth", (clang::QualType (clang::ASTContext::*)(unsigned int) const)&clang::ASTContext::getRealTypeForBitwidth  )
        .def("AtomicUsesUnsupportedLibcall", (bool (clang::ASTContext::*)(const clang::AtomicExpr *) const)&clang::ASTContext::AtomicUsesUnsupportedLibcall  )
        //.def("getLangOpts", (const clang::LangOptions & (clang::ASTContext::*)() const)&clang::ASTContext::getLangOpts  )
        //.def("getSanitizerBlacklist", (const clang::SanitizerBlacklist & (clang::ASTContext::*)() const)&clang::ASTContext::getSanitizerBlacklist  )
        //.def("getXRayFilter", (const clang::XRayFunctionFilter & (clang::ASTContext::*)() const)&clang::ASTContext::getXRayFilter  )
        //.def("getDiagnostics", (clang::DiagnosticsEngine & (clang::ASTContext::*)() const)&clang::ASTContext::getDiagnostics  )
        //.def("getFullLoc", (clang::FullSourceLoc (clang::ASTContext::*)(clang::SourceLocation) const)&clang::ASTContext::getFullLoc  )
        //.def("getRawCommentForDeclNoCache", (clang::RawComment * (clang::ASTContext::*)(const clang::Decl *) const)&clang::ASTContext::getRawCommentForDeclNoCache , py::return_value_policy::reference_internal )
        //.def("getRawCommentList", (clang::RawCommentList & (clang::ASTContext::*)())&clang::ASTContext::getRawCommentList  )
        //.def("addComment", (void (clang::ASTContext::*)(const clang::RawComment &))&clang::ASTContext::addComment  )
        //.def("getCommentForDecl", (clang::comments::FullComment * (clang::ASTContext::*)(const clang::Decl *, const clang::Preprocessor *) const)&clang::ASTContext::getCommentForDecl  )
        //.def("getLocalCommentForDeclUncached", (clang::comments::FullComment * (clang::ASTContext::*)(const clang::Decl *) const)&clang::ASTContext::getLocalCommentForDeclUncached  )
        //.def("cloneFullComment", (clang::comments::FullComment * (clang::ASTContext::*)(clang::comments::FullComment *, const clang::Decl *) const)&clang::ASTContext::cloneFullComment  )
        //.def("getCommentCommandTraits", (clang::comments::CommandTraits & (clang::ASTContext::*)() const)&clang::ASTContext::getCommentCommandTraits  )
        //.def("getDeclAttrs", (llvm::SmallVector<clang::Attr *, 4> & (clang::ASTContext::*)(const clang::Decl *))&clang::ASTContext::getDeclAttrs  )
        .def("eraseDeclAttrs", (void (clang::ASTContext::*)(const clang::Decl *))&clang::ASTContext::eraseDeclAttrs  )
        //.def("getInstantiatedFromStaticDataMember", (clang::MemberSpecializationInfo * (clang::ASTContext::*)(const clang::VarDecl *))&clang::ASTContext::getInstantiatedFromStaticDataMember , py::return_value_policy::reference_internal )
        //.def("getTemplateOrSpecializationInfo", (llvm::PointerUnion<clang::VarTemplateDecl *, clang::MemberSpecializationInfo *> (clang::ASTContext::*)(const clang::VarDecl *))&clang::ASTContext::getTemplateOrSpecializationInfo  )
        .def("getClassScopeSpecializationPattern", (clang::FunctionDecl * (clang::ASTContext::*)(const clang::FunctionDecl *))&clang::ASTContext::getClassScopeSpecializationPattern , py::return_value_policy::reference_internal )
        .def("setClassScopeSpecializationPattern", (void (clang::ASTContext::*)(clang::FunctionDecl *, clang::FunctionDecl *))&clang::ASTContext::setClassScopeSpecializationPattern  )
        .def("setInstantiatedFromStaticDataMember", (void (clang::ASTContext::*)(clang::VarDecl *, clang::VarDecl *, clang::TemplateSpecializationKind, clang::SourceLocation))&clang::ASTContext::setInstantiatedFromStaticDataMember  )
        //.def("setTemplateOrSpecializationInfo", (void (clang::ASTContext::*)(clang::VarDecl *, llvm::PointerUnion<clang::VarTemplateDecl *, clang::MemberSpecializationInfo *>))&clang::ASTContext::setTemplateOrSpecializationInfo  )
        .def("getInstantiatedFromUsingDecl", (clang::NamedDecl * (clang::ASTContext::*)(clang::NamedDecl *))&clang::ASTContext::getInstantiatedFromUsingDecl , py::return_value_policy::reference_internal )
        .def("setInstantiatedFromUsingDecl", (void (clang::ASTContext::*)(clang::NamedDecl *, clang::NamedDecl *))&clang::ASTContext::setInstantiatedFromUsingDecl  )
        .def("setInstantiatedFromUsingShadowDecl", (void (clang::ASTContext::*)(clang::UsingShadowDecl *, clang::UsingShadowDecl *))&clang::ASTContext::setInstantiatedFromUsingShadowDecl  )
        .def("getInstantiatedFromUsingShadowDecl", (clang::UsingShadowDecl * (clang::ASTContext::*)(clang::UsingShadowDecl *))&clang::ASTContext::getInstantiatedFromUsingShadowDecl , py::return_value_policy::reference_internal )
        .def("getInstantiatedFromUnnamedFieldDecl", (clang::FieldDecl * (clang::ASTContext::*)(clang::FieldDecl *))&clang::ASTContext::getInstantiatedFromUnnamedFieldDecl , py::return_value_policy::reference_internal )
        .def("setInstantiatedFromUnnamedFieldDecl", (void (clang::ASTContext::*)(clang::FieldDecl *, clang::FieldDecl *))&clang::ASTContext::setInstantiatedFromUnnamedFieldDecl  )
        .def("overridden_methods_size", (unsigned int (clang::ASTContext::*)(const clang::CXXMethodDecl *) const)&clang::ASTContext::overridden_methods_size  )
        //.def("overridden_methods", (llvm::iterator_range<const clang::CXXMethodDecl *const *> (clang::ASTContext::*)(const clang::CXXMethodDecl *) const)&clang::ASTContext::overridden_methods  )
        .def("addOverriddenMethod", (void (clang::ASTContext::*)(const clang::CXXMethodDecl *, const clang::CXXMethodDecl *))&clang::ASTContext::addOverriddenMethod  )
        //.def("getOverriddenMethods", (void (clang::ASTContext::*)(const clang::NamedDecl *, llvm::SmallVectorImpl<const clang::NamedDecl *> &) const)&clang::ASTContext::getOverriddenMethods  )
        .def("addedLocalImportDecl", (void (clang::ASTContext::*)(clang::ImportDecl *))&clang::ASTContext::addedLocalImportDecl  )
        //.def("local_imports", (llvm::iterator_range<clang::ASTContext::import_iterator> (clang::ASTContext::*)() const)&clang::ASTContext::local_imports  )
        .def("getPrimaryMergedDecl", (clang::Decl * (clang::ASTContext::*)(clang::Decl *))&clang::ASTContext::getPrimaryMergedDecl , py::return_value_policy::reference_internal )
        .def("setPrimaryMergedDecl", (void (clang::ASTContext::*)(clang::Decl *, clang::Decl *))&clang::ASTContext::setPrimaryMergedDecl  )
        //.def("mergeDefinitionIntoModule", (void (clang::ASTContext::*)(clang::NamedDecl *, clang::Module *, bool))&clang::ASTContext::mergeDefinitionIntoModule  )
        .def("deduplicateMergedDefinitonsFor", (void (clang::ASTContext::*)(clang::NamedDecl *))&clang::ASTContext::deduplicateMergedDefinitonsFor  )
        //.def("getModulesWithMergedDefinition", (llvm::ArrayRef<clang::Module *> (clang::ASTContext::*)(const clang::NamedDecl *))&clang::ASTContext::getModulesWithMergedDefinition  )
        //.def("addModuleInitializer", (void (clang::ASTContext::*)(clang::Module *, clang::Decl *))&clang::ASTContext::addModuleInitializer  )
        //.def("addLazyModuleInitializers", (void (clang::ASTContext::*)(clang::Module *, llvm::ArrayRef<unsigned int>))&clang::ASTContext::addLazyModuleInitializers  )
        //.def("getModuleInitializers", (llvm::ArrayRef<clang::Decl *> (clang::ASTContext::*)(clang::Module *))&clang::ASTContext::getModuleInitializers  )
        .def("getTranslationUnitDecl", (clang::TranslationUnitDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getTranslationUnitDecl , py::return_value_policy::reference_internal )
        .def("getExternCContextDecl", (clang::ExternCContextDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getExternCContextDecl , py::return_value_policy::reference_internal )
        .def("getMakeIntegerSeqDecl", (clang::BuiltinTemplateDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getMakeIntegerSeqDecl , py::return_value_policy::reference_internal )
        .def("getTypePackElementDecl", (clang::BuiltinTemplateDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getTypePackElementDecl , py::return_value_policy::reference_internal )
        //.def("setExternalSource", (void (clang::ASTContext::*)(llvm::IntrusiveRefCntPtr<clang::ExternalASTSource>))&clang::ASTContext::setExternalSource  )
        //.def("getExternalSource", (clang::ExternalASTSource * (clang::ASTContext::*)() const)&clang::ASTContext::getExternalSource , py::return_value_policy::reference_internal )
        //.def("setASTMutationListener", (void (clang::ASTContext::*)(clang::ASTMutationListener *))&clang::ASTContext::setASTMutationListener  )
        //.def("getASTMutationListener", (clang::ASTMutationListener * (clang::ASTContext::*)() const)&clang::ASTContext::getASTMutationListener , py::return_value_policy::reference_internal )
        .def("PrintStats", (void (clang::ASTContext::*)() const)&clang::ASTContext::PrintStats  )
        //.def("getTypes", (const llvm::SmallVectorImpl<clang::Type *> & (clang::ASTContext::*)() const)&clang::ASTContext::getTypes  )
        //.def("buildBuiltinTemplateDecl", (clang::BuiltinTemplateDecl * (clang::ASTContext::*)(clang::BuiltinTemplateKind, const clang::IdentifierInfo *) const)&clang::ASTContext::buildBuiltinTemplateDecl , py::return_value_policy::reference_internal )
        //.def("buildImplicitRecord", (clang::RecordDecl * (clang::ASTContext::*)(llvm::StringRef, clang::TagTypeKind) const)&clang::ASTContext::buildImplicitRecord , py::return_value_policy::reference_internal )
        .def("buildImplicitTypedef", (clang::TypedefDecl * (clang::ASTContext::*)(clang::QualType, llvm::StringRef) const)&clang::ASTContext::buildImplicitTypedef , py::return_value_policy::reference_internal )
        .def("getInt128Decl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getInt128Decl , py::return_value_policy::reference_internal )
        .def("getUInt128Decl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getUInt128Decl , py::return_value_policy::reference_internal )
        .def("getAddrSpaceQualType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::LangAS) const)&clang::ASTContext::getAddrSpaceQualType  )
        .def("removeAddrSpaceQualType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::removeAddrSpaceQualType  )
        //.def("applyObjCProtocolQualifiers", (clang::QualType (clang::ASTContext::*)(clang::QualType, llvm::ArrayRef<clang::ObjCProtocolDecl *>, bool &, bool) const)&clang::ASTContext::applyObjCProtocolQualifiers  )
        .def("getObjCGCQualType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Qualifiers::GC) const)&clang::ASTContext::getObjCGCQualType  )
        .def("getRestrictType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getRestrictType  )
        .def("getVolatileType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getVolatileType  )
        .def("getConstType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getConstType  )
        //.def("adjustFunctionType", (const clang::FunctionType * (clang::ASTContext::*)(const clang::FunctionType *, clang::FunctionType::ExtInfo))&clang::ASTContext::adjustFunctionType , py::return_value_policy::reference_internal )
        //.def("getCanonicalFunctionResultType", (clang::CanQual<clang::Type> (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getCanonicalFunctionResultType  )
        .def("adjustDeducedFunctionResultType", (void (clang::ASTContext::*)(clang::FunctionDecl *, clang::QualType))&clang::ASTContext::adjustDeducedFunctionResultType  )
        //.def("getFunctionTypeWithExceptionSpec", (clang::QualType (clang::ASTContext::*)(clang::QualType, const clang::FunctionProtoType::ExceptionSpecInfo &))&clang::ASTContext::getFunctionTypeWithExceptionSpec  )
        .def("hasSameFunctionTypeIgnoringExceptionSpec", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::hasSameFunctionTypeIgnoringExceptionSpec  )
        //.def("adjustExceptionSpec", (void (clang::ASTContext::*)(clang::FunctionDecl *, const clang::FunctionProtoType::ExceptionSpecInfo &, bool))&clang::ASTContext::adjustExceptionSpec  )
        .def("getComplexType", [](const clang::ASTContext& self, clang::QualType T) -> clang::QualType {
         return self.getComplexType(T);
        } )
        //.def("getComplexType", (clang::CanQual<clang::Type> (clang::ASTContext::*)(clang::CanQual<clang::Type>) const)&clang::ASTContext::getComplexType  )
        .def("getPointerType", [](const clang::ASTContext& self, clang::QualType T) -> clang::QualType {
         return self.getPointerType(T);
        } )
        //.def("getPointerType", (clang::CanQual<clang::Type> (clang::ASTContext::*)(clang::CanQual<clang::Type>) const)&clang::ASTContext::getPointerType  )
        .def("getAdjustedType", [](const clang::ASTContext& self, clang::QualType Orig , clang::QualType New) -> clang::QualType {
         return self.getAdjustedType(Orig, New);
        } )
        //.def("getAdjustedType", (clang::CanQual<clang::Type> (clang::ASTContext::*)(clang::CanQual<clang::Type>, clang::CanQual<clang::Type>) const)&clang::ASTContext::getAdjustedType  )
        .def("getDecayedType", [](const clang::ASTContext& self, clang::QualType T) -> clang::QualType {
         return self.getDecayedType(T);
        } )
        //.def("getDecayedType", (clang::CanQual<clang::Type> (clang::ASTContext::*)(clang::CanQual<clang::Type>) const)&clang::ASTContext::getDecayedType  )
        .def("getAtomicType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAtomicType  )
        .def("getBlockPointerType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getBlockPointerType  )
        .def("getBlockDescriptorType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getBlockDescriptorType  )
        .def("getReadPipeType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getReadPipeType  )
        .def("getWritePipeType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getWritePipeType  )
        .def("getBlockDescriptorExtendedType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getBlockDescriptorExtendedType  )
        //.def("getOpenCLTypeKind", (clang::TargetInfo::OpenCLTypeKind (clang::ASTContext::*)(const clang::Type *) const)&clang::ASTContext::getOpenCLTypeKind  )
        .def("getOpenCLTypeAddrSpace", (clang::LangAS (clang::ASTContext::*)(const clang::Type *) const)&clang::ASTContext::getOpenCLTypeAddrSpace  )
        .def("setcudaConfigureCallDecl", (void (clang::ASTContext::*)(clang::FunctionDecl *))&clang::ASTContext::setcudaConfigureCallDecl  )
        .def("getcudaConfigureCallDecl", (clang::FunctionDecl * (clang::ASTContext::*)())&clang::ASTContext::getcudaConfigureCallDecl , py::return_value_policy::reference_internal )
        .def("BlockRequiresCopying", (bool (clang::ASTContext::*)(clang::QualType, const clang::VarDecl *))&clang::ASTContext::BlockRequiresCopying  )
        .def("getByrefLifetime", (bool (clang::ASTContext::*)(clang::QualType, clang::Qualifiers::ObjCLifetime &, bool &) const)&clang::ASTContext::getByrefLifetime  )
        .def("getLValueReferenceType", (clang::QualType (clang::ASTContext::*)(clang::QualType, bool) const)&clang::ASTContext::getLValueReferenceType  )
        .def("getRValueReferenceType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getRValueReferenceType  )
        .def("getMemberPointerType", (clang::QualType (clang::ASTContext::*)(clang::QualType, const clang::Type *) const)&clang::ASTContext::getMemberPointerType  )
        //.def("getVariableArrayType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Expr *, clang::ArrayType::ArraySizeModifier, unsigned int, clang::SourceRange) const)&clang::ASTContext::getVariableArrayType  )
        //.def("getDependentSizedArrayType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Expr *, clang::ArrayType::ArraySizeModifier, unsigned int, clang::SourceRange) const)&clang::ASTContext::getDependentSizedArrayType  )
        //.def("getIncompleteArrayType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::ArrayType::ArraySizeModifier, unsigned int) const)&clang::ASTContext::getIncompleteArrayType  )
        //.def("getConstantArrayType", (clang::QualType (clang::ASTContext::*)(clang::QualType, const llvm::APInt &, clang::ArrayType::ArraySizeModifier, unsigned int) const)&clang::ASTContext::getConstantArrayType  )
        .def("getVariableArrayDecayedType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getVariableArrayDecayedType  )
        //.def("getVectorType", (clang::QualType (clang::ASTContext::*)(clang::QualType, unsigned int, clang::VectorType::VectorKind) const)&clang::ASTContext::getVectorType  )
        //.def("getDependentVectorType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Expr *, clang::SourceLocation, clang::VectorType::VectorKind) const)&clang::ASTContext::getDependentVectorType  )
        .def("getExtVectorType", (clang::QualType (clang::ASTContext::*)(clang::QualType, unsigned int) const)&clang::ASTContext::getExtVectorType  )
        .def("getDependentSizedExtVectorType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Expr *, clang::SourceLocation) const)&clang::ASTContext::getDependentSizedExtVectorType  )
        .def("getDependentAddressSpaceType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Expr *, clang::SourceLocation) const)&clang::ASTContext::getDependentAddressSpaceType  )
        //.def("getFunctionNoProtoType", (clang::QualType (clang::ASTContext::*)(clang::QualType, const clang::FunctionType::ExtInfo &) const)&clang::ASTContext::getFunctionNoProtoType  )
        .def("getFunctionNoProtoType", [](const clang::ASTContext& self, clang::QualType ResultTy) -> clang::QualType {
         return self.getFunctionNoProtoType(ResultTy);
        } )
        //.def("getFunctionType", (clang::QualType (clang::ASTContext::*)(clang::QualType, llvm::ArrayRef<clang::QualType>, const clang::FunctionProtoType::ExtProtoInfo &) const)&clang::ASTContext::getFunctionType  )
        .def("adjustStringLiteralBaseType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::adjustStringLiteralBaseType  )
        .def("getTypeDeclType", (clang::QualType (clang::ASTContext::*)(const clang::TypeDecl *, const clang::TypeDecl *) const)&clang::ASTContext::getTypeDeclType  )
        .def("getTypedefType", (clang::QualType (clang::ASTContext::*)(const clang::TypedefNameDecl *, clang::QualType) const)&clang::ASTContext::getTypedefType  )
        .def("getRecordType", (clang::QualType (clang::ASTContext::*)(const clang::RecordDecl *) const)&clang::ASTContext::getRecordType  )
        .def("getEnumType", (clang::QualType (clang::ASTContext::*)(const clang::EnumDecl *) const)&clang::ASTContext::getEnumType  )
        .def("getInjectedClassNameType", (clang::QualType (clang::ASTContext::*)(clang::CXXRecordDecl *, clang::QualType) const)&clang::ASTContext::getInjectedClassNameType  )
        //.def("getAttributedType", (clang::QualType (clang::ASTContext::*)(clang::attr::Kind, clang::QualType, clang::QualType))&clang::ASTContext::getAttributedType  )
        //.def("getSubstTemplateTypeParmType", (clang::QualType (clang::ASTContext::*)(const clang::TemplateTypeParmType *, clang::QualType) const)&clang::ASTContext::getSubstTemplateTypeParmType  )
        //.def("getSubstTemplateTypeParmPackType", (clang::QualType (clang::ASTContext::*)(const clang::TemplateTypeParmType *, const clang::TemplateArgument &))&clang::ASTContext::getSubstTemplateTypeParmPackType  )
        .def("getTemplateTypeParmType", (clang::QualType (clang::ASTContext::*)(unsigned int, unsigned int, bool, clang::TemplateTypeParmDecl *) const)&clang::ASTContext::getTemplateTypeParmType  )
        //.def("getTemplateSpecializationType", (clang::QualType (clang::ASTContext::*)(clang::TemplateName, llvm::ArrayRef<clang::TemplateArgument>, clang::QualType) const)&clang::ASTContext::getTemplateSpecializationType  )
        //.def("getCanonicalTemplateSpecializationType", (clang::QualType (clang::ASTContext::*)(clang::TemplateName, llvm::ArrayRef<clang::TemplateArgument>) const)&clang::ASTContext::getCanonicalTemplateSpecializationType  )
        //.def("getTemplateSpecializationType", (clang::QualType (clang::ASTContext::*)(clang::TemplateName, const clang::TemplateArgumentListInfo &, clang::QualType) const)&clang::ASTContext::getTemplateSpecializationType  )
        //.def("getTemplateSpecializationTypeInfo", (clang::TypeSourceInfo * (clang::ASTContext::*)(clang::TemplateName, clang::SourceLocation, const clang::TemplateArgumentListInfo &, clang::QualType) const)&clang::ASTContext::getTemplateSpecializationTypeInfo , py::return_value_policy::reference_internal )
        .def("getParenType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getParenType  )
        //.def("getElaboratedType", (clang::QualType (clang::ASTContext::*)(clang::ElaboratedTypeKeyword, clang::NestedNameSpecifier *, clang::QualType, clang::TagDecl *) const)&clang::ASTContext::getElaboratedType  )
        //.def("getDependentNameType", (clang::QualType (clang::ASTContext::*)(clang::ElaboratedTypeKeyword, clang::NestedNameSpecifier *, const clang::IdentifierInfo *, clang::QualType) const)&clang::ASTContext::getDependentNameType  )
        //.def("getDependentTemplateSpecializationType", (clang::QualType (clang::ASTContext::*)(clang::ElaboratedTypeKeyword, clang::NestedNameSpecifier *, const clang::IdentifierInfo *, const clang::TemplateArgumentListInfo &) const)&clang::ASTContext::getDependentTemplateSpecializationType  )
        //.def("getDependentTemplateSpecializationType", (clang::QualType (clang::ASTContext::*)(clang::ElaboratedTypeKeyword, clang::NestedNameSpecifier *, const clang::IdentifierInfo *, llvm::ArrayRef<clang::TemplateArgument>) const)&clang::ASTContext::getDependentTemplateSpecializationType  )
        //.def("getInjectedTemplateArg", (clang::TemplateArgument (clang::ASTContext::*)(clang::NamedDecl *))&clang::ASTContext::getInjectedTemplateArg  )
        //.def("getInjectedTemplateArgs", (void (clang::ASTContext::*)(const clang::TemplateParameterList *, llvm::SmallVectorImpl<clang::TemplateArgument> &))&clang::ASTContext::getInjectedTemplateArgs  )
        //.def("getPackExpansionType", (clang::QualType (clang::ASTContext::*)(clang::QualType, llvm::Optional<unsigned int>))&clang::ASTContext::getPackExpansionType  )
        //.def("getObjCInterfaceType", (clang::QualType (clang::ASTContext::*)(const clang::ObjCInterfaceDecl *, clang::ObjCInterfaceDecl *) const)&clang::ASTContext::getObjCInterfaceType  )
        //.def("getObjCObjectType", (clang::QualType (clang::ASTContext::*)(clang::QualType, llvm::ArrayRef<clang::QualType>, llvm::ArrayRef<clang::ObjCProtocolDecl *>, bool) const)&clang::ASTContext::getObjCObjectType  )
        //.def("getObjCTypeParamType", (clang::QualType (clang::ASTContext::*)(const clang::ObjCTypeParamDecl *, llvm::ArrayRef<clang::ObjCProtocolDecl *>, clang::QualType) const)&clang::ASTContext::getObjCTypeParamType  )
        //.def("ObjCObjectAdoptsQTypeProtocols", (bool (clang::ASTContext::*)(clang::QualType, clang::ObjCInterfaceDecl *))&clang::ASTContext::ObjCObjectAdoptsQTypeProtocols  )
        //.def("QIdProtocolsAdoptObjCObjectProtocols", (bool (clang::ASTContext::*)(clang::QualType, clang::ObjCInterfaceDecl *))&clang::ASTContext::QIdProtocolsAdoptObjCObjectProtocols  )
        .def("getObjCObjectPointerType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getObjCObjectPointerType  )
        .def("getTypeOfExprType", (clang::QualType (clang::ASTContext::*)(clang::Expr *) const)&clang::ASTContext::getTypeOfExprType  )
        .def("getTypeOfType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getTypeOfType  )
        .def("getDecltypeType", (clang::QualType (clang::ASTContext::*)(clang::Expr *, clang::QualType) const)&clang::ASTContext::getDecltypeType  )
        //.def("getUnaryTransformType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType, clang::UnaryTransformType::UTTKind) const)&clang::ASTContext::getUnaryTransformType  )
        .def("getAutoType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::AutoTypeKeyword, bool) const)&clang::ASTContext::getAutoType  )
        .def("getAutoDeductType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getAutoDeductType  )
        .def("getAutoRRefDeductType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getAutoRRefDeductType  )
        //.def("getDeducedTemplateSpecializationType", (clang::QualType (clang::ASTContext::*)(clang::TemplateName, clang::QualType, bool) const)&clang::ASTContext::getDeducedTemplateSpecializationType  )
        .def("getTagDeclType", (clang::QualType (clang::ASTContext::*)(const clang::TagDecl *) const)&clang::ASTContext::getTagDeclType  )
        //.def("getSizeType", (clang::CanQual<clang::Type> (clang::ASTContext::*)() const)&clang::ASTContext::getSizeType  )
        //.def("getSignedSizeType", (clang::CanQual<clang::Type> (clang::ASTContext::*)() const)&clang::ASTContext::getSignedSizeType  )
        //.def("getIntMaxType", (clang::CanQual<clang::Type> (clang::ASTContext::*)() const)&clang::ASTContext::getIntMaxType  )
        //.def("getUIntMaxType", (clang::CanQual<clang::Type> (clang::ASTContext::*)() const)&clang::ASTContext::getUIntMaxType  )
        .def("getWCharType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getWCharType  )
        .def("getWideCharType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getWideCharType  )
        .def("getSignedWCharType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getSignedWCharType  )
        .def("getUnsignedWCharType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getUnsignedWCharType  )
        .def("getWIntType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getWIntType  )
        .def("getIntPtrType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getIntPtrType  )
        .def("getUIntPtrType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getUIntPtrType  )
        .def("getPointerDiffType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getPointerDiffType  )
        .def("getUnsignedPointerDiffType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getUnsignedPointerDiffType  )
        .def("getProcessIDType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getProcessIDType  )
        .def("getCFConstantStringType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getCFConstantStringType  )
        .def("getObjCSuperType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCSuperType  )
        .def("setObjCSuperType", (void (clang::ASTContext::*)(clang::QualType))&clang::ASTContext::setObjCSuperType  )
        .def("getRawCFConstantStringType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getRawCFConstantStringType  )
        .def("setCFConstantStringType", (void (clang::ASTContext::*)(clang::QualType))&clang::ASTContext::setCFConstantStringType  )
        .def("getCFConstantStringDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getCFConstantStringDecl , py::return_value_policy::reference_internal )
        .def("getCFConstantStringTagDecl", (clang::RecordDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getCFConstantStringTagDecl , py::return_value_policy::reference_internal )
        //.def("setObjCConstantStringInterface", (void (clang::ASTContext::*)(clang::ObjCInterfaceDecl *))&clang::ASTContext::setObjCConstantStringInterface  )
        .def("getObjCConstantStringInterface", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCConstantStringInterface  )
        .def("getObjCNSStringType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCNSStringType  )
        .def("setObjCNSStringType", (void (clang::ASTContext::*)(clang::QualType))&clang::ASTContext::setObjCNSStringType  )
        .def("getObjCIdRedefinitionType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCIdRedefinitionType  )
        .def("setObjCIdRedefinitionType", (void (clang::ASTContext::*)(clang::QualType))&clang::ASTContext::setObjCIdRedefinitionType  )
        .def("getObjCClassRedefinitionType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCClassRedefinitionType  )
        .def("setObjCClassRedefinitionType", (void (clang::ASTContext::*)(clang::QualType))&clang::ASTContext::setObjCClassRedefinitionType  )
        .def("getObjCSelRedefinitionType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCSelRedefinitionType  )
        .def("setObjCSelRedefinitionType", (void (clang::ASTContext::*)(clang::QualType))&clang::ASTContext::setObjCSelRedefinitionType  )
        //.def("getNSObjectName", (clang::IdentifierInfo * (clang::ASTContext::*)() const)&clang::ASTContext::getNSObjectName , py::return_value_policy::reference_internal )
        //.def("getNSCopyingName", (clang::IdentifierInfo * (clang::ASTContext::*)())&clang::ASTContext::getNSCopyingName , py::return_value_policy::reference_internal )
        //.def("getNSUIntegerType", (clang::CanQual<clang::Type> (clang::ASTContext::*)() const)&clang::ASTContext::getNSUIntegerType  )
        //.def("getNSIntegerType", (clang::CanQual<clang::Type> (clang::ASTContext::*)() const)&clang::ASTContext::getNSIntegerType  )
        //.def("getBoolName", (clang::IdentifierInfo * (clang::ASTContext::*)() const)&clang::ASTContext::getBoolName , py::return_value_policy::reference_internal )
        //.def("getMakeIntegerSeqName", (clang::IdentifierInfo * (clang::ASTContext::*)() const)&clang::ASTContext::getMakeIntegerSeqName , py::return_value_policy::reference_internal )
        //.def("getTypePackElementName", (clang::IdentifierInfo * (clang::ASTContext::*)() const)&clang::ASTContext::getTypePackElementName , py::return_value_policy::reference_internal )
        .def("getObjCInstanceType", (clang::QualType (clang::ASTContext::*)())&clang::ASTContext::getObjCInstanceType  )
        .def("getObjCInstanceTypeDecl", (clang::TypedefDecl * (clang::ASTContext::*)())&clang::ASTContext::getObjCInstanceTypeDecl , py::return_value_policy::reference_internal )
        .def("setFILEDecl", (void (clang::ASTContext::*)(clang::TypeDecl *))&clang::ASTContext::setFILEDecl  )
        .def("getFILEType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getFILEType  )
        .def("setjmp_bufDecl", (void (clang::ASTContext::*)(clang::TypeDecl *))&clang::ASTContext::setjmp_bufDecl  )
        .def("getjmp_bufType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getjmp_bufType  )
        .def("setsigjmp_bufDecl", (void (clang::ASTContext::*)(clang::TypeDecl *))&clang::ASTContext::setsigjmp_bufDecl  )
        .def("getsigjmp_bufType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getsigjmp_bufType  )
        .def("setucontext_tDecl", (void (clang::ASTContext::*)(clang::TypeDecl *))&clang::ASTContext::setucontext_tDecl  )
        .def("getucontext_tType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getucontext_tType  )
        .def("getLogicalOperationType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getLogicalOperationType  )
        //.def("getObjCEncodingForType", (void (clang::ASTContext::*)(clang::QualType, std::__cxx11::basic_string<char> &, const clang::FieldDecl *, clang::QualType *) const)&clang::ASTContext::getObjCEncodingForType  )
        //.def("getObjCEncodingForPropertyType", (void (clang::ASTContext::*)(clang::QualType, std::__cxx11::basic_string<char> &) const)&clang::ASTContext::getObjCEncodingForPropertyType  )
        .def("getLegacyIntegralTypeEncoding", (void (clang::ASTContext::*)(clang::QualType &) const)&clang::ASTContext::getLegacyIntegralTypeEncoding  )
        //.def("getObjCEncodingForTypeQualifier", (void (clang::ASTContext::*)(clang::Decl::ObjCDeclQualifier, std::__cxx11::basic_string<char> &) const)&clang::ASTContext::getObjCEncodingForTypeQualifier  )
        //.def("getObjCEncodingForFunctionDecl", (std::__cxx11::basic_string<char> (clang::ASTContext::*)(const clang::FunctionDecl *) const)&clang::ASTContext::getObjCEncodingForFunctionDecl  )
        //.def("getObjCEncodingForMethodDecl", (std::__cxx11::basic_string<char> (clang::ASTContext::*)(const clang::ObjCMethodDecl *, bool) const)&clang::ASTContext::getObjCEncodingForMethodDecl  )
        //.def("getObjCEncodingForBlock", (std::__cxx11::basic_string<char> (clang::ASTContext::*)(const clang::BlockExpr *) const)&clang::ASTContext::getObjCEncodingForBlock  )
        //.def("getObjCEncodingForPropertyDecl", (std::__cxx11::basic_string<char> (clang::ASTContext::*)(const clang::ObjCPropertyDecl *, const clang::Decl *) const)&clang::ASTContext::getObjCEncodingForPropertyDecl  )
        //.def("ProtocolCompatibleWithProtocol", (bool (clang::ASTContext::*)(clang::ObjCProtocolDecl *, clang::ObjCProtocolDecl *) const)&clang::ASTContext::ProtocolCompatibleWithProtocol  )
        //.def("getObjCPropertyImplDeclForPropertyDecl", (clang::ObjCPropertyImplDecl * (clang::ASTContext::*)(const clang::ObjCPropertyDecl *, const clang::Decl *) const)&clang::ASTContext::getObjCPropertyImplDeclForPropertyDecl , py::return_value_policy::reference_internal )
        //.def("getObjCEncodingTypeSize", (clang::CharUnits (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getObjCEncodingTypeSize  )
        .def("getObjCIdDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getObjCIdDecl , py::return_value_policy::reference_internal )
        .def("getObjCIdType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCIdType  )
        .def("getObjCSelDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getObjCSelDecl , py::return_value_policy::reference_internal )
        .def("getObjCSelType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCSelType  )
        .def("getObjCClassDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getObjCClassDecl , py::return_value_policy::reference_internal )
        .def("getObjCClassType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCClassType  )
        //.def("getObjCProtocolDecl", (clang::ObjCInterfaceDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getObjCProtocolDecl , py::return_value_policy::reference_internal )
        .def("getBOOLDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getBOOLDecl , py::return_value_policy::reference_internal )
        .def("setBOOLDecl", (void (clang::ASTContext::*)(clang::TypedefDecl *))&clang::ASTContext::setBOOLDecl  )
        .def("getBOOLType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getBOOLType  )
        .def("getObjCProtoType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getObjCProtoType  )
        .def("getBuiltinVaListDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getBuiltinVaListDecl , py::return_value_policy::reference_internal )
        .def("getBuiltinVaListType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getBuiltinVaListType  )
        .def("getVaListTagDecl", (clang::Decl * (clang::ASTContext::*)() const)&clang::ASTContext::getVaListTagDecl , py::return_value_policy::reference_internal )
        .def("getBuiltinMSVaListDecl", (clang::TypedefDecl * (clang::ASTContext::*)() const)&clang::ASTContext::getBuiltinMSVaListDecl , py::return_value_policy::reference_internal )
        .def("getBuiltinMSVaListType", (clang::QualType (clang::ASTContext::*)() const)&clang::ASTContext::getBuiltinMSVaListType  )
        .def("canBuiltinBeRedeclared", (bool (clang::ASTContext::*)(const clang::FunctionDecl *) const)&clang::ASTContext::canBuiltinBeRedeclared  )
        .def("getCVRQualifiedType", (clang::QualType (clang::ASTContext::*)(clang::QualType, unsigned int) const)&clang::ASTContext::getCVRQualifiedType  )
        //.def("getQualifiedType", (clang::QualType (clang::ASTContext::*)(clang::SplitQualType) const)&clang::ASTContext::getQualifiedType  )
        .def("getQualifiedType", [](const clang::ASTContext& self, clang::QualType T , clang::Qualifiers Qs) -> clang::QualType {
         return self.getQualifiedType(T, Qs);
        } )
        .def("getQualifiedType", [](const clang::ASTContext& self, const clang::Type * T , clang::Qualifiers Qs) -> clang::QualType {
         return self.getQualifiedType(T, Qs);
        } )
        .def("getLifetimeQualifiedType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Qualifiers::ObjCLifetime))&clang::ASTContext::getLifetimeQualifiedType  )
        .def("getUnqualifiedObjCPointerType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getUnqualifiedObjCPointerType  )
        .def("getFixedPointScale", (unsigned char (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getFixedPointScale  )
        .def("getFixedPointIBits", (unsigned char (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getFixedPointIBits  )
        //.def("getFixedPointSemantics", (clang::FixedPointSemantics (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getFixedPointSemantics  )
        //.def("getFixedPointMax", (clang::APFixedPoint (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getFixedPointMax  )
        //.def("getFixedPointMin", (clang::APFixedPoint (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getFixedPointMin  )
        //.def("getNameForTemplate", (clang::DeclarationNameInfo (clang::ASTContext::*)(clang::TemplateName, clang::SourceLocation) const)&clang::ASTContext::getNameForTemplate  )
        //.def("getOverloadedTemplateName", (clang::TemplateName (clang::ASTContext::*)(clang::UnresolvedSetIterator, clang::UnresolvedSetIterator) const)&clang::ASTContext::getOverloadedTemplateName  )
        //.def("getQualifiedTemplateName", (clang::TemplateName (clang::ASTContext::*)(clang::NestedNameSpecifier *, bool, clang::TemplateDecl *) const)&clang::ASTContext::getQualifiedTemplateName  )
        //.def("getDependentTemplateName", (clang::TemplateName (clang::ASTContext::*)(clang::NestedNameSpecifier *, const clang::IdentifierInfo *) const)&clang::ASTContext::getDependentTemplateName  )
        //.def("getDependentTemplateName", (clang::TemplateName (clang::ASTContext::*)(clang::NestedNameSpecifier *, clang::OverloadedOperatorKind) const)&clang::ASTContext::getDependentTemplateName  )
        //.def("getSubstTemplateTemplateParm", (clang::TemplateName (clang::ASTContext::*)(clang::TemplateTemplateParmDecl *, clang::TemplateName) const)&clang::ASTContext::getSubstTemplateTemplateParm  )
        //.def("getSubstTemplateTemplateParmPack", (clang::TemplateName (clang::ASTContext::*)(clang::TemplateTemplateParmDecl *, const clang::TemplateArgument &) const)&clang::ASTContext::getSubstTemplateTemplateParmPack  )
        .def("GetBuiltinType", (clang::QualType (clang::ASTContext::*)(unsigned int, clang::ASTContext::GetBuiltinTypeError &, unsigned int *) const)&clang::ASTContext::GetBuiltinType  )
        .def("getObjCGCAttrKind", (clang::Qualifiers::GC (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getObjCGCAttrKind  )
        .def("areCompatibleVectorTypes", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::areCompatibleVectorTypes  )
        //.def("getFloatTypeSemantics", (const llvm::fltSemantics & (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getFloatTypeSemantics  )
        //.def("getTypeInfo", (clang::TypeInfo (clang::ASTContext::*)(const clang::Type *) const)&clang::ASTContext::getTypeInfo  )
        //.def("getTypeInfo", (clang::TypeInfo (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getTypeInfo  )
        .def("getOpenMPDefaultSimdAlign", (unsigned int (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getOpenMPDefaultSimdAlign  )
        .def("getTypeSize", [](const clang::ASTContext& self, clang::QualType T) -> unsigned long {
         return self.getTypeSize(T);
        } )
        .def("getTypeSize", [](const clang::ASTContext& self, const clang::Type * T) -> unsigned long {
         return self.getTypeSize(T);
        } )
        .def("getCharWidth", (unsigned long (clang::ASTContext::*)() const)&clang::ASTContext::getCharWidth  )
        //.def("toCharUnitsFromBits", (clang::CharUnits (clang::ASTContext::*)(long) const)&clang::ASTContext::toCharUnitsFromBits  )
        //.def("toBits", (long (clang::ASTContext::*)(clang::CharUnits) const)&clang::ASTContext::toBits  )
        //.def("getTypeSizeInChars", (clang::CharUnits (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getTypeSizeInChars  )
        //.def("getTypeSizeInChars", (clang::CharUnits (clang::ASTContext::*)(const clang::Type *) const)&clang::ASTContext::getTypeSizeInChars  )
        .def("getTypeAlign", [](const clang::ASTContext& self, clang::QualType T) -> unsigned int {
         return self.getTypeAlign(T);
        } )
        .def("getTypeAlign", [](const clang::ASTContext& self, const clang::Type * T) -> unsigned int {
         return self.getTypeAlign(T);
        } )
        .def("getTypeUnadjustedAlign", [](const clang::ASTContext& self, clang::QualType T) -> unsigned int {
         return self.getTypeUnadjustedAlign(T);
        } )
        .def("getTypeUnadjustedAlign", [](const clang::ASTContext& self, const clang::Type * T) -> unsigned int {
         return self.getTypeUnadjustedAlign(T);
        } )
        .def("getTypeAlignIfKnown", (unsigned int (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getTypeAlignIfKnown  )
        //.def("getTypeAlignInChars", (clang::CharUnits (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getTypeAlignInChars  )
        //.def("getTypeAlignInChars", (clang::CharUnits (clang::ASTContext::*)(const clang::Type *) const)&clang::ASTContext::getTypeAlignInChars  )
        //.def("getTypeUnadjustedAlignInChars", (clang::CharUnits (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getTypeUnadjustedAlignInChars  )
        //.def("getTypeUnadjustedAlignInChars", (clang::CharUnits (clang::ASTContext::*)(const clang::Type *) const)&clang::ASTContext::getTypeUnadjustedAlignInChars  )
        //.def("getTypeInfoDataSizeInChars", (std::pair<clang::CharUnits, clang::CharUnits> (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getTypeInfoDataSizeInChars  )
        //.def("getTypeInfoInChars", (std::pair<clang::CharUnits, clang::CharUnits> (clang::ASTContext::*)(const clang::Type *) const)&clang::ASTContext::getTypeInfoInChars  )
        //.def("getTypeInfoInChars", (std::pair<clang::CharUnits, clang::CharUnits> (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getTypeInfoInChars  )
        .def("isAlignmentRequired", [](const clang::ASTContext& self, const clang::Type * T) -> bool {
         return self.isAlignmentRequired(T);
        } )
        .def("isAlignmentRequired", [](const clang::ASTContext& self, clang::QualType T) -> bool {
         return self.isAlignmentRequired(T);
        } )
        .def("getPreferredTypeAlign", (unsigned int (clang::ASTContext::*)(const clang::Type *) const)&clang::ASTContext::getPreferredTypeAlign  )
        .def("getTargetDefaultAlignForAttributeAligned", (unsigned int (clang::ASTContext::*)() const)&clang::ASTContext::getTargetDefaultAlignForAttributeAligned  )
        .def("getAlignOfGlobalVar", (unsigned int (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAlignOfGlobalVar  )
        //.def("getAlignOfGlobalVarInChars", (clang::CharUnits (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAlignOfGlobalVarInChars  )
        //.def("getDeclAlign", (clang::CharUnits (clang::ASTContext::*)(const clang::Decl *, bool) const)&clang::ASTContext::getDeclAlign  )
        //.def("getASTRecordLayout", (const clang::ASTRecordLayout & (clang::ASTContext::*)(const clang::RecordDecl *) const)&clang::ASTContext::getASTRecordLayout  )
        //.def("getASTObjCInterfaceLayout", (const clang::ASTRecordLayout & (clang::ASTContext::*)(const clang::ObjCInterfaceDecl *) const)&clang::ASTContext::getASTObjCInterfaceLayout  )
        //.def("DumpRecordLayout", (void (clang::ASTContext::*)(const clang::RecordDecl *, llvm::raw_ostream &, bool) const)&clang::ASTContext::DumpRecordLayout  )
        //.def("getASTObjCImplementationLayout", (const clang::ASTRecordLayout & (clang::ASTContext::*)(const clang::ObjCImplementationDecl *) const)&clang::ASTContext::getASTObjCImplementationLayout  )
        .def("getCurrentKeyFunction", (const clang::CXXMethodDecl * (clang::ASTContext::*)(const clang::CXXRecordDecl *))&clang::ASTContext::getCurrentKeyFunction , py::return_value_policy::reference_internal )
        .def("setNonKeyFunction", (void (clang::ASTContext::*)(const clang::CXXMethodDecl *))&clang::ASTContext::setNonKeyFunction  )
        //.def("getOffsetOfBaseWithVBPtr", (clang::CharUnits (clang::ASTContext::*)(const clang::CXXRecordDecl *) const)&clang::ASTContext::getOffsetOfBaseWithVBPtr  )
        .def("getFieldOffset", (unsigned long (clang::ASTContext::*)(const clang::ValueDecl *) const)&clang::ASTContext::getFieldOffset  )
        //.def("lookupFieldBitOffset", (unsigned long (clang::ASTContext::*)(const clang::ObjCInterfaceDecl *, const clang::ObjCImplementationDecl *, const clang::ObjCIvarDecl *) const)&clang::ASTContext::lookupFieldBitOffset  )
        .def("isNearlyEmpty", (bool (clang::ASTContext::*)(const clang::CXXRecordDecl *) const)&clang::ASTContext::isNearlyEmpty  )
        //.def("getVTableContext", (clang::VTableContextBase * (clang::ASTContext::*)())&clang::ASTContext::getVTableContext , py::return_value_policy::reference_internal )
        //.def("createMangleContext", (clang::MangleContext * (clang::ASTContext::*)())&clang::ASTContext::createMangleContext , py::return_value_policy::reference_internal )
        //.def("DeepCollectObjCIvars", (void (clang::ASTContext::*)(const clang::ObjCInterfaceDecl *, bool, llvm::SmallVectorImpl<const clang::ObjCIvarDecl *> &) const)&clang::ASTContext::DeepCollectObjCIvars  )
        //.def("CountNonClassIvars", (unsigned int (clang::ASTContext::*)(const clang::ObjCInterfaceDecl *) const)&clang::ASTContext::CountNonClassIvars  )
        //.def("CollectInheritedProtocols", (void (clang::ASTContext::*)(const clang::Decl *, llvm::SmallPtrSet<clang::ObjCProtocolDecl *, 8> &))&clang::ASTContext::CollectInheritedProtocols  )
        .def("hasUniqueObjectRepresentations", (bool (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::hasUniqueObjectRepresentations  )
        //.def("getCanonicalType", (clang::CanQual<clang::Type> (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getCanonicalType  )
        .def("getCanonicalType", [](const clang::ASTContext& self, const clang::Type * T) -> const clang::Type * {
         return self.getCanonicalType(T);
        } , py::return_value_policy::reference_internal)
        //.def("getCanonicalParamType", (clang::CanQual<clang::Type> (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getCanonicalParamType  )
        .def("hasSameType", [](const clang::ASTContext& self, clang::QualType T1 , clang::QualType T2) -> bool {
         return self.hasSameType(T1, T2);
        } )
        .def("hasSameType", [](const clang::ASTContext& self, const clang::Type * T1 , const clang::Type * T2) -> bool {
         return self.hasSameType(T1, T2);
        } )
        .def("getUnqualifiedArrayType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::Qualifiers &))&clang::ASTContext::getUnqualifiedArrayType  )
        .def("hasSameUnqualifiedType", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType) const)&clang::ASTContext::hasSameUnqualifiedType  )
        .def("hasSameNullabilityTypeQualifier", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType, bool) const)&clang::ASTContext::hasSameNullabilityTypeQualifier  )
        //.def("ObjCMethodsAreEqual", (bool (clang::ASTContext::*)(const clang::ObjCMethodDecl *, const clang::ObjCMethodDecl *))&clang::ASTContext::ObjCMethodsAreEqual  )
        .def("UnwrapSimilarTypes", (bool (clang::ASTContext::*)(clang::QualType &, clang::QualType &))&clang::ASTContext::UnwrapSimilarTypes  )
        .def("UnwrapSimilarArrayTypes", (bool (clang::ASTContext::*)(clang::QualType &, clang::QualType &))&clang::ASTContext::UnwrapSimilarArrayTypes  )
        .def("hasSimilarType", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::hasSimilarType  )
        .def("hasCvrSimilarType", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::hasCvrSimilarType  )
        //.def("getCanonicalNestedNameSpecifier", (clang::NestedNameSpecifier * (clang::ASTContext::*)(clang::NestedNameSpecifier *) const)&clang::ASTContext::getCanonicalNestedNameSpecifier , py::return_value_policy::reference_internal )
        .def("getDefaultCallingConvention", (clang::CallingConv (clang::ASTContext::*)(bool, bool) const)&clang::ASTContext::getDefaultCallingConvention  )
        //.def("getCanonicalTemplateName", (clang::TemplateName (clang::ASTContext::*)(clang::TemplateName) const)&clang::ASTContext::getCanonicalTemplateName  )
        //.def("hasSameTemplateName", (bool (clang::ASTContext::*)(clang::TemplateName, clang::TemplateName))&clang::ASTContext::hasSameTemplateName  )
        //.def("getCanonicalTemplateArgument", (clang::TemplateArgument (clang::ASTContext::*)(const clang::TemplateArgument &) const)&clang::ASTContext::getCanonicalTemplateArgument  )
        //.def("getAsArrayType", (const clang::ArrayType * (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAsArrayType , py::return_value_policy::reference_internal )
        //.def("getAsConstantArrayType", (const clang::ConstantArrayType * (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAsConstantArrayType , py::return_value_policy::reference_internal )
        //.def("getAsVariableArrayType", (const clang::VariableArrayType * (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAsVariableArrayType , py::return_value_policy::reference_internal )
        //.def("getAsIncompleteArrayType", (const clang::IncompleteArrayType * (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAsIncompleteArrayType , py::return_value_policy::reference_internal )
        //.def("getAsDependentSizedArrayType", (const clang::DependentSizedArrayType * (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAsDependentSizedArrayType , py::return_value_policy::reference_internal )
        //.def("getBaseElementType", (clang::QualType (clang::ASTContext::*)(const clang::ArrayType *) const)&clang::ASTContext::getBaseElementType  )
        .def("getBaseElementType", [](const clang::ASTContext& self, clang::QualType QT) -> clang::QualType {
         return self.getBaseElementType(QT);
        } )
        //.def("getConstantArrayElementCount", (unsigned long (clang::ASTContext::*)(const clang::ConstantArrayType *) const)&clang::ASTContext::getConstantArrayElementCount  )
        .def("getAdjustedParameterType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getAdjustedParameterType  )
        .def("getSignatureParameterType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getSignatureParameterType  )
        .def("getExceptionObjectType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getExceptionObjectType  )
        .def("getArrayDecayedType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getArrayDecayedType  )
        .def("getPromotedIntegerType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getPromotedIntegerType  )
        .def("getInnerObjCOwnership", (clang::Qualifiers::ObjCLifetime (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getInnerObjCOwnership  )
        .def("isPromotableBitField", (clang::QualType (clang::ASTContext::*)(clang::Expr *) const)&clang::ASTContext::isPromotableBitField  )
        .def("getIntegerTypeOrder", (int (clang::ASTContext::*)(clang::QualType, clang::QualType) const)&clang::ASTContext::getIntegerTypeOrder  )
        .def("getFloatingTypeOrder", (int (clang::ASTContext::*)(clang::QualType, clang::QualType) const)&clang::ASTContext::getFloatingTypeOrder  )
        .def("getFloatingTypeOfSizeWithinDomain", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType) const)&clang::ASTContext::getFloatingTypeOfSizeWithinDomain  )
        .def("getTargetAddressSpace", [](const clang::ASTContext& self, clang::QualType T) -> unsigned int {
         return self.getTargetAddressSpace(T);
        } )
        .def("getTargetAddressSpace", [](const clang::ASTContext& self, clang::Qualifiers Q) -> unsigned int {
         return self.getTargetAddressSpace(Q);
        } )
        .def("getTargetAddressSpace", [](const clang::ASTContext& self, clang::LangAS AS) -> unsigned int {
         return self.getTargetAddressSpace(AS);
        } )
        .def("getLangASForBuiltinAddressSpace", (clang::LangAS (clang::ASTContext::*)(unsigned int) const)&clang::ASTContext::getLangASForBuiltinAddressSpace  )
        .def("getTargetNullPointerValue", (unsigned long (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getTargetNullPointerValue  )
        .def("addressSpaceMapManglingFor", (bool (clang::ASTContext::*)(clang::LangAS) const)&clang::ASTContext::addressSpaceMapManglingFor  )
        .def("typesAreCompatible", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType, bool))&clang::ASTContext::typesAreCompatible  )
        .def("propertyTypesAreCompatible", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::propertyTypesAreCompatible  )
        .def("typesAreBlockPointerCompatible", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::typesAreBlockPointerCompatible  )
        .def("isObjCIdType", (bool (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::isObjCIdType  )
        .def("isObjCClassType", (bool (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::isObjCClassType  )
        .def("isObjCSelType", (bool (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::isObjCSelType  )
        .def("ObjCQualifiedIdTypesAreCompatible", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType, bool))&clang::ASTContext::ObjCQualifiedIdTypesAreCompatible  )
        .def("ObjCQualifiedClassTypesAreCompatible", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::ObjCQualifiedClassTypesAreCompatible  )
        //.def("canAssignObjCInterfaces", (bool (clang::ASTContext::*)(const clang::ObjCObjectPointerType *, const clang::ObjCObjectPointerType *))&clang::ASTContext::canAssignObjCInterfaces  )
        //.def("canAssignObjCInterfaces", (bool (clang::ASTContext::*)(const clang::ObjCObjectType *, const clang::ObjCObjectType *))&clang::ASTContext::canAssignObjCInterfaces  )
        //.def("canAssignObjCInterfacesInBlockPointer", (bool (clang::ASTContext::*)(const clang::ObjCObjectPointerType *, const clang::ObjCObjectPointerType *, bool))&clang::ASTContext::canAssignObjCInterfacesInBlockPointer  )
        .def("areComparableObjCPointerTypes", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::areComparableObjCPointerTypes  )
        //.def("areCommonBaseCompatible", (clang::QualType (clang::ASTContext::*)(const clang::ObjCObjectPointerType *, const clang::ObjCObjectPointerType *))&clang::ASTContext::areCommonBaseCompatible  )
        .def("canBindObjCObjectType", (bool (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::canBindObjCObjectType  )
        .def("mergeTypes", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType, bool, bool, bool))&clang::ASTContext::mergeTypes  )
        .def("mergeFunctionTypes", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType, bool, bool))&clang::ASTContext::mergeFunctionTypes  )
        .def("mergeFunctionParameterTypes", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType, bool, bool))&clang::ASTContext::mergeFunctionParameterTypes  )
        .def("mergeTransparentUnionType", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType, bool, bool))&clang::ASTContext::mergeTransparentUnionType  )
        .def("mergeObjCGCQualifiers", (clang::QualType (clang::ASTContext::*)(clang::QualType, clang::QualType))&clang::ASTContext::mergeObjCGCQualifiers  )
        //.def("mergeExtParameterInfo", (bool (clang::ASTContext::*)(const clang::FunctionProtoType *, const clang::FunctionProtoType *, bool &, bool &, llvm::SmallVectorImpl<clang::FunctionType::ExtParameterInfo> &))&clang::ASTContext::mergeExtParameterInfo  )
        //.def("ResetObjCLayout", (void (clang::ASTContext::*)(const clang::ObjCContainerDecl *))&clang::ASTContext::ResetObjCLayout  )
        .def("getIntWidth", (unsigned int (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getIntWidth  )
        .def("getCorrespondingUnsignedType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getCorrespondingUnsignedType  )
        .def("getCorrespondingSaturatedType", (clang::QualType (clang::ASTContext::*)(clang::QualType) const)&clang::ASTContext::getCorrespondingSaturatedType  )
        //.def("MakeIntValue", (llvm::APSInt (clang::ASTContext::*)(unsigned long, clang::QualType) const)&clang::ASTContext::MakeIntValue  )
        .def("isSentinelNullExpr", (bool (clang::ASTContext::*)(const clang::Expr *))&clang::ASTContext::isSentinelNullExpr  )
        //.def("getObjCImplementation", (clang::ObjCImplementationDecl * (clang::ASTContext::*)(clang::ObjCInterfaceDecl *))&clang::ASTContext::getObjCImplementation , py::return_value_policy::reference_internal )
        //.def("getObjCImplementation", (clang::ObjCCategoryImplDecl * (clang::ASTContext::*)(clang::ObjCCategoryDecl *))&clang::ASTContext::getObjCImplementation , py::return_value_policy::reference_internal )
        .def("AnyObjCImplementation", (bool (clang::ASTContext::*)())&clang::ASTContext::AnyObjCImplementation  )
        //.def("setObjCImplementation", (void (clang::ASTContext::*)(clang::ObjCInterfaceDecl *, clang::ObjCImplementationDecl *))&clang::ASTContext::setObjCImplementation  )
        //.def("setObjCImplementation", (void (clang::ASTContext::*)(clang::ObjCCategoryDecl *, clang::ObjCCategoryImplDecl *))&clang::ASTContext::setObjCImplementation  )
        //.def("getObjCMethodRedeclaration", (const clang::ObjCMethodDecl * (clang::ASTContext::*)(const clang::ObjCMethodDecl *) const)&clang::ASTContext::getObjCMethodRedeclaration , py::return_value_policy::reference_internal )
        //.def("setObjCMethodRedeclaration", (void (clang::ASTContext::*)(const clang::ObjCMethodDecl *, const clang::ObjCMethodDecl *))&clang::ASTContext::setObjCMethodRedeclaration  )
        //.def("getObjContainingInterface", (const clang::ObjCInterfaceDecl * (clang::ASTContext::*)(const clang::NamedDecl *) const)&clang::ASTContext::getObjContainingInterface , py::return_value_policy::reference_internal )
        .def("setBlockVarCopyInit", (void (clang::ASTContext::*)(const clang::VarDecl *, clang::Expr *, bool))&clang::ASTContext::setBlockVarCopyInit  )
        //.def("getBlockVarCopyInit", (clang::ASTContext::BlockVarCopyInit (clang::ASTContext::*)(const clang::VarDecl *) const)&clang::ASTContext::getBlockVarCopyInit  )
        .def("CreateTypeSourceInfo", (clang::TypeSourceInfo * (clang::ASTContext::*)(clang::QualType, unsigned int) const)&clang::ASTContext::CreateTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("getTrivialTypeSourceInfo", (clang::TypeSourceInfo * (clang::ASTContext::*)(clang::QualType, clang::SourceLocation) const)&clang::ASTContext::getTrivialTypeSourceInfo , py::return_value_policy::reference_internal )
        //.def("AddDeallocation", (void (clang::ASTContext::*)(void (*)(void *), void *))&clang::ASTContext::AddDeallocation  )
        .def("GetGVALinkageForFunction", (clang::GVALinkage (clang::ASTContext::*)(const clang::FunctionDecl *) const)&clang::ASTContext::GetGVALinkageForFunction  )
        .def("GetGVALinkageForVariable", (clang::GVALinkage (clang::ASTContext::*)(const clang::VarDecl *))&clang::ASTContext::GetGVALinkageForVariable  )
        .def("DeclMustBeEmitted", (bool (clang::ASTContext::*)(const clang::Decl *))&clang::ASTContext::DeclMustBeEmitted  )
        //.def("forEachMultiversionedFunctionVersion", (void (clang::ASTContext::*)(const clang::FunctionDecl *, llvm::function_ref<void (clang::FunctionDecl *)>) const)&clang::ASTContext::forEachMultiversionedFunctionVersion  )
        .def("getCopyConstructorForExceptionObject", (const clang::CXXConstructorDecl * (clang::ASTContext::*)(clang::CXXRecordDecl *))&clang::ASTContext::getCopyConstructorForExceptionObject , py::return_value_policy::reference_internal )
        .def("addCopyConstructorForExceptionObject", (void (clang::ASTContext::*)(clang::CXXRecordDecl *, clang::CXXConstructorDecl *))&clang::ASTContext::addCopyConstructorForExceptionObject  )
        .def("addTypedefNameForUnnamedTagDecl", (void (clang::ASTContext::*)(clang::TagDecl *, clang::TypedefNameDecl *))&clang::ASTContext::addTypedefNameForUnnamedTagDecl  )
        .def("getTypedefNameForUnnamedTagDecl", (clang::TypedefNameDecl * (clang::ASTContext::*)(const clang::TagDecl *))&clang::ASTContext::getTypedefNameForUnnamedTagDecl , py::return_value_policy::reference_internal )
        .def("addDeclaratorForUnnamedTagDecl", (void (clang::ASTContext::*)(clang::TagDecl *, clang::DeclaratorDecl *))&clang::ASTContext::addDeclaratorForUnnamedTagDecl  )
        .def("getDeclaratorForUnnamedTagDecl", (clang::DeclaratorDecl * (clang::ASTContext::*)(const clang::TagDecl *))&clang::ASTContext::getDeclaratorForUnnamedTagDecl , py::return_value_policy::reference_internal )
        .def("setManglingNumber", (void (clang::ASTContext::*)(const clang::NamedDecl *, unsigned int))&clang::ASTContext::setManglingNumber  )
        .def("getManglingNumber", (unsigned int (clang::ASTContext::*)(const clang::NamedDecl *) const)&clang::ASTContext::getManglingNumber  )
        .def("setStaticLocalNumber", (void (clang::ASTContext::*)(const clang::VarDecl *, unsigned int))&clang::ASTContext::setStaticLocalNumber  )
        .def("getStaticLocalNumber", (unsigned int (clang::ASTContext::*)(const clang::VarDecl *) const)&clang::ASTContext::getStaticLocalNumber  )
        //.def("getManglingNumberContext", (clang::MangleNumberingContext & (clang::ASTContext::*)(const clang::DeclContext *))&clang::ASTContext::getManglingNumberContext  )
        //.def("createMangleNumberingContext", (std::unique_ptr<clang::MangleNumberingContext, std::default_delete<clang::MangleNumberingContext> > (clang::ASTContext::*)() const)&clang::ASTContext::createMangleNumberingContext  )
        .def("setParameterIndex", (void (clang::ASTContext::*)(const clang::ParmVarDecl *, unsigned int))&clang::ASTContext::setParameterIndex  )
        .def("getParameterIndex", (unsigned int (clang::ASTContext::*)(const clang::ParmVarDecl *) const)&clang::ASTContext::getParameterIndex  )
        //.def("getMaterializedTemporaryValue", (clang::APValue * (clang::ASTContext::*)(const clang::MaterializeTemporaryExpr *, bool))&clang::ASTContext::getMaterializedTemporaryValue , py::return_value_policy::reference_internal )
        //.def("InitBuiltinTypes", (void (clang::ASTContext::*)(const clang::TargetInfo &, const clang::TargetInfo *))&clang::ASTContext::InitBuiltinTypes  )
        //.def("getObjCEncodingForMethodParameter", (void (clang::ASTContext::*)(clang::Decl::ObjCDeclQualifier, clang::QualType, std::__cxx11::basic_string<char> &, bool) const)&clang::ASTContext::getObjCEncodingForMethodParameter  )
        .def("isMSStaticDataMemberInlineDefinition", (bool (clang::ASTContext::*)(const clang::VarDecl *) const)&clang::ASTContext::isMSStaticDataMemberInlineDefinition  )
        .def("getInlineVariableDefinitionKind", (clang::ASTContext::InlineVariableDefinitionKind (clang::ASTContext::*)(const clang::VarDecl *) const)&clang::ASTContext::getInlineVariableDefinitionKind  )
    ;

    py::class_<clang::AccessSpecDecl, decl_deleter<clang::AccessSpecDecl>::type>(m, "AccessSpecDecl" , py::base<clang::Decl>())

        .def("getAccessSpecifierLoc", (clang::SourceLocation (clang::AccessSpecDecl::*)() const)&clang::AccessSpecDecl::getAccessSpecifierLoc  )
        .def("setAccessSpecifierLoc", (void (clang::AccessSpecDecl::*)(clang::SourceLocation))&clang::AccessSpecDecl::setAccessSpecifierLoc  )
        .def("getColonLoc", (clang::SourceLocation (clang::AccessSpecDecl::*)() const)&clang::AccessSpecDecl::getColonLoc  )
        .def("setColonLoc", (void (clang::AccessSpecDecl::*)(clang::SourceLocation))&clang::AccessSpecDecl::setColonLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::AccessSpecDecl::*)() const)&clang::AccessSpecDecl::getSourceRange  )
    ;

    py::class_<clang::CXXRecordDecl, decl_deleter<clang::CXXRecordDecl>::type>(m, "CXXRecordDecl" , py::base<clang::RecordDecl>())

        .def("getCanonicalDecl", []( clang::CXXRecordDecl& self) -> clang::CXXRecordDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::CXXRecordDecl& self) -> const clang::CXXRecordDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", []( clang::CXXRecordDecl& self) -> clang::CXXRecordDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::CXXRecordDecl& self) -> const clang::CXXRecordDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::CXXRecordDecl& self) -> clang::CXXRecordDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::CXXRecordDecl& self) -> const clang::CXXRecordDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentNonInjectedDecl", []( clang::CXXRecordDecl& self) -> clang::CXXRecordDecl * {
         return self.getMostRecentNonInjectedDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentNonInjectedDecl", [](const clang::CXXRecordDecl& self) -> const clang::CXXRecordDecl * {
         return self.getMostRecentNonInjectedDecl();
        } , py::return_value_policy::reference_internal)
        .def("getDefinition", (clang::CXXRecordDecl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getDefinition , py::return_value_policy::reference_internal )
        .def("hasDefinition", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasDefinition  )
        .def("isDynamicClass", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isDynamicClass  )
        .def("mayBeDynamicClass", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::mayBeDynamicClass  )
        .def("mayBeNonDynamicClass", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::mayBeNonDynamicClass  )
        .def("setIsParsingBaseSpecifiers", (void (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::setIsParsingBaseSpecifiers  )
        .def("isParsingBaseSpecifiers", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isParsingBaseSpecifiers  )
        .def("getODRHash", (unsigned int (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getODRHash  )
        .def("getNumBases", (unsigned int (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getNumBases  )
        //.def("bases", (llvm::iterator_range<clang::CXXBaseSpecifier *> (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::bases  )
        //.def("bases", (llvm::iterator_range<const clang::CXXBaseSpecifier *> (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::bases  )
        .def("getNumVBases", (unsigned int (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getNumVBases  )
        //.def("vbases", (llvm::iterator_range<clang::CXXBaseSpecifier *> (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::vbases  )
        //.def("vbases", (llvm::iterator_range<const clang::CXXBaseSpecifier *> (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::vbases  )
        .def("hasAnyDependentBases", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasAnyDependentBases  )
        //.def("methods", (llvm::iterator_range<clang::DeclContext::specific_decl_iterator<clang::CXXMethodDecl> > (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::methods  )
        //.def("ctors", (llvm::iterator_range<clang::DeclContext::specific_decl_iterator<clang::CXXConstructorDecl> > (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::ctors  )
        //.def("friends", (llvm::iterator_range<clang::CXXRecordDecl::friend_iterator> (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::friends  )
        .def("pushFriendDecl", (void (clang::CXXRecordDecl::*)(clang::FriendDecl *))&clang::CXXRecordDecl::pushFriendDecl  )
        .def("hasFriends", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasFriends  )
        .def("defaultedCopyConstructorIsDeleted", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::defaultedCopyConstructorIsDeleted  )
        .def("defaultedMoveConstructorIsDeleted", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::defaultedMoveConstructorIsDeleted  )
        .def("defaultedDestructorIsDeleted", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::defaultedDestructorIsDeleted  )
        .def("hasSimpleCopyConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasSimpleCopyConstructor  )
        .def("hasSimpleMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasSimpleMoveConstructor  )
        .def("hasSimpleMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasSimpleMoveAssignment  )
        .def("hasSimpleDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasSimpleDestructor  )
        .def("hasDefaultConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasDefaultConstructor  )
        .def("needsImplicitDefaultConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsImplicitDefaultConstructor  )
        .def("hasUserDeclaredConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredConstructor  )
        .def("hasUserProvidedDefaultConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserProvidedDefaultConstructor  )
        .def("hasUserDeclaredCopyConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredCopyConstructor  )
        .def("needsImplicitCopyConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsImplicitCopyConstructor  )
        .def("needsOverloadResolutionForCopyConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsOverloadResolutionForCopyConstructor  )
        .def("implicitCopyConstructorHasConstParam", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::implicitCopyConstructorHasConstParam  )
        .def("hasCopyConstructorWithConstParam", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasCopyConstructorWithConstParam  )
        .def("hasUserDeclaredMoveOperation", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredMoveOperation  )
        .def("hasUserDeclaredMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredMoveConstructor  )
        .def("hasMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasMoveConstructor  )
        .def("setImplicitCopyConstructorIsDeleted", (void (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::setImplicitCopyConstructorIsDeleted  )
        .def("setImplicitMoveConstructorIsDeleted", (void (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::setImplicitMoveConstructorIsDeleted  )
        .def("setImplicitDestructorIsDeleted", (void (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::setImplicitDestructorIsDeleted  )
        .def("needsImplicitMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsImplicitMoveConstructor  )
        .def("needsOverloadResolutionForMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsOverloadResolutionForMoveConstructor  )
        .def("hasUserDeclaredCopyAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredCopyAssignment  )
        .def("needsImplicitCopyAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsImplicitCopyAssignment  )
        .def("needsOverloadResolutionForCopyAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsOverloadResolutionForCopyAssignment  )
        .def("implicitCopyAssignmentHasConstParam", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::implicitCopyAssignmentHasConstParam  )
        .def("hasCopyAssignmentWithConstParam", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasCopyAssignmentWithConstParam  )
        .def("hasUserDeclaredMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredMoveAssignment  )
        .def("hasMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasMoveAssignment  )
        .def("setImplicitMoveAssignmentIsDeleted", (void (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::setImplicitMoveAssignmentIsDeleted  )
        .def("needsImplicitMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsImplicitMoveAssignment  )
        .def("needsOverloadResolutionForMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsOverloadResolutionForMoveAssignment  )
        .def("hasUserDeclaredDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUserDeclaredDestructor  )
        .def("needsImplicitDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsImplicitDestructor  )
        .def("needsOverloadResolutionForDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::needsOverloadResolutionForDestructor  )
        .def("isLambda", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isLambda  )
        .def("isGenericLambda", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isGenericLambda  )
        .def("lambdaIsDefaultConstructibleAndAssignable", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::lambdaIsDefaultConstructibleAndAssignable  )
        .def("getLambdaCallOperator", (clang::CXXMethodDecl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getLambdaCallOperator , py::return_value_policy::reference_internal )
        .def("getLambdaStaticInvoker", (clang::CXXMethodDecl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getLambdaStaticInvoker , py::return_value_policy::reference_internal )
        //.def("getGenericLambdaTemplateParameterList", (clang::TemplateParameterList * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getGenericLambdaTemplateParameterList , py::return_value_policy::reference_internal )
        .def("getLambdaCaptureDefault", (clang::LambdaCaptureDefault (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getLambdaCaptureDefault  )
        //.def("captures", (llvm::iterator_range<const clang::LambdaCapture *> (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::captures  )
        .def("removeConversion", (void (clang::CXXRecordDecl::*)(const clang::NamedDecl *))&clang::CXXRecordDecl::removeConversion  )
        //.def("getVisibleConversionFunctions", (llvm::iterator_range<clang::UnresolvedSetIterator> (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::getVisibleConversionFunctions  )
        .def("isAggregate", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isAggregate  )
        .def("hasInClassInitializer", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasInClassInitializer  )
        .def("hasUninitializedReferenceMember", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasUninitializedReferenceMember  )
        .def("isPOD", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isPOD  )
        .def("isCLike", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isCLike  )
        .def("isEmpty", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isEmpty  )
        .def("hasDirectFields", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasDirectFields  )
        .def("isPolymorphic", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isPolymorphic  )
        .def("isAbstract", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isAbstract  )
        .def("isStandardLayout", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isStandardLayout  )
        .def("isCXX11StandardLayout", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isCXX11StandardLayout  )
        .def("hasMutableFields", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasMutableFields  )
        .def("hasVariantMembers", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasVariantMembers  )
        .def("hasTrivialDefaultConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialDefaultConstructor  )
        .def("hasNonTrivialDefaultConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialDefaultConstructor  )
        .def("hasConstexprNonCopyMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasConstexprNonCopyMoveConstructor  )
        .def("defaultedDefaultConstructorIsConstexpr", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::defaultedDefaultConstructorIsConstexpr  )
        .def("hasConstexprDefaultConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasConstexprDefaultConstructor  )
        .def("hasTrivialCopyConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialCopyConstructor  )
        .def("hasTrivialCopyConstructorForCall", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialCopyConstructorForCall  )
        .def("hasNonTrivialCopyConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialCopyConstructor  )
        .def("hasNonTrivialCopyConstructorForCall", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialCopyConstructorForCall  )
        .def("hasTrivialMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialMoveConstructor  )
        .def("hasTrivialMoveConstructorForCall", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialMoveConstructorForCall  )
        .def("hasNonTrivialMoveConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialMoveConstructor  )
        .def("hasNonTrivialMoveConstructorForCall", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialMoveConstructorForCall  )
        .def("hasTrivialCopyAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialCopyAssignment  )
        .def("hasNonTrivialCopyAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialCopyAssignment  )
        .def("hasTrivialMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialMoveAssignment  )
        .def("hasNonTrivialMoveAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialMoveAssignment  )
        .def("hasTrivialDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialDestructor  )
        .def("hasTrivialDestructorForCall", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasTrivialDestructorForCall  )
        .def("hasNonTrivialDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialDestructor  )
        .def("hasNonTrivialDestructorForCall", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonTrivialDestructorForCall  )
        .def("setHasTrivialSpecialMemberForCall", (void (clang::CXXRecordDecl::*)())&clang::CXXRecordDecl::setHasTrivialSpecialMemberForCall  )
        .def("allowConstDefaultInit", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::allowConstDefaultInit  )
        .def("hasIrrelevantDestructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasIrrelevantDestructor  )
        .def("hasNonLiteralTypeFieldsOrBases", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasNonLiteralTypeFieldsOrBases  )
        .def("hasInheritedConstructor", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasInheritedConstructor  )
        .def("hasInheritedAssignment", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::hasInheritedAssignment  )
        .def("isTriviallyCopyable", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isTriviallyCopyable  )
        .def("isTrivial", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isTrivial  )
        .def("isLiteral", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isLiteral  )
        .def("getInstantiatedFromMemberClass", (clang::CXXRecordDecl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getInstantiatedFromMemberClass , py::return_value_policy::reference_internal )
        //.def("getMemberSpecializationInfo", (clang::MemberSpecializationInfo * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getMemberSpecializationInfo , py::return_value_policy::reference_internal )
        .def("setInstantiationOfMemberClass", (void (clang::CXXRecordDecl::*)(clang::CXXRecordDecl *, clang::TemplateSpecializationKind))&clang::CXXRecordDecl::setInstantiationOfMemberClass  )
        .def("getDescribedClassTemplate", (clang::ClassTemplateDecl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getDescribedClassTemplate , py::return_value_policy::reference_internal )
        .def("setDescribedClassTemplate", (void (clang::CXXRecordDecl::*)(clang::ClassTemplateDecl *))&clang::CXXRecordDecl::setDescribedClassTemplate  )
        .def("getTemplateSpecializationKind", (clang::TemplateSpecializationKind (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getTemplateSpecializationKind  )
        .def("setTemplateSpecializationKind", (void (clang::CXXRecordDecl::*)(clang::TemplateSpecializationKind))&clang::CXXRecordDecl::setTemplateSpecializationKind  )
        .def("getTemplateInstantiationPattern", [](const clang::CXXRecordDecl& self) -> const clang::CXXRecordDecl * {
         return self.getTemplateInstantiationPattern();
        } , py::return_value_policy::reference_internal)
        .def("getTemplateInstantiationPattern", []( clang::CXXRecordDecl& self) -> clang::CXXRecordDecl * {
         return self.getTemplateInstantiationPattern();
        } , py::return_value_policy::reference_internal)
        .def("getDestructor", (clang::CXXDestructorDecl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getDestructor , py::return_value_policy::reference_internal )
        .def("isAnyDestructorNoReturn", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isAnyDestructorNoReturn  )
        .def("isLocalClass", [](const clang::CXXRecordDecl& self) -> const clang::FunctionDecl * {
         return self.isLocalClass();
        } , py::return_value_policy::reference_internal)
        .def("isLocalClass", []( clang::CXXRecordDecl& self) -> clang::FunctionDecl * {
         return self.isLocalClass();
        } , py::return_value_policy::reference_internal)
        .def("isCurrentInstantiation", (bool (clang::CXXRecordDecl::*)(const clang::DeclContext *) const)&clang::CXXRecordDecl::isCurrentInstantiation  )
        .def("isDerivedFrom", [](const clang::CXXRecordDecl& self, const clang::CXXRecordDecl * Base) -> bool {
         return self.isDerivedFrom(Base);
        } )
        //.def("isDerivedFrom", (bool (clang::CXXRecordDecl::*)(const clang::CXXRecordDecl *, clang::CXXBasePaths &) const)&clang::CXXRecordDecl::isDerivedFrom  )
        .def("isVirtuallyDerivedFrom", (bool (clang::CXXRecordDecl::*)(const clang::CXXRecordDecl *) const)&clang::CXXRecordDecl::isVirtuallyDerivedFrom  )
        .def("isProvablyNotDerivedFrom", (bool (clang::CXXRecordDecl::*)(const clang::CXXRecordDecl *) const)&clang::CXXRecordDecl::isProvablyNotDerivedFrom  )
        //.def("forallBases", (bool (clang::CXXRecordDecl::*)(llvm::function_ref<bool (const clang::CXXRecordDecl *)>, bool) const)&clang::CXXRecordDecl::forallBases  )
        //.def("lookupInBases", (bool (clang::CXXRecordDecl::*)(llvm::function_ref<bool (const clang::CXXBaseSpecifier *, clang::CXXBasePath &)>, clang::CXXBasePaths &, bool) const)&clang::CXXRecordDecl::lookupInBases  )
        //.def("getFinalOverriders", (void (clang::CXXRecordDecl::*)(clang::CXXFinalOverriderMap &) const)&clang::CXXRecordDecl::getFinalOverriders  )
        //.def("getIndirectPrimaryBases", (void (clang::CXXRecordDecl::*)(clang::CXXIndirectPrimaryBaseSet &) const)&clang::CXXRecordDecl::getIndirectPrimaryBases  )
        //.def("lookupDependentName", (std::vector<const clang::NamedDecl *, std::allocator<const clang::NamedDecl *> > (clang::CXXRecordDecl::*)(const clang::DeclarationName &, llvm::function_ref<bool (const clang::NamedDecl *)>))&clang::CXXRecordDecl::lookupDependentName  )
        .def("viewInheritance", (void (clang::CXXRecordDecl::*)(clang::ASTContext &) const)&clang::CXXRecordDecl::viewInheritance  )
        .def("finishedDefaultedOrDeletedMember", (void (clang::CXXRecordDecl::*)(clang::CXXMethodDecl *))&clang::CXXRecordDecl::finishedDefaultedOrDeletedMember  )
        .def("setTrivialForCallFlags", (void (clang::CXXRecordDecl::*)(clang::CXXMethodDecl *))&clang::CXXRecordDecl::setTrivialForCallFlags  )
        .def("completeDefinition", []( clang::CXXRecordDecl& self)  {
          self.completeDefinition();
        } )
        //.def("completeDefinition", (void (clang::CXXRecordDecl::*)(clang::CXXFinalOverriderMap *))&clang::CXXRecordDecl::completeDefinition  )
        .def("mayBeAbstract", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::mayBeAbstract  )
        .def("getLambdaManglingNumber", (unsigned int (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getLambdaManglingNumber  )
        .def("getLambdaContextDecl", (clang::Decl * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getLambdaContextDecl , py::return_value_policy::reference_internal )
        .def("setLambdaMangling", (void (clang::CXXRecordDecl::*)(unsigned int, clang::Decl *))&clang::CXXRecordDecl::setLambdaMangling  )
        //.def("getMSInheritanceModel", (clang::MSInheritanceAttr::Spelling (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getMSInheritanceModel  )
        //.def("calculateInheritanceModel", (clang::MSInheritanceAttr::Spelling (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::calculateInheritanceModel  )
        .def("nullFieldOffsetIsZero", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::nullFieldOffsetIsZero  )
        //.def("getMSVtorDispMode", (clang::MSVtorDispAttr::Mode (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getMSVtorDispMode  )
        .def("isDependentLambda", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isDependentLambda  )
        .def("getLambdaTypeInfo", (clang::TypeSourceInfo * (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::getLambdaTypeInfo , py::return_value_policy::reference_internal )
        .def("isInterfaceLike", (bool (clang::CXXRecordDecl::*)() const)&clang::CXXRecordDecl::isInterfaceLike  )
    ;

    py::class_<clang::CXXDeductionGuideDecl, decl_deleter<clang::CXXDeductionGuideDecl>::type>(m, "CXXDeductionGuideDecl" , py::base<clang::FunctionDecl>())

        .def("isExplicit", (bool (clang::CXXDeductionGuideDecl::*)() const)&clang::CXXDeductionGuideDecl::isExplicit  )
        .def("getDeducedTemplate", (clang::TemplateDecl * (clang::CXXDeductionGuideDecl::*)() const)&clang::CXXDeductionGuideDecl::getDeducedTemplate , py::return_value_policy::reference_internal )
        .def("setIsCopyDeductionCandidate", (void (clang::CXXDeductionGuideDecl::*)(bool))&clang::CXXDeductionGuideDecl::setIsCopyDeductionCandidate  )
        .def("isCopyDeductionCandidate", (bool (clang::CXXDeductionGuideDecl::*)() const)&clang::CXXDeductionGuideDecl::isCopyDeductionCandidate  )
    ;

    py::class_<clang::CXXMethodDecl, decl_deleter<clang::CXXMethodDecl>::type>(m, "CXXMethodDecl" , py::base<clang::FunctionDecl>())

        .def("isStatic", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isStatic  )
        .def("isInstance", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isInstance  )
        .def("isConst", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isConst  )
        .def("isVolatile", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isVolatile  )
        .def("isVirtual", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isVirtual  )
        .def("getDevirtualizedMethod", []( clang::CXXMethodDecl& self, const clang::Expr * Base , bool IsAppleKext) -> clang::CXXMethodDecl * {
         return self.getDevirtualizedMethod(Base, IsAppleKext);
        } , py::return_value_policy::reference_internal)
        .def("getDevirtualizedMethod", [](const clang::CXXMethodDecl& self, const clang::Expr * Base , bool IsAppleKext) -> const clang::CXXMethodDecl * {
         return self.getDevirtualizedMethod(Base, IsAppleKext);
        } , py::return_value_policy::reference_internal)
        //.def("isUsualDeallocationFunction", (bool (clang::CXXMethodDecl::*)(llvm::SmallVectorImpl<const clang::FunctionDecl *> &) const)&clang::CXXMethodDecl::isUsualDeallocationFunction  )
        .def("isCopyAssignmentOperator", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isCopyAssignmentOperator  )
        .def("isMoveAssignmentOperator", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isMoveAssignmentOperator  )
        .def("getCanonicalDecl", []( clang::CXXMethodDecl& self) -> clang::CXXMethodDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::CXXMethodDecl& self) -> const clang::CXXMethodDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::CXXMethodDecl& self) -> clang::CXXMethodDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::CXXMethodDecl& self) -> const clang::CXXMethodDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("isUserProvided", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isUserProvided  )
        .def("addOverriddenMethod", (void (clang::CXXMethodDecl::*)(const clang::CXXMethodDecl *))&clang::CXXMethodDecl::addOverriddenMethod  )
        .def("size_overridden_methods", (unsigned int (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::size_overridden_methods  )
        //.def("overridden_methods", (llvm::iterator_range<const clang::CXXMethodDecl *const *> (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::overridden_methods  )
        .def("getParent", [](const clang::CXXMethodDecl& self) -> const clang::CXXRecordDecl * {
         return self.getParent();
        } , py::return_value_policy::reference_internal)
        .def("getParent", []( clang::CXXMethodDecl& self) -> clang::CXXRecordDecl * {
         return self.getParent();
        } , py::return_value_policy::reference_internal)
        .def("getThisType", [](const clang::CXXMethodDecl& self) -> clang::QualType {
         return self.getThisType();
        } )
        .def("getTypeQualifiers", (clang::Qualifiers (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::getTypeQualifiers  )
        .def("getRefQualifier", (clang::RefQualifierKind (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::getRefQualifier  )
        .def("hasInlineBody", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::hasInlineBody  )
        .def("isLambdaStaticInvoker", (bool (clang::CXXMethodDecl::*)() const)&clang::CXXMethodDecl::isLambdaStaticInvoker  )
        .def("getCorrespondingMethodInClass", []( clang::CXXMethodDecl& self, const clang::CXXRecordDecl * RD , bool MayBeBase) -> clang::CXXMethodDecl * {
         return self.getCorrespondingMethodInClass(RD, MayBeBase);
        } , py::return_value_policy::reference_internal)
        .def("getCorrespondingMethodInClass", [](const clang::CXXMethodDecl& self, const clang::CXXRecordDecl * RD , bool MayBeBase) -> const clang::CXXMethodDecl * {
         return self.getCorrespondingMethodInClass(RD, MayBeBase);
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::CXXConstructorDecl, decl_deleter<clang::CXXConstructorDecl>::type>(m, "CXXConstructorDecl" , py::base<clang::CXXMethodDecl>())

        //.def("inits", (llvm::iterator_range<clang::CXXCtorInitializer **> (clang::CXXConstructorDecl::*)())&clang::CXXConstructorDecl::inits  )
        //.def("inits", (llvm::iterator_range<clang::CXXCtorInitializer *const *> (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::inits  )
        .def("getNumCtorInitializers", (unsigned int (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::getNumCtorInitializers  )
        .def("setNumCtorInitializers", (void (clang::CXXConstructorDecl::*)(unsigned int))&clang::CXXConstructorDecl::setNumCtorInitializers  )
        .def("isExplicit", (bool (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::isExplicit  )
        .def("isDelegatingConstructor", (bool (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::isDelegatingConstructor  )
        .def("getTargetConstructor", (clang::CXXConstructorDecl * (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::getTargetConstructor , py::return_value_policy::reference_internal )
        .def("isDefaultConstructor", (bool (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::isDefaultConstructor  )
        .def("isCopyConstructor", [](const clang::CXXConstructorDecl& self, unsigned int & TypeQuals) -> bool {
         return self.isCopyConstructor(TypeQuals);
        } )
        .def("isCopyConstructor", [](const clang::CXXConstructorDecl& self) -> bool {
         return self.isCopyConstructor();
        } )
        .def("isMoveConstructor", [](const clang::CXXConstructorDecl& self, unsigned int & TypeQuals) -> bool {
         return self.isMoveConstructor(TypeQuals);
        } )
        .def("isMoveConstructor", [](const clang::CXXConstructorDecl& self) -> bool {
         return self.isMoveConstructor();
        } )
        .def("isCopyOrMoveConstructor", [](const clang::CXXConstructorDecl& self, unsigned int & TypeQuals) -> bool {
         return self.isCopyOrMoveConstructor(TypeQuals);
        } )
        .def("isCopyOrMoveConstructor", [](const clang::CXXConstructorDecl& self) -> bool {
         return self.isCopyOrMoveConstructor();
        } )
        .def("isConvertingConstructor", (bool (clang::CXXConstructorDecl::*)(bool) const)&clang::CXXConstructorDecl::isConvertingConstructor  )
        .def("isSpecializationCopyingObject", (bool (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::isSpecializationCopyingObject  )
        .def("isInheritingConstructor", (bool (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::isInheritingConstructor  )
        .def("setInheritingConstructor", (void (clang::CXXConstructorDecl::*)(bool))&clang::CXXConstructorDecl::setInheritingConstructor  )
        //.def("getInheritedConstructor", (clang::InheritedConstructor (clang::CXXConstructorDecl::*)() const)&clang::CXXConstructorDecl::getInheritedConstructor  )
        .def("getCanonicalDecl", []( clang::CXXConstructorDecl& self) -> clang::CXXConstructorDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::CXXConstructorDecl& self) -> const clang::CXXConstructorDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::CXXDestructorDecl, decl_deleter<clang::CXXDestructorDecl>::type>(m, "CXXDestructorDecl" , py::base<clang::CXXMethodDecl>())

        .def("setOperatorDelete", (void (clang::CXXDestructorDecl::*)(clang::FunctionDecl *, clang::Expr *))&clang::CXXDestructorDecl::setOperatorDelete  )
        .def("getOperatorDelete", (const clang::FunctionDecl * (clang::CXXDestructorDecl::*)() const)&clang::CXXDestructorDecl::getOperatorDelete , py::return_value_policy::reference_internal )
        .def("getOperatorDeleteThisArg", (clang::Expr * (clang::CXXDestructorDecl::*)() const)&clang::CXXDestructorDecl::getOperatorDeleteThisArg , py::return_value_policy::reference_internal )
        .def("getCanonicalDecl", []( clang::CXXDestructorDecl& self) -> clang::CXXDestructorDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::CXXDestructorDecl& self) -> const clang::CXXDestructorDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::CXXConversionDecl, decl_deleter<clang::CXXConversionDecl>::type>(m, "CXXConversionDecl" , py::base<clang::CXXMethodDecl>())

        .def("isExplicit", (bool (clang::CXXConversionDecl::*)() const)&clang::CXXConversionDecl::isExplicit  )
        .def("getConversionType", (clang::QualType (clang::CXXConversionDecl::*)() const)&clang::CXXConversionDecl::getConversionType  )
        .def("isLambdaToBlockPointerConversion", (bool (clang::CXXConversionDecl::*)() const)&clang::CXXConversionDecl::isLambdaToBlockPointerConversion  )
        .def("getCanonicalDecl", []( clang::CXXConversionDecl& self) -> clang::CXXConversionDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::CXXConversionDecl& self) -> const clang::CXXConversionDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::LinkageSpecDecl, decl_deleter<clang::LinkageSpecDecl>::type>(m, "LinkageSpecDecl" , py::base<clang::Decl>())

        .def("getLanguage", (clang::LinkageSpecDecl::LanguageIDs (clang::LinkageSpecDecl::*)() const)&clang::LinkageSpecDecl::getLanguage  )
        .def("setLanguage", (void (clang::LinkageSpecDecl::*)(clang::LinkageSpecDecl::LanguageIDs))&clang::LinkageSpecDecl::setLanguage  )
        .def("hasBraces", (bool (clang::LinkageSpecDecl::*)() const)&clang::LinkageSpecDecl::hasBraces  )
        .def("getExternLoc", (clang::SourceLocation (clang::LinkageSpecDecl::*)() const)&clang::LinkageSpecDecl::getExternLoc  )
        .def("getRBraceLoc", (clang::SourceLocation (clang::LinkageSpecDecl::*)() const)&clang::LinkageSpecDecl::getRBraceLoc  )
        .def("setExternLoc", (void (clang::LinkageSpecDecl::*)(clang::SourceLocation))&clang::LinkageSpecDecl::setExternLoc  )
        .def("setRBraceLoc", (void (clang::LinkageSpecDecl::*)(clang::SourceLocation))&clang::LinkageSpecDecl::setRBraceLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::LinkageSpecDecl::*)() const)&clang::LinkageSpecDecl::getEndLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::LinkageSpecDecl::*)() const)&clang::LinkageSpecDecl::getSourceRange  )
    ;

    py::class_<clang::UsingDirectiveDecl, decl_deleter<clang::UsingDirectiveDecl>::type>(m, "UsingDirectiveDecl" , py::base<clang::NamedDecl>())

        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::UsingDirectiveDecl::*)() const)&clang::UsingDirectiveDecl::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::UsingDirectiveDecl::*)() const)&clang::UsingDirectiveDecl::getQualifier , py::return_value_policy::reference_internal )
        .def("getNominatedNamespaceAsWritten", []( clang::UsingDirectiveDecl& self) -> clang::NamedDecl * {
         return self.getNominatedNamespaceAsWritten();
        } , py::return_value_policy::reference_internal)
        .def("getNominatedNamespaceAsWritten", [](const clang::UsingDirectiveDecl& self) -> const clang::NamedDecl * {
         return self.getNominatedNamespaceAsWritten();
        } , py::return_value_policy::reference_internal)
        .def("getNominatedNamespace", []( clang::UsingDirectiveDecl& self) -> clang::NamespaceDecl * {
         return self.getNominatedNamespace();
        } , py::return_value_policy::reference_internal)
        .def("getNominatedNamespace", [](const clang::UsingDirectiveDecl& self) -> const clang::NamespaceDecl * {
         return self.getNominatedNamespace();
        } , py::return_value_policy::reference_internal)
        .def("getCommonAncestor", []( clang::UsingDirectiveDecl& self) -> clang::DeclContext * {
         return self.getCommonAncestor();
        } , py::return_value_policy::reference_internal)
        .def("getCommonAncestor", [](const clang::UsingDirectiveDecl& self) -> const clang::DeclContext * {
         return self.getCommonAncestor();
        } , py::return_value_policy::reference_internal)
        .def("getUsingLoc", (clang::SourceLocation (clang::UsingDirectiveDecl::*)() const)&clang::UsingDirectiveDecl::getUsingLoc  )
        .def("getNamespaceKeyLocation", (clang::SourceLocation (clang::UsingDirectiveDecl::*)() const)&clang::UsingDirectiveDecl::getNamespaceKeyLocation  )
        .def("getIdentLocation", (clang::SourceLocation (clang::UsingDirectiveDecl::*)() const)&clang::UsingDirectiveDecl::getIdentLocation  )
        .def("getSourceRange", (clang::SourceRange (clang::UsingDirectiveDecl::*)() const)&clang::UsingDirectiveDecl::getSourceRange  )
    ;

    py::class_<clang::NamespaceAliasDecl, decl_deleter<clang::NamespaceAliasDecl>::type>(m, "NamespaceAliasDecl" , py::base<clang::NamedDecl>())

        .def("getCanonicalDecl", []( clang::NamespaceAliasDecl& self) -> clang::NamespaceAliasDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::NamespaceAliasDecl& self) -> const clang::NamespaceAliasDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getQualifier , py::return_value_policy::reference_internal )
        .def("getNamespace", []( clang::NamespaceAliasDecl& self) -> clang::NamespaceDecl * {
         return self.getNamespace();
        } , py::return_value_policy::reference_internal)
        .def("getNamespace", [](const clang::NamespaceAliasDecl& self) -> const clang::NamespaceDecl * {
         return self.getNamespace();
        } , py::return_value_policy::reference_internal)
        .def("getAliasLoc", (clang::SourceLocation (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getAliasLoc  )
        .def("getNamespaceLoc", (clang::SourceLocation (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getNamespaceLoc  )
        .def("getTargetNameLoc", (clang::SourceLocation (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getTargetNameLoc  )
        .def("getAliasedNamespace", (clang::NamedDecl * (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getAliasedNamespace , py::return_value_policy::reference_internal )
        .def("getSourceRange", (clang::SourceRange (clang::NamespaceAliasDecl::*)() const)&clang::NamespaceAliasDecl::getSourceRange  )
    ;

    py::class_<clang::UsingShadowDecl, decl_deleter<clang::UsingShadowDecl>::type>(m, "UsingShadowDecl" , py::base<clang::NamedDecl>())

        .def("getCanonicalDecl", []( clang::UsingShadowDecl& self) -> clang::UsingShadowDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::UsingShadowDecl& self) -> const clang::UsingShadowDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getTargetDecl", (clang::NamedDecl * (clang::UsingShadowDecl::*)() const)&clang::UsingShadowDecl::getTargetDecl , py::return_value_policy::reference_internal )
        .def("setTargetDecl", (void (clang::UsingShadowDecl::*)(clang::NamedDecl *))&clang::UsingShadowDecl::setTargetDecl  )
        .def("getUsingDecl", (clang::UsingDecl * (clang::UsingShadowDecl::*)() const)&clang::UsingShadowDecl::getUsingDecl , py::return_value_policy::reference_internal )
        .def("getNextUsingShadowDecl", (clang::UsingShadowDecl * (clang::UsingShadowDecl::*)() const)&clang::UsingShadowDecl::getNextUsingShadowDecl , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::UsingDecl, decl_deleter<clang::UsingDecl>::type>(m, "UsingDecl" , py::base<clang::NamedDecl>())

        .def("getUsingLoc", (clang::SourceLocation (clang::UsingDecl::*)() const)&clang::UsingDecl::getUsingLoc  )
        .def("setUsingLoc", (void (clang::UsingDecl::*)(clang::SourceLocation))&clang::UsingDecl::setUsingLoc  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::UsingDecl::*)() const)&clang::UsingDecl::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::UsingDecl::*)() const)&clang::UsingDecl::getQualifier , py::return_value_policy::reference_internal )
        .def("getNameInfo", (clang::DeclarationNameInfo (clang::UsingDecl::*)() const)&clang::UsingDecl::getNameInfo  )
        .def("isAccessDeclaration", (bool (clang::UsingDecl::*)() const)&clang::UsingDecl::isAccessDeclaration  )
        .def("hasTypename", (bool (clang::UsingDecl::*)() const)&clang::UsingDecl::hasTypename  )
        .def("setTypename", (void (clang::UsingDecl::*)(bool))&clang::UsingDecl::setTypename  )
        //.def("shadows", (llvm::iterator_range<clang::UsingDecl::shadow_iterator> (clang::UsingDecl::*)() const)&clang::UsingDecl::shadows  )
        .def("shadow_size", (unsigned int (clang::UsingDecl::*)() const)&clang::UsingDecl::shadow_size  )
        .def("addShadowDecl", (void (clang::UsingDecl::*)(clang::UsingShadowDecl *))&clang::UsingDecl::addShadowDecl  )
        .def("removeShadowDecl", (void (clang::UsingDecl::*)(clang::UsingShadowDecl *))&clang::UsingDecl::removeShadowDecl  )
        .def("getSourceRange", (clang::SourceRange (clang::UsingDecl::*)() const)&clang::UsingDecl::getSourceRange  )
        .def("getCanonicalDecl", []( clang::UsingDecl& self) -> clang::UsingDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::UsingDecl& self) -> const clang::UsingDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::UsingPackDecl, decl_deleter<clang::UsingPackDecl>::type>(m, "UsingPackDecl" , py::base<clang::NamedDecl>())

        .def("getInstantiatedFromUsingDecl", (clang::NamedDecl * (clang::UsingPackDecl::*)() const)&clang::UsingPackDecl::getInstantiatedFromUsingDecl , py::return_value_policy::reference_internal )
        //.def("expansions", (llvm::ArrayRef<clang::NamedDecl *> (clang::UsingPackDecl::*)() const)&clang::UsingPackDecl::expansions  )
        .def("getSourceRange", (clang::SourceRange (clang::UsingPackDecl::*)() const)&clang::UsingPackDecl::getSourceRange  )
        .def("getCanonicalDecl", []( clang::UsingPackDecl& self) -> clang::UsingPackDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::UsingPackDecl& self) -> const clang::UsingPackDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::UnresolvedUsingValueDecl, decl_deleter<clang::UnresolvedUsingValueDecl>::type>(m, "UnresolvedUsingValueDecl" , py::base<clang::ValueDecl>())

        .def("getUsingLoc", (clang::SourceLocation (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::getUsingLoc  )
        .def("setUsingLoc", (void (clang::UnresolvedUsingValueDecl::*)(clang::SourceLocation))&clang::UnresolvedUsingValueDecl::setUsingLoc  )
        .def("isAccessDeclaration", (bool (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::isAccessDeclaration  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::getQualifier , py::return_value_policy::reference_internal )
        .def("getNameInfo", (clang::DeclarationNameInfo (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::getNameInfo  )
        .def("isPackExpansion", (bool (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::isPackExpansion  )
        .def("getEllipsisLoc", (clang::SourceLocation (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::getEllipsisLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::UnresolvedUsingValueDecl::*)() const)&clang::UnresolvedUsingValueDecl::getSourceRange  )
        .def("getCanonicalDecl", []( clang::UnresolvedUsingValueDecl& self) -> clang::UnresolvedUsingValueDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::UnresolvedUsingValueDecl& self) -> const clang::UnresolvedUsingValueDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::UnresolvedUsingTypenameDecl, decl_deleter<clang::UnresolvedUsingTypenameDecl>::type>(m, "UnresolvedUsingTypenameDecl" , py::base<clang::TypeDecl>())

        .def("getUsingLoc", (clang::SourceLocation (clang::UnresolvedUsingTypenameDecl::*)() const)&clang::UnresolvedUsingTypenameDecl::getUsingLoc  )
        .def("getTypenameLoc", (clang::SourceLocation (clang::UnresolvedUsingTypenameDecl::*)() const)&clang::UnresolvedUsingTypenameDecl::getTypenameLoc  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::UnresolvedUsingTypenameDecl::*)() const)&clang::UnresolvedUsingTypenameDecl::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::UnresolvedUsingTypenameDecl::*)() const)&clang::UnresolvedUsingTypenameDecl::getQualifier , py::return_value_policy::reference_internal )
        .def("getNameInfo", (clang::DeclarationNameInfo (clang::UnresolvedUsingTypenameDecl::*)() const)&clang::UnresolvedUsingTypenameDecl::getNameInfo  )
        .def("isPackExpansion", (bool (clang::UnresolvedUsingTypenameDecl::*)() const)&clang::UnresolvedUsingTypenameDecl::isPackExpansion  )
        .def("getEllipsisLoc", (clang::SourceLocation (clang::UnresolvedUsingTypenameDecl::*)() const)&clang::UnresolvedUsingTypenameDecl::getEllipsisLoc  )
        .def("getCanonicalDecl", []( clang::UnresolvedUsingTypenameDecl& self) -> clang::UnresolvedUsingTypenameDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::UnresolvedUsingTypenameDecl& self) -> const clang::UnresolvedUsingTypenameDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::StaticAssertDecl, decl_deleter<clang::StaticAssertDecl>::type>(m, "StaticAssertDecl" , py::base<clang::Decl>())

        .def("getAssertExpr", []( clang::StaticAssertDecl& self) -> clang::Expr * {
         return self.getAssertExpr();
        } , py::return_value_policy::reference_internal)
        .def("getAssertExpr", [](const clang::StaticAssertDecl& self) -> const clang::Expr * {
         return self.getAssertExpr();
        } , py::return_value_policy::reference_internal)
        .def("getMessage", []( clang::StaticAssertDecl& self) -> clang::StringLiteral * {
         return self.getMessage();
        } , py::return_value_policy::reference_internal)
        .def("getMessage", [](const clang::StaticAssertDecl& self) -> const clang::StringLiteral * {
         return self.getMessage();
        } , py::return_value_policy::reference_internal)
        .def("isFailed", (bool (clang::StaticAssertDecl::*)() const)&clang::StaticAssertDecl::isFailed  )
        .def("getRParenLoc", (clang::SourceLocation (clang::StaticAssertDecl::*)() const)&clang::StaticAssertDecl::getRParenLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::StaticAssertDecl::*)() const)&clang::StaticAssertDecl::getSourceRange  )
    ;

    py::class_<clang::BindingDecl, decl_deleter<clang::BindingDecl>::type>(m, "BindingDecl" , py::base<clang::ValueDecl>())

        .def("getBinding", (clang::Expr * (clang::BindingDecl::*)() const)&clang::BindingDecl::getBinding , py::return_value_policy::reference_internal )
        .def("getHoldingVar", (clang::VarDecl * (clang::BindingDecl::*)() const)&clang::BindingDecl::getHoldingVar , py::return_value_policy::reference_internal )
        .def("setBinding", (void (clang::BindingDecl::*)(clang::QualType, clang::Expr *))&clang::BindingDecl::setBinding  )
    ;

    py::class_<clang::DecompositionDecl, decl_deleter<clang::DecompositionDecl>::type>(m, "DecompositionDecl" , py::base<clang::VarDecl>())

        //.def("bindings", (llvm::ArrayRef<clang::BindingDecl *> (clang::DecompositionDecl::*)() const)&clang::DecompositionDecl::bindings  )
        //.def("printName", (void (clang::DecompositionDecl::*)(llvm::raw_ostream &) const)&clang::DecompositionDecl::printName  )
    ;

    py::class_<clang::MSPropertyDecl, decl_deleter<clang::MSPropertyDecl>::type>(m, "MSPropertyDecl" , py::base<clang::DeclaratorDecl>())

        .def("hasGetter", (bool (clang::MSPropertyDecl::*)() const)&clang::MSPropertyDecl::hasGetter  )
        //.def("getGetterId", (clang::IdentifierInfo * (clang::MSPropertyDecl::*)() const)&clang::MSPropertyDecl::getGetterId , py::return_value_policy::reference_internal )
        .def("hasSetter", (bool (clang::MSPropertyDecl::*)() const)&clang::MSPropertyDecl::hasSetter  )
        //.def("getSetterId", (clang::IdentifierInfo * (clang::MSPropertyDecl::*)() const)&clang::MSPropertyDecl::getSetterId , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::TemplateDecl, decl_deleter<clang::TemplateDecl>::type>(m, "TemplateDecl" , py::base<clang::NamedDecl>())

        //.def("getTemplateParameters", (clang::TemplateParameterList * (clang::TemplateDecl::*)() const)&clang::TemplateDecl::getTemplateParameters , py::return_value_policy::reference_internal )
        .def("getRequiresClause", (const clang::Expr * (clang::TemplateDecl::*)() const)&clang::TemplateDecl::getRequiresClause , py::return_value_policy::reference_internal )
        .def("getAssociatedConstraints", (clang::Expr * (clang::TemplateDecl::*)() const)&clang::TemplateDecl::getAssociatedConstraints , py::return_value_policy::reference_internal )
        .def("getTemplatedDecl", (clang::NamedDecl * (clang::TemplateDecl::*)() const)&clang::TemplateDecl::getTemplatedDecl , py::return_value_policy::reference_internal )
        .def("getSourceRange", (clang::SourceRange (clang::TemplateDecl::*)() const)&clang::TemplateDecl::getSourceRange  )
        //.def("init", (void (clang::TemplateDecl::*)(clang::NamedDecl *, clang::TemplateParameterList *))&clang::TemplateDecl::init  )
    ;

    py::class_<clang::RedeclarableTemplateDecl, decl_deleter<clang::RedeclarableTemplateDecl>::type>(m, "RedeclarableTemplateDecl" , py::base<clang::TemplateDecl>())

        .def("getCanonicalDecl", []( clang::RedeclarableTemplateDecl& self) -> clang::RedeclarableTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::RedeclarableTemplateDecl& self) -> const clang::RedeclarableTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("isMemberSpecialization", (bool (clang::RedeclarableTemplateDecl::*)() const)&clang::RedeclarableTemplateDecl::isMemberSpecialization  )
        .def("setMemberSpecialization", (void (clang::RedeclarableTemplateDecl::*)())&clang::RedeclarableTemplateDecl::setMemberSpecialization  )
        .def("getInstantiatedFromMemberTemplate", (clang::RedeclarableTemplateDecl * (clang::RedeclarableTemplateDecl::*)() const)&clang::RedeclarableTemplateDecl::getInstantiatedFromMemberTemplate , py::return_value_policy::reference_internal )
        .def("setInstantiatedFromMemberTemplate", (void (clang::RedeclarableTemplateDecl::*)(clang::RedeclarableTemplateDecl *))&clang::RedeclarableTemplateDecl::setInstantiatedFromMemberTemplate  )
    ;

    py::class_<clang::FunctionTemplateDecl, decl_deleter<clang::FunctionTemplateDecl>::type>(m, "FunctionTemplateDecl" , py::base<clang::RedeclarableTemplateDecl>())

        .def("LoadLazySpecializations", (void (clang::FunctionTemplateDecl::*)() const)&clang::FunctionTemplateDecl::LoadLazySpecializations  )
        .def("getTemplatedDecl", (clang::FunctionDecl * (clang::FunctionTemplateDecl::*)() const)&clang::FunctionTemplateDecl::getTemplatedDecl , py::return_value_policy::reference_internal )
        .def("isThisDeclarationADefinition", (bool (clang::FunctionTemplateDecl::*)() const)&clang::FunctionTemplateDecl::isThisDeclarationADefinition  )
        .def("getCanonicalDecl", []( clang::FunctionTemplateDecl& self) -> clang::FunctionTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::FunctionTemplateDecl& self) -> const clang::FunctionTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", []( clang::FunctionTemplateDecl& self) -> clang::FunctionTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::FunctionTemplateDecl& self) -> const clang::FunctionTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::FunctionTemplateDecl& self) -> clang::FunctionTemplateDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::FunctionTemplateDecl& self) -> const clang::FunctionTemplateDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getInstantiatedFromMemberTemplate", (clang::FunctionTemplateDecl * (clang::FunctionTemplateDecl::*)() const)&clang::FunctionTemplateDecl::getInstantiatedFromMemberTemplate , py::return_value_policy::reference_internal )
        //.def("specializations", (llvm::iterator_range<clang::RedeclarableTemplateDecl::SpecIterator<clang::FunctionTemplateSpecializationInfo, clang::RedeclarableTemplateDecl::SpecEntryTraits<clang::FunctionTemplateSpecializationInfo>, clang::FunctionDecl> > (clang::FunctionTemplateDecl::*)() const)&clang::FunctionTemplateDecl::specializations  )
        //.def("getInjectedTemplateArgs", (llvm::ArrayRef<clang::TemplateArgument> (clang::FunctionTemplateDecl::*)())&clang::FunctionTemplateDecl::getInjectedTemplateArgs  )
        .def("mergePrevDecl", (void (clang::FunctionTemplateDecl::*)(clang::FunctionTemplateDecl *))&clang::FunctionTemplateDecl::mergePrevDecl  )
    ;

    py::class_<clang::TemplateTypeParmDecl, decl_deleter<clang::TemplateTypeParmDecl>::type>(m, "TemplateTypeParmDecl" , py::base<clang::TypeDecl>())

        .def("wasDeclaredWithTypename", (bool (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::wasDeclaredWithTypename  )
        //.def("getDefaultArgStorage", (const clang::DefaultArgStorage<clang::TemplateTypeParmDecl, clang::TypeSourceInfo *> & (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getDefaultArgStorage  )
        .def("hasDefaultArgument", (bool (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::hasDefaultArgument  )
        .def("getDefaultArgument", (clang::QualType (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getDefaultArgument  )
        .def("getDefaultArgumentInfo", (clang::TypeSourceInfo * (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getDefaultArgumentInfo , py::return_value_policy::reference_internal )
        .def("getDefaultArgumentLoc", (clang::SourceLocation (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getDefaultArgumentLoc  )
        .def("defaultArgumentWasInherited", (bool (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::defaultArgumentWasInherited  )
        .def("setDefaultArgument", (void (clang::TemplateTypeParmDecl::*)(clang::TypeSourceInfo *))&clang::TemplateTypeParmDecl::setDefaultArgument  )
        .def("setInheritedDefaultArgument", (void (clang::TemplateTypeParmDecl::*)(const clang::ASTContext &, clang::TemplateTypeParmDecl *))&clang::TemplateTypeParmDecl::setInheritedDefaultArgument  )
        .def("removeDefaultArgument", (void (clang::TemplateTypeParmDecl::*)())&clang::TemplateTypeParmDecl::removeDefaultArgument  )
        .def("setDeclaredWithTypename", (void (clang::TemplateTypeParmDecl::*)(bool))&clang::TemplateTypeParmDecl::setDeclaredWithTypename  )
        .def("getDepth", (unsigned int (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getDepth  )
        .def("getIndex", (unsigned int (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getIndex  )
        .def("isParameterPack", (bool (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::isParameterPack  )
        .def("getSourceRange", (clang::SourceRange (clang::TemplateTypeParmDecl::*)() const)&clang::TemplateTypeParmDecl::getSourceRange  )
    ;

    py::class_<clang::NonTypeTemplateParmDecl, decl_deleter<clang::NonTypeTemplateParmDecl>::type>(m, "NonTypeTemplateParmDecl" , py::base<clang::DeclaratorDecl>())

        .def("getSourceRange", (clang::SourceRange (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::getSourceRange  )
        //.def("getDefaultArgStorage", (const clang::DefaultArgStorage<clang::NonTypeTemplateParmDecl, clang::Expr *> & (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::getDefaultArgStorage  )
        .def("hasDefaultArgument", (bool (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::hasDefaultArgument  )
        .def("getDefaultArgument", (clang::Expr * (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::getDefaultArgument , py::return_value_policy::reference_internal )
        .def("getDefaultArgumentLoc", (clang::SourceLocation (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::getDefaultArgumentLoc  )
        .def("defaultArgumentWasInherited", (bool (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::defaultArgumentWasInherited  )
        .def("setDefaultArgument", (void (clang::NonTypeTemplateParmDecl::*)(clang::Expr *))&clang::NonTypeTemplateParmDecl::setDefaultArgument  )
        .def("setInheritedDefaultArgument", (void (clang::NonTypeTemplateParmDecl::*)(const clang::ASTContext &, clang::NonTypeTemplateParmDecl *))&clang::NonTypeTemplateParmDecl::setInheritedDefaultArgument  )
        .def("removeDefaultArgument", (void (clang::NonTypeTemplateParmDecl::*)())&clang::NonTypeTemplateParmDecl::removeDefaultArgument  )
        .def("isParameterPack", (bool (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::isParameterPack  )
        .def("isPackExpansion", (bool (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::isPackExpansion  )
        .def("isExpandedParameterPack", (bool (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::isExpandedParameterPack  )
        .def("getNumExpansionTypes", (unsigned int (clang::NonTypeTemplateParmDecl::*)() const)&clang::NonTypeTemplateParmDecl::getNumExpansionTypes  )
        .def("getExpansionType", (clang::QualType (clang::NonTypeTemplateParmDecl::*)(unsigned int) const)&clang::NonTypeTemplateParmDecl::getExpansionType  )
        .def("getExpansionTypeSourceInfo", (clang::TypeSourceInfo * (clang::NonTypeTemplateParmDecl::*)(unsigned int) const)&clang::NonTypeTemplateParmDecl::getExpansionTypeSourceInfo , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::TemplateTemplateParmDecl, decl_deleter<clang::TemplateTemplateParmDecl>::type>(m, "TemplateTemplateParmDecl" , py::base<clang::TemplateDecl>())

        .def("isParameterPack", (bool (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::isParameterPack  )
        .def("isPackExpansion", (bool (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::isPackExpansion  )
        .def("isExpandedParameterPack", (bool (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::isExpandedParameterPack  )
        .def("getNumExpansionTemplateParameters", (unsigned int (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::getNumExpansionTemplateParameters  )
        //.def("getExpansionTemplateParameters", (clang::TemplateParameterList * (clang::TemplateTemplateParmDecl::*)(unsigned int) const)&clang::TemplateTemplateParmDecl::getExpansionTemplateParameters , py::return_value_policy::reference_internal )
        //.def("getDefaultArgStorage", (const clang::DefaultArgStorage<clang::TemplateTemplateParmDecl, clang::TemplateArgumentLoc *> & (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::getDefaultArgStorage  )
        .def("hasDefaultArgument", (bool (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::hasDefaultArgument  )
        //.def("getDefaultArgument", (const clang::TemplateArgumentLoc & (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::getDefaultArgument  )
        .def("getDefaultArgumentLoc", (clang::SourceLocation (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::getDefaultArgumentLoc  )
        .def("defaultArgumentWasInherited", (bool (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::defaultArgumentWasInherited  )
        //.def("setDefaultArgument", (void (clang::TemplateTemplateParmDecl::*)(const clang::ASTContext &, const clang::TemplateArgumentLoc &))&clang::TemplateTemplateParmDecl::setDefaultArgument  )
        .def("setInheritedDefaultArgument", (void (clang::TemplateTemplateParmDecl::*)(const clang::ASTContext &, clang::TemplateTemplateParmDecl *))&clang::TemplateTemplateParmDecl::setInheritedDefaultArgument  )
        .def("removeDefaultArgument", (void (clang::TemplateTemplateParmDecl::*)())&clang::TemplateTemplateParmDecl::removeDefaultArgument  )
        .def("getSourceRange", (clang::SourceRange (clang::TemplateTemplateParmDecl::*)() const)&clang::TemplateTemplateParmDecl::getSourceRange  )
    ;

    py::class_<clang::BuiltinTemplateDecl, decl_deleter<clang::BuiltinTemplateDecl>::type>(m, "BuiltinTemplateDecl" , py::base<clang::TemplateDecl>())

        .def("getSourceRange", (clang::SourceRange (clang::BuiltinTemplateDecl::*)() const)&clang::BuiltinTemplateDecl::getSourceRange  )
        .def("getBuiltinTemplateKind", (clang::BuiltinTemplateKind (clang::BuiltinTemplateDecl::*)() const)&clang::BuiltinTemplateDecl::getBuiltinTemplateKind  )
    ;

    py::class_<clang::ClassTemplateSpecializationDecl, decl_deleter<clang::ClassTemplateSpecializationDecl>::type>(m, "ClassTemplateSpecializationDecl" , py::base<clang::CXXRecordDecl>())

        //.def("getNameForDiagnostic", (void (clang::ClassTemplateSpecializationDecl::*)(llvm::raw_ostream &, const clang::PrintingPolicy &, bool) const)&clang::ClassTemplateSpecializationDecl::getNameForDiagnostic  )
        .def("getMostRecentDecl", (clang::ClassTemplateSpecializationDecl * (clang::ClassTemplateSpecializationDecl::*)())&clang::ClassTemplateSpecializationDecl::getMostRecentDecl , py::return_value_policy::reference_internal )
        .def("getSpecializedTemplate", (clang::ClassTemplateDecl * (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getSpecializedTemplate , py::return_value_policy::reference_internal )
        //.def("getTemplateArgs", (const clang::TemplateArgumentList & (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getTemplateArgs  )
        .def("getSpecializationKind", (clang::TemplateSpecializationKind (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getSpecializationKind  )
        .def("isExplicitSpecialization", (bool (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::isExplicitSpecialization  )
        .def("isExplicitInstantiationOrSpecialization", (bool (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::isExplicitInstantiationOrSpecialization  )
        .def("setSpecializationKind", (void (clang::ClassTemplateSpecializationDecl::*)(clang::TemplateSpecializationKind))&clang::ClassTemplateSpecializationDecl::setSpecializationKind  )
        .def("getPointOfInstantiation", (clang::SourceLocation (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getPointOfInstantiation  )
        .def("setPointOfInstantiation", (void (clang::ClassTemplateSpecializationDecl::*)(clang::SourceLocation))&clang::ClassTemplateSpecializationDecl::setPointOfInstantiation  )
        //.def("getInstantiatedFrom", (llvm::PointerUnion<clang::ClassTemplateDecl *, clang::ClassTemplatePartialSpecializationDecl *> (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getInstantiatedFrom  )
        //.def("getSpecializedTemplateOrPartial", (llvm::PointerUnion<clang::ClassTemplateDecl *, clang::ClassTemplatePartialSpecializationDecl *> (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getSpecializedTemplateOrPartial  )
        //.def("getTemplateInstantiationArgs", (const clang::TemplateArgumentList & (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getTemplateInstantiationArgs  )
        //.def("setInstantiationOf", (void (clang::ClassTemplateSpecializationDecl::*)(clang::ClassTemplatePartialSpecializationDecl *, const clang::TemplateArgumentList *))&clang::ClassTemplateSpecializationDecl::setInstantiationOf  )
        .def("setInstantiationOf", []( clang::ClassTemplateSpecializationDecl& self, clang::ClassTemplateDecl * TemplDecl)  {
          self.setInstantiationOf(TemplDecl);
        } )
        .def("setTypeAsWritten", (void (clang::ClassTemplateSpecializationDecl::*)(clang::TypeSourceInfo *))&clang::ClassTemplateSpecializationDecl::setTypeAsWritten  )
        .def("getTypeAsWritten", (clang::TypeSourceInfo * (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getTypeAsWritten , py::return_value_policy::reference_internal )
        .def("getExternLoc", (clang::SourceLocation (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getExternLoc  )
        .def("setExternLoc", (void (clang::ClassTemplateSpecializationDecl::*)(clang::SourceLocation))&clang::ClassTemplateSpecializationDecl::setExternLoc  )
        .def("setTemplateKeywordLoc", (void (clang::ClassTemplateSpecializationDecl::*)(clang::SourceLocation))&clang::ClassTemplateSpecializationDecl::setTemplateKeywordLoc  )
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getTemplateKeywordLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::ClassTemplateSpecializationDecl::*)() const)&clang::ClassTemplateSpecializationDecl::getSourceRange  )
        //.def("Profile", (void (clang::ClassTemplateSpecializationDecl::*)(llvm::FoldingSetNodeID &) const)&clang::ClassTemplateSpecializationDecl::Profile  )
    ;

    py::class_<clang::ClassTemplatePartialSpecializationDecl, decl_deleter<clang::ClassTemplatePartialSpecializationDecl>::type>(m, "ClassTemplatePartialSpecializationDecl" , py::base<clang::ClassTemplateSpecializationDecl>())

        .def("getMostRecentDecl", (clang::ClassTemplatePartialSpecializationDecl * (clang::ClassTemplatePartialSpecializationDecl::*)())&clang::ClassTemplatePartialSpecializationDecl::getMostRecentDecl , py::return_value_policy::reference_internal )
        //.def("getTemplateParameters", (clang::TemplateParameterList * (clang::ClassTemplatePartialSpecializationDecl::*)() const)&clang::ClassTemplatePartialSpecializationDecl::getTemplateParameters , py::return_value_policy::reference_internal )
        //.def("getTemplateArgsAsWritten", (const clang::ASTTemplateArgumentListInfo * (clang::ClassTemplatePartialSpecializationDecl::*)() const)&clang::ClassTemplatePartialSpecializationDecl::getTemplateArgsAsWritten , py::return_value_policy::reference_internal )
        .def("getInstantiatedFromMember", (clang::ClassTemplatePartialSpecializationDecl * (clang::ClassTemplatePartialSpecializationDecl::*)() const)&clang::ClassTemplatePartialSpecializationDecl::getInstantiatedFromMember , py::return_value_policy::reference_internal )
        .def("getInstantiatedFromMemberTemplate", (clang::ClassTemplatePartialSpecializationDecl * (clang::ClassTemplatePartialSpecializationDecl::*)() const)&clang::ClassTemplatePartialSpecializationDecl::getInstantiatedFromMemberTemplate , py::return_value_policy::reference_internal )
        .def("setInstantiatedFromMember", (void (clang::ClassTemplatePartialSpecializationDecl::*)(clang::ClassTemplatePartialSpecializationDecl *))&clang::ClassTemplatePartialSpecializationDecl::setInstantiatedFromMember  )
        .def("isMemberSpecialization", (bool (clang::ClassTemplatePartialSpecializationDecl::*)())&clang::ClassTemplatePartialSpecializationDecl::isMemberSpecialization  )
        .def("setMemberSpecialization", (void (clang::ClassTemplatePartialSpecializationDecl::*)())&clang::ClassTemplatePartialSpecializationDecl::setMemberSpecialization  )
        .def("getInjectedSpecializationType", (clang::QualType (clang::ClassTemplatePartialSpecializationDecl::*)() const)&clang::ClassTemplatePartialSpecializationDecl::getInjectedSpecializationType  )
    ;

    py::class_<clang::ClassTemplateDecl, decl_deleter<clang::ClassTemplateDecl>::type>(m, "ClassTemplateDecl" , py::base<clang::RedeclarableTemplateDecl>())

        .def("LoadLazySpecializations", (void (clang::ClassTemplateDecl::*)() const)&clang::ClassTemplateDecl::LoadLazySpecializations  )
        .def("getTemplatedDecl", (clang::CXXRecordDecl * (clang::ClassTemplateDecl::*)() const)&clang::ClassTemplateDecl::getTemplatedDecl , py::return_value_policy::reference_internal )
        .def("isThisDeclarationADefinition", (bool (clang::ClassTemplateDecl::*)() const)&clang::ClassTemplateDecl::isThisDeclarationADefinition  )
        //.def("AddSpecialization", (void (clang::ClassTemplateDecl::*)(clang::ClassTemplateSpecializationDecl *, void *))&clang::ClassTemplateDecl::AddSpecialization  )
        .def("getCanonicalDecl", []( clang::ClassTemplateDecl& self) -> clang::ClassTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::ClassTemplateDecl& self) -> const clang::ClassTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", []( clang::ClassTemplateDecl& self) -> clang::ClassTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::ClassTemplateDecl& self) -> const clang::ClassTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::ClassTemplateDecl& self) -> clang::ClassTemplateDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::ClassTemplateDecl& self) -> const clang::ClassTemplateDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getInstantiatedFromMemberTemplate", (clang::ClassTemplateDecl * (clang::ClassTemplateDecl::*)() const)&clang::ClassTemplateDecl::getInstantiatedFromMemberTemplate , py::return_value_policy::reference_internal )
        //.def("AddPartialSpecialization", (void (clang::ClassTemplateDecl::*)(clang::ClassTemplatePartialSpecializationDecl *, void *))&clang::ClassTemplateDecl::AddPartialSpecialization  )
        //.def("getPartialSpecializations", (void (clang::ClassTemplateDecl::*)(llvm::SmallVectorImpl<clang::ClassTemplatePartialSpecializationDecl *> &))&clang::ClassTemplateDecl::getPartialSpecializations  )
        .def("findPartialSpecialization", []( clang::ClassTemplateDecl& self, clang::QualType T) -> clang::ClassTemplatePartialSpecializationDecl * {
         return self.findPartialSpecialization(T);
        } , py::return_value_policy::reference_internal)
        .def("findPartialSpecInstantiatedFromMember", (clang::ClassTemplatePartialSpecializationDecl * (clang::ClassTemplateDecl::*)(clang::ClassTemplatePartialSpecializationDecl *))&clang::ClassTemplateDecl::findPartialSpecInstantiatedFromMember , py::return_value_policy::reference_internal )
        .def("getInjectedClassNameSpecialization", (clang::QualType (clang::ClassTemplateDecl::*)())&clang::ClassTemplateDecl::getInjectedClassNameSpecialization  )
        //.def("specializations", (llvm::iterator_range<clang::RedeclarableTemplateDecl::SpecIterator<clang::ClassTemplateSpecializationDecl, clang::RedeclarableTemplateDecl::SpecEntryTraits<clang::ClassTemplateSpecializationDecl>, clang::ClassTemplateSpecializationDecl> > (clang::ClassTemplateDecl::*)() const)&clang::ClassTemplateDecl::specializations  )
    ;

    py::class_<clang::FriendTemplateDecl, decl_deleter<clang::FriendTemplateDecl>::type>(m, "FriendTemplateDecl" , py::base<clang::Decl>())

        .def("getFriendType", (clang::TypeSourceInfo * (clang::FriendTemplateDecl::*)() const)&clang::FriendTemplateDecl::getFriendType , py::return_value_policy::reference_internal )
        .def("getFriendDecl", (clang::NamedDecl * (clang::FriendTemplateDecl::*)() const)&clang::FriendTemplateDecl::getFriendDecl , py::return_value_policy::reference_internal )
        .def("getFriendLoc", (clang::SourceLocation (clang::FriendTemplateDecl::*)() const)&clang::FriendTemplateDecl::getFriendLoc  )
        //.def("getTemplateParameterList", (clang::TemplateParameterList * (clang::FriendTemplateDecl::*)(unsigned int) const)&clang::FriendTemplateDecl::getTemplateParameterList , py::return_value_policy::reference_internal )
        .def("getNumTemplateParameters", (unsigned int (clang::FriendTemplateDecl::*)() const)&clang::FriendTemplateDecl::getNumTemplateParameters  )
    ;
}
