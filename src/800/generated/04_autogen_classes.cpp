
////////////////////////////////////////////////////////////////////////////////
// File autogenerated by clastgen
//  Clang - clang version 8.0.0 
//
// Warning. Changes made here will be overwritten.
////////////////////////////////////////////////////////////////////////////////
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "internal.h"

#include <clang/AST/AST.h>
#include <clang/ASTMatchers/ASTMatchers.h>
#include <clang/ASTMatchers/ASTMatchFinder.h>


namespace py = pybind11;

void autogenerated_classes_3(pybind11::module& m)
{

    py::class_<clang::TypeAliasTemplateDecl, decl_deleter<clang::TypeAliasTemplateDecl>::type>(m, "TypeAliasTemplateDecl" , py::base<clang::RedeclarableTemplateDecl>())

        .def("getTemplatedDecl", (clang::TypeAliasDecl * (clang::TypeAliasTemplateDecl::*)() const)&clang::TypeAliasTemplateDecl::getTemplatedDecl , py::return_value_policy::reference_internal )
        .def("getCanonicalDecl", []( clang::TypeAliasTemplateDecl& self) -> clang::TypeAliasTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::TypeAliasTemplateDecl& self) -> const clang::TypeAliasTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", []( clang::TypeAliasTemplateDecl& self) -> clang::TypeAliasTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::TypeAliasTemplateDecl& self) -> const clang::TypeAliasTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getInstantiatedFromMemberTemplate", (clang::TypeAliasTemplateDecl * (clang::TypeAliasTemplateDecl::*)() const)&clang::TypeAliasTemplateDecl::getInstantiatedFromMemberTemplate , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::ClassScopeFunctionSpecializationDecl, decl_deleter<clang::ClassScopeFunctionSpecializationDecl>::type>(m, "ClassScopeFunctionSpecializationDecl" , py::base<clang::Decl>())

        .def("getSpecialization", (clang::CXXMethodDecl * (clang::ClassScopeFunctionSpecializationDecl::*)() const)&clang::ClassScopeFunctionSpecializationDecl::getSpecialization , py::return_value_policy::reference_internal )
        .def("hasExplicitTemplateArgs", (bool (clang::ClassScopeFunctionSpecializationDecl::*)() const)&clang::ClassScopeFunctionSpecializationDecl::hasExplicitTemplateArgs  )
        //.def("templateArgs", (const clang::TemplateArgumentListInfo & (clang::ClassScopeFunctionSpecializationDecl::*)() const)&clang::ClassScopeFunctionSpecializationDecl::templateArgs  )
    ;

    py::class_<clang::VarTemplateSpecializationDecl, decl_deleter<clang::VarTemplateSpecializationDecl>::type>(m, "VarTemplateSpecializationDecl" , py::base<clang::VarDecl>())

        //.def("getNameForDiagnostic", (void (clang::VarTemplateSpecializationDecl::*)(llvm::raw_ostream &, const clang::PrintingPolicy &, bool) const)&clang::VarTemplateSpecializationDecl::getNameForDiagnostic  )
        .def("getMostRecentDecl", (clang::VarTemplateSpecializationDecl * (clang::VarTemplateSpecializationDecl::*)())&clang::VarTemplateSpecializationDecl::getMostRecentDecl , py::return_value_policy::reference_internal )
        .def("getSpecializedTemplate", (clang::VarTemplateDecl * (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getSpecializedTemplate , py::return_value_policy::reference_internal )
        //.def("getTemplateArgs", (const clang::TemplateArgumentList & (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getTemplateArgs  )
        //.def("setTemplateArgsInfo", (void (clang::VarTemplateSpecializationDecl::*)(const clang::TemplateArgumentListInfo &))&clang::VarTemplateSpecializationDecl::setTemplateArgsInfo  )
        //.def("getTemplateArgsInfo", (const clang::TemplateArgumentListInfo & (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getTemplateArgsInfo  )
        .def("getSpecializationKind", (clang::TemplateSpecializationKind (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getSpecializationKind  )
        .def("isExplicitSpecialization", (bool (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::isExplicitSpecialization  )
        .def("isExplicitInstantiationOrSpecialization", (bool (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::isExplicitInstantiationOrSpecialization  )
        .def("setSpecializationKind", (void (clang::VarTemplateSpecializationDecl::*)(clang::TemplateSpecializationKind))&clang::VarTemplateSpecializationDecl::setSpecializationKind  )
        .def("getPointOfInstantiation", (clang::SourceLocation (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getPointOfInstantiation  )
        .def("setPointOfInstantiation", (void (clang::VarTemplateSpecializationDecl::*)(clang::SourceLocation))&clang::VarTemplateSpecializationDecl::setPointOfInstantiation  )
        .def("setCompleteDefinition", (void (clang::VarTemplateSpecializationDecl::*)())&clang::VarTemplateSpecializationDecl::setCompleteDefinition  )
        //.def("getInstantiatedFrom", (llvm::PointerUnion<clang::VarTemplateDecl *, clang::VarTemplatePartialSpecializationDecl *> (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getInstantiatedFrom  )
        //.def("getSpecializedTemplateOrPartial", (llvm::PointerUnion<clang::VarTemplateDecl *, clang::VarTemplatePartialSpecializationDecl *> (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getSpecializedTemplateOrPartial  )
        //.def("getTemplateInstantiationArgs", (const clang::TemplateArgumentList & (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getTemplateInstantiationArgs  )
        //.def("setInstantiationOf", (void (clang::VarTemplateSpecializationDecl::*)(clang::VarTemplatePartialSpecializationDecl *, const clang::TemplateArgumentList *))&clang::VarTemplateSpecializationDecl::setInstantiationOf  )
        .def("setInstantiationOf", []( clang::VarTemplateSpecializationDecl& self, clang::VarTemplateDecl * TemplDecl)  {
          self.setInstantiationOf(TemplDecl);
        } )
        .def("setTypeAsWritten", (void (clang::VarTemplateSpecializationDecl::*)(clang::TypeSourceInfo *))&clang::VarTemplateSpecializationDecl::setTypeAsWritten  )
        .def("getTypeAsWritten", (clang::TypeSourceInfo * (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getTypeAsWritten , py::return_value_policy::reference_internal )
        .def("getExternLoc", (clang::SourceLocation (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getExternLoc  )
        .def("setExternLoc", (void (clang::VarTemplateSpecializationDecl::*)(clang::SourceLocation))&clang::VarTemplateSpecializationDecl::setExternLoc  )
        .def("setTemplateKeywordLoc", (void (clang::VarTemplateSpecializationDecl::*)(clang::SourceLocation))&clang::VarTemplateSpecializationDecl::setTemplateKeywordLoc  )
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::VarTemplateSpecializationDecl::*)() const)&clang::VarTemplateSpecializationDecl::getTemplateKeywordLoc  )
        //.def("Profile", (void (clang::VarTemplateSpecializationDecl::*)(llvm::FoldingSetNodeID &) const)&clang::VarTemplateSpecializationDecl::Profile  )
    ;

    py::class_<clang::VarTemplatePartialSpecializationDecl, decl_deleter<clang::VarTemplatePartialSpecializationDecl>::type>(m, "VarTemplatePartialSpecializationDecl" , py::base<clang::VarTemplateSpecializationDecl>())

        .def("getMostRecentDecl", (clang::VarTemplatePartialSpecializationDecl * (clang::VarTemplatePartialSpecializationDecl::*)())&clang::VarTemplatePartialSpecializationDecl::getMostRecentDecl , py::return_value_policy::reference_internal )
        //.def("getTemplateParameters", (clang::TemplateParameterList * (clang::VarTemplatePartialSpecializationDecl::*)() const)&clang::VarTemplatePartialSpecializationDecl::getTemplateParameters , py::return_value_policy::reference_internal )
        //.def("getTemplateArgsAsWritten", (const clang::ASTTemplateArgumentListInfo * (clang::VarTemplatePartialSpecializationDecl::*)() const)&clang::VarTemplatePartialSpecializationDecl::getTemplateArgsAsWritten , py::return_value_policy::reference_internal )
        .def("getInstantiatedFromMember", (clang::VarTemplatePartialSpecializationDecl * (clang::VarTemplatePartialSpecializationDecl::*)() const)&clang::VarTemplatePartialSpecializationDecl::getInstantiatedFromMember , py::return_value_policy::reference_internal )
        .def("setInstantiatedFromMember", (void (clang::VarTemplatePartialSpecializationDecl::*)(clang::VarTemplatePartialSpecializationDecl *))&clang::VarTemplatePartialSpecializationDecl::setInstantiatedFromMember  )
        .def("isMemberSpecialization", (bool (clang::VarTemplatePartialSpecializationDecl::*)())&clang::VarTemplatePartialSpecializationDecl::isMemberSpecialization  )
        .def("setMemberSpecialization", (void (clang::VarTemplatePartialSpecializationDecl::*)())&clang::VarTemplatePartialSpecializationDecl::setMemberSpecialization  )
    ;

    py::class_<clang::VarTemplateDecl, decl_deleter<clang::VarTemplateDecl>::type>(m, "VarTemplateDecl" , py::base<clang::RedeclarableTemplateDecl>())

        .def("LoadLazySpecializations", (void (clang::VarTemplateDecl::*)() const)&clang::VarTemplateDecl::LoadLazySpecializations  )
        .def("getTemplatedDecl", (clang::VarDecl * (clang::VarTemplateDecl::*)() const)&clang::VarTemplateDecl::getTemplatedDecl , py::return_value_policy::reference_internal )
        .def("isThisDeclarationADefinition", (bool (clang::VarTemplateDecl::*)() const)&clang::VarTemplateDecl::isThisDeclarationADefinition  )
        .def("getDefinition", (clang::VarTemplateDecl * (clang::VarTemplateDecl::*)())&clang::VarTemplateDecl::getDefinition , py::return_value_policy::reference_internal )
        //.def("AddSpecialization", (void (clang::VarTemplateDecl::*)(clang::VarTemplateSpecializationDecl *, void *))&clang::VarTemplateDecl::AddSpecialization  )
        .def("getCanonicalDecl", []( clang::VarTemplateDecl& self) -> clang::VarTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCanonicalDecl", [](const clang::VarTemplateDecl& self) -> const clang::VarTemplateDecl * {
         return self.getCanonicalDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", []( clang::VarTemplateDecl& self) -> clang::VarTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getPreviousDecl", [](const clang::VarTemplateDecl& self) -> const clang::VarTemplateDecl * {
         return self.getPreviousDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", []( clang::VarTemplateDecl& self) -> clang::VarTemplateDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getMostRecentDecl", [](const clang::VarTemplateDecl& self) -> const clang::VarTemplateDecl * {
         return self.getMostRecentDecl();
        } , py::return_value_policy::reference_internal)
        .def("getInstantiatedFromMemberTemplate", (clang::VarTemplateDecl * (clang::VarTemplateDecl::*)() const)&clang::VarTemplateDecl::getInstantiatedFromMemberTemplate , py::return_value_policy::reference_internal )
        //.def("AddPartialSpecialization", (void (clang::VarTemplateDecl::*)(clang::VarTemplatePartialSpecializationDecl *, void *))&clang::VarTemplateDecl::AddPartialSpecialization  )
        //.def("getPartialSpecializations", (void (clang::VarTemplateDecl::*)(llvm::SmallVectorImpl<clang::VarTemplatePartialSpecializationDecl *> &))&clang::VarTemplateDecl::getPartialSpecializations  )
        .def("findPartialSpecInstantiatedFromMember", (clang::VarTemplatePartialSpecializationDecl * (clang::VarTemplateDecl::*)(clang::VarTemplatePartialSpecializationDecl *))&clang::VarTemplateDecl::findPartialSpecInstantiatedFromMember , py::return_value_policy::reference_internal )
        //.def("specializations", (llvm::iterator_range<clang::RedeclarableTemplateDecl::SpecIterator<clang::VarTemplateSpecializationDecl, clang::RedeclarableTemplateDecl::SpecEntryTraits<clang::VarTemplateSpecializationDecl>, clang::VarTemplateSpecializationDecl> > (clang::VarTemplateDecl::*)() const)&clang::VarTemplateDecl::specializations  )
    ;

    py::class_<clang::CXXOperatorCallExpr, stmt_deleter<clang::CXXOperatorCallExpr>::type>(m, "CXXOperatorCallExpr" , py::base<clang::CallExpr>())

        .def("getOperator", (clang::OverloadedOperatorKind (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getOperator  )
        .def("isAssignmentOp", [](const clang::CXXOperatorCallExpr& self) -> bool {
         return self.isAssignmentOp();
        } )
        .def("isInfixBinaryOp", (bool (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::isInfixBinaryOp  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getOperatorLoc  )
        .def("getExprLoc", (clang::SourceLocation (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getExprLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getEndLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getSourceRange  )
        //.def("setFPFeatures", (void (clang::CXXOperatorCallExpr::*)(clang::FPOptions))&clang::CXXOperatorCallExpr::setFPFeatures  )
        //.def("getFPFeatures", (clang::FPOptions (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::getFPFeatures  )
        .def("isFPContractableWithinStatement", (bool (clang::CXXOperatorCallExpr::*)() const)&clang::CXXOperatorCallExpr::isFPContractableWithinStatement  )
    ;

    py::class_<clang::CXXMemberCallExpr, stmt_deleter<clang::CXXMemberCallExpr>::type>(m, "CXXMemberCallExpr" , py::base<clang::CallExpr>())

        .def("getImplicitObjectArgument", (clang::Expr * (clang::CXXMemberCallExpr::*)() const)&clang::CXXMemberCallExpr::getImplicitObjectArgument , py::return_value_policy::reference_internal )
        .def("getMethodDecl", (clang::CXXMethodDecl * (clang::CXXMemberCallExpr::*)() const)&clang::CXXMemberCallExpr::getMethodDecl , py::return_value_policy::reference_internal )
        .def("getRecordDecl", (clang::CXXRecordDecl * (clang::CXXMemberCallExpr::*)() const)&clang::CXXMemberCallExpr::getRecordDecl , py::return_value_policy::reference_internal )
        .def("getExprLoc", (clang::SourceLocation (clang::CXXMemberCallExpr::*)() const)&clang::CXXMemberCallExpr::getExprLoc  )
    ;

    py::class_<clang::CUDAKernelCallExpr, stmt_deleter<clang::CUDAKernelCallExpr>::type>(m, "CUDAKernelCallExpr" , py::base<clang::CallExpr>())

        .def("getConfig", [](const clang::CUDAKernelCallExpr& self) -> const clang::CallExpr * {
         return self.getConfig();
        } , py::return_value_policy::reference_internal)
        .def("getConfig", []( clang::CUDAKernelCallExpr& self) -> clang::CallExpr * {
         return self.getConfig();
        } , py::return_value_policy::reference_internal)
        .def("setConfig", (void (clang::CUDAKernelCallExpr::*)(clang::CallExpr *))&clang::CUDAKernelCallExpr::setConfig  )
    ;

    py::class_<clang::CXXNamedCastExpr, stmt_deleter<clang::CXXNamedCastExpr>::type>(m, "CXXNamedCastExpr" , py::base<clang::ExplicitCastExpr>())

        .def("getCastName", (const char * (clang::CXXNamedCastExpr::*)() const)&clang::CXXNamedCastExpr::getCastName  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::CXXNamedCastExpr::*)() const)&clang::CXXNamedCastExpr::getOperatorLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::CXXNamedCastExpr::*)() const)&clang::CXXNamedCastExpr::getRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXNamedCastExpr::*)() const)&clang::CXXNamedCastExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXNamedCastExpr::*)() const)&clang::CXXNamedCastExpr::getEndLoc  )
        .def("getAngleBrackets", (clang::SourceRange (clang::CXXNamedCastExpr::*)() const)&clang::CXXNamedCastExpr::getAngleBrackets  )
    ;

    py::class_<clang::CXXStaticCastExpr, stmt_deleter<clang::CXXStaticCastExpr>::type>(m, "CXXStaticCastExpr" , py::base<clang::CXXNamedCastExpr>())

    ;

    py::class_<clang::CXXDynamicCastExpr, stmt_deleter<clang::CXXDynamicCastExpr>::type>(m, "CXXDynamicCastExpr" , py::base<clang::CXXNamedCastExpr>())

        .def("isAlwaysNull", (bool (clang::CXXDynamicCastExpr::*)() const)&clang::CXXDynamicCastExpr::isAlwaysNull  )
    ;

    py::class_<clang::CXXReinterpretCastExpr, stmt_deleter<clang::CXXReinterpretCastExpr>::type>(m, "CXXReinterpretCastExpr" , py::base<clang::CXXNamedCastExpr>())

    ;

    py::class_<clang::CXXConstCastExpr, stmt_deleter<clang::CXXConstCastExpr>::type>(m, "CXXConstCastExpr" , py::base<clang::CXXNamedCastExpr>())

    ;

    py::class_<clang::UserDefinedLiteral, stmt_deleter<clang::UserDefinedLiteral>::type>(m, "UserDefinedLiteral" , py::base<clang::CallExpr>())

        .def("getLiteralOperatorKind", (clang::UserDefinedLiteral::LiteralOperatorKind (clang::UserDefinedLiteral::*)() const)&clang::UserDefinedLiteral::getLiteralOperatorKind  )
        .def("getCookedLiteral", []( clang::UserDefinedLiteral& self) -> clang::Expr * {
         return self.getCookedLiteral();
        } , py::return_value_policy::reference_internal)
        .def("getCookedLiteral", [](const clang::UserDefinedLiteral& self) -> const clang::Expr * {
         return self.getCookedLiteral();
        } , py::return_value_policy::reference_internal)
        .def("getBeginLoc", (clang::SourceLocation (clang::UserDefinedLiteral::*)() const)&clang::UserDefinedLiteral::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::UserDefinedLiteral::*)() const)&clang::UserDefinedLiteral::getEndLoc  )
        .def("getUDSuffixLoc", (clang::SourceLocation (clang::UserDefinedLiteral::*)() const)&clang::UserDefinedLiteral::getUDSuffixLoc  )
        //.def("getUDSuffix", (const clang::IdentifierInfo * (clang::UserDefinedLiteral::*)() const)&clang::UserDefinedLiteral::getUDSuffix , py::return_value_policy::reference_internal )
    ;

    py::class_<clang::CXXBoolLiteralExpr, stmt_deleter<clang::CXXBoolLiteralExpr>::type>(m, "CXXBoolLiteralExpr" , py::base<clang::Expr>())

        .def("getValue", (bool (clang::CXXBoolLiteralExpr::*)() const)&clang::CXXBoolLiteralExpr::getValue  )
        .def("setValue", (void (clang::CXXBoolLiteralExpr::*)(bool))&clang::CXXBoolLiteralExpr::setValue  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXBoolLiteralExpr::*)() const)&clang::CXXBoolLiteralExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXBoolLiteralExpr::*)() const)&clang::CXXBoolLiteralExpr::getEndLoc  )
        .def("getLocation", (clang::SourceLocation (clang::CXXBoolLiteralExpr::*)() const)&clang::CXXBoolLiteralExpr::getLocation  )
        .def("setLocation", (void (clang::CXXBoolLiteralExpr::*)(clang::SourceLocation))&clang::CXXBoolLiteralExpr::setLocation  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXBoolLiteralExpr::*)())&clang::CXXBoolLiteralExpr::children  )
    ;

    py::class_<clang::CXXNullPtrLiteralExpr, stmt_deleter<clang::CXXNullPtrLiteralExpr>::type>(m, "CXXNullPtrLiteralExpr" , py::base<clang::Expr>())

        .def("getBeginLoc", (clang::SourceLocation (clang::CXXNullPtrLiteralExpr::*)() const)&clang::CXXNullPtrLiteralExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXNullPtrLiteralExpr::*)() const)&clang::CXXNullPtrLiteralExpr::getEndLoc  )
        .def("getLocation", (clang::SourceLocation (clang::CXXNullPtrLiteralExpr::*)() const)&clang::CXXNullPtrLiteralExpr::getLocation  )
        .def("setLocation", (void (clang::CXXNullPtrLiteralExpr::*)(clang::SourceLocation))&clang::CXXNullPtrLiteralExpr::setLocation  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXNullPtrLiteralExpr::*)())&clang::CXXNullPtrLiteralExpr::children  )
    ;

    py::class_<clang::CXXStdInitializerListExpr, stmt_deleter<clang::CXXStdInitializerListExpr>::type>(m, "CXXStdInitializerListExpr" , py::base<clang::Expr>())

        .def("getSubExpr", []( clang::CXXStdInitializerListExpr& self) -> clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getSubExpr", [](const clang::CXXStdInitializerListExpr& self) -> const clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXStdInitializerListExpr::*)() const)&clang::CXXStdInitializerListExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXStdInitializerListExpr::*)() const)&clang::CXXStdInitializerListExpr::getEndLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::CXXStdInitializerListExpr::*)() const)&clang::CXXStdInitializerListExpr::getSourceRange  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXStdInitializerListExpr::*)())&clang::CXXStdInitializerListExpr::children  )
    ;

    py::class_<clang::CXXTypeidExpr, stmt_deleter<clang::CXXTypeidExpr>::type>(m, "CXXTypeidExpr" , py::base<clang::Expr>())

        .def("isPotentiallyEvaluated", (bool (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::isPotentiallyEvaluated  )
        .def("isTypeOperand", (bool (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::isTypeOperand  )
        .def("getTypeOperand", (clang::QualType (clang::CXXTypeidExpr::*)(clang::ASTContext &) const)&clang::CXXTypeidExpr::getTypeOperand  )
        .def("getTypeOperandSourceInfo", (clang::TypeSourceInfo * (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::getTypeOperandSourceInfo , py::return_value_policy::reference_internal )
        .def("setTypeOperandSourceInfo", (void (clang::CXXTypeidExpr::*)(clang::TypeSourceInfo *))&clang::CXXTypeidExpr::setTypeOperandSourceInfo  )
        .def("getExprOperand", (clang::Expr * (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::getExprOperand , py::return_value_policy::reference_internal )
        .def("setExprOperand", (void (clang::CXXTypeidExpr::*)(clang::Expr *))&clang::CXXTypeidExpr::setExprOperand  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::getEndLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::CXXTypeidExpr::*)() const)&clang::CXXTypeidExpr::getSourceRange  )
        .def("setSourceRange", (void (clang::CXXTypeidExpr::*)(clang::SourceRange))&clang::CXXTypeidExpr::setSourceRange  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXTypeidExpr::*)())&clang::CXXTypeidExpr::children  )
    ;

    py::class_<clang::MSPropertyRefExpr, stmt_deleter<clang::MSPropertyRefExpr>::type>(m, "MSPropertyRefExpr" , py::base<clang::Expr>())

        .def("getSourceRange", (clang::SourceRange (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getSourceRange  )
        .def("isImplicitAccess", (bool (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::isImplicitAccess  )
        .def("getBeginLoc", (clang::SourceLocation (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::MSPropertyRefExpr::*)())&clang::MSPropertyRefExpr::children  )
        .def("getBaseExpr", (clang::Expr * (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getBaseExpr , py::return_value_policy::reference_internal )
        .def("getPropertyDecl", (clang::MSPropertyDecl * (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getPropertyDecl , py::return_value_policy::reference_internal )
        .def("isArrow", (bool (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::isArrow  )
        .def("getMemberLoc", (clang::SourceLocation (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getMemberLoc  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::MSPropertyRefExpr::*)() const)&clang::MSPropertyRefExpr::getQualifierLoc  )
    ;

    py::class_<clang::MSPropertySubscriptExpr, stmt_deleter<clang::MSPropertySubscriptExpr>::type>(m, "MSPropertySubscriptExpr" , py::base<clang::Expr>())

        .def("getBase", []( clang::MSPropertySubscriptExpr& self) -> clang::Expr * {
         return self.getBase();
        } , py::return_value_policy::reference_internal)
        .def("getBase", [](const clang::MSPropertySubscriptExpr& self) -> const clang::Expr * {
         return self.getBase();
        } , py::return_value_policy::reference_internal)
        .def("getIdx", []( clang::MSPropertySubscriptExpr& self) -> clang::Expr * {
         return self.getIdx();
        } , py::return_value_policy::reference_internal)
        .def("getIdx", [](const clang::MSPropertySubscriptExpr& self) -> const clang::Expr * {
         return self.getIdx();
        } , py::return_value_policy::reference_internal)
        .def("getBeginLoc", (clang::SourceLocation (clang::MSPropertySubscriptExpr::*)() const)&clang::MSPropertySubscriptExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::MSPropertySubscriptExpr::*)() const)&clang::MSPropertySubscriptExpr::getEndLoc  )
        .def("getRBracketLoc", (clang::SourceLocation (clang::MSPropertySubscriptExpr::*)() const)&clang::MSPropertySubscriptExpr::getRBracketLoc  )
        .def("setRBracketLoc", (void (clang::MSPropertySubscriptExpr::*)(clang::SourceLocation))&clang::MSPropertySubscriptExpr::setRBracketLoc  )
        .def("getExprLoc", (clang::SourceLocation (clang::MSPropertySubscriptExpr::*)() const)&clang::MSPropertySubscriptExpr::getExprLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::MSPropertySubscriptExpr::*)())&clang::MSPropertySubscriptExpr::children  )
    ;

    py::class_<clang::CXXUuidofExpr, stmt_deleter<clang::CXXUuidofExpr>::type>(m, "CXXUuidofExpr" , py::base<clang::Expr>())

        .def("isTypeOperand", (bool (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::isTypeOperand  )
        .def("getTypeOperand", (clang::QualType (clang::CXXUuidofExpr::*)(clang::ASTContext &) const)&clang::CXXUuidofExpr::getTypeOperand  )
        .def("getTypeOperandSourceInfo", (clang::TypeSourceInfo * (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::getTypeOperandSourceInfo , py::return_value_policy::reference_internal )
        .def("setTypeOperandSourceInfo", (void (clang::CXXUuidofExpr::*)(clang::TypeSourceInfo *))&clang::CXXUuidofExpr::setTypeOperandSourceInfo  )
        .def("getExprOperand", (clang::Expr * (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::getExprOperand , py::return_value_policy::reference_internal )
        .def("setExprOperand", (void (clang::CXXUuidofExpr::*)(clang::Expr *))&clang::CXXUuidofExpr::setExprOperand  )
        .def("setUuidStr", (void (clang::CXXUuidofExpr::*)(llvm::StringRef))&clang::CXXUuidofExpr::setUuidStr  )
        .def("getUuidStr", (llvm::StringRef (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::getUuidStr  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::getEndLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::CXXUuidofExpr::*)() const)&clang::CXXUuidofExpr::getSourceRange  )
        .def("setSourceRange", (void (clang::CXXUuidofExpr::*)(clang::SourceRange))&clang::CXXUuidofExpr::setSourceRange  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXUuidofExpr::*)())&clang::CXXUuidofExpr::children  )
    ;

    py::class_<clang::CXXThisExpr, stmt_deleter<clang::CXXThisExpr>::type>(m, "CXXThisExpr" , py::base<clang::Expr>())

        .def("getLocation", (clang::SourceLocation (clang::CXXThisExpr::*)() const)&clang::CXXThisExpr::getLocation  )
        .def("setLocation", (void (clang::CXXThisExpr::*)(clang::SourceLocation))&clang::CXXThisExpr::setLocation  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXThisExpr::*)() const)&clang::CXXThisExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXThisExpr::*)() const)&clang::CXXThisExpr::getEndLoc  )
        .def("isImplicit", (bool (clang::CXXThisExpr::*)() const)&clang::CXXThisExpr::isImplicit  )
        .def("setImplicit", (void (clang::CXXThisExpr::*)(bool))&clang::CXXThisExpr::setImplicit  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXThisExpr::*)())&clang::CXXThisExpr::children  )
    ;

    py::class_<clang::CXXThrowExpr, stmt_deleter<clang::CXXThrowExpr>::type>(m, "CXXThrowExpr" , py::base<clang::Expr>())

        .def("getSubExpr", [](const clang::CXXThrowExpr& self) -> const clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getSubExpr", []( clang::CXXThrowExpr& self) -> clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getThrowLoc", (clang::SourceLocation (clang::CXXThrowExpr::*)() const)&clang::CXXThrowExpr::getThrowLoc  )
        .def("isThrownVariableInScope", (bool (clang::CXXThrowExpr::*)() const)&clang::CXXThrowExpr::isThrownVariableInScope  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXThrowExpr::*)() const)&clang::CXXThrowExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXThrowExpr::*)() const)&clang::CXXThrowExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXThrowExpr::*)())&clang::CXXThrowExpr::children  )
    ;

    py::class_<clang::CXXDefaultArgExpr, stmt_deleter<clang::CXXDefaultArgExpr>::type>(m, "CXXDefaultArgExpr" , py::base<clang::Expr>())

        .def("getParam", [](const clang::CXXDefaultArgExpr& self) -> const clang::ParmVarDecl * {
         return self.getParam();
        } , py::return_value_policy::reference_internal)
        .def("getParam", []( clang::CXXDefaultArgExpr& self) -> clang::ParmVarDecl * {
         return self.getParam();
        } , py::return_value_policy::reference_internal)
        .def("getExpr", [](const clang::CXXDefaultArgExpr& self) -> const clang::Expr * {
         return self.getExpr();
        } , py::return_value_policy::reference_internal)
        .def("getExpr", []( clang::CXXDefaultArgExpr& self) -> clang::Expr * {
         return self.getExpr();
        } , py::return_value_policy::reference_internal)
        .def("getUsedLocation", (clang::SourceLocation (clang::CXXDefaultArgExpr::*)() const)&clang::CXXDefaultArgExpr::getUsedLocation  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXDefaultArgExpr::*)() const)&clang::CXXDefaultArgExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXDefaultArgExpr::*)() const)&clang::CXXDefaultArgExpr::getEndLoc  )
        .def("getExprLoc", (clang::SourceLocation (clang::CXXDefaultArgExpr::*)() const)&clang::CXXDefaultArgExpr::getExprLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXDefaultArgExpr::*)())&clang::CXXDefaultArgExpr::children  )
    ;

    py::class_<clang::CXXDefaultInitExpr, stmt_deleter<clang::CXXDefaultInitExpr>::type>(m, "CXXDefaultInitExpr" , py::base<clang::Expr>())

        .def("getField", []( clang::CXXDefaultInitExpr& self) -> clang::FieldDecl * {
         return self.getField();
        } , py::return_value_policy::reference_internal)
        .def("getField", [](const clang::CXXDefaultInitExpr& self) -> const clang::FieldDecl * {
         return self.getField();
        } , py::return_value_policy::reference_internal)
        .def("getExpr", [](const clang::CXXDefaultInitExpr& self) -> const clang::Expr * {
         return self.getExpr();
        } , py::return_value_policy::reference_internal)
        .def("getExpr", []( clang::CXXDefaultInitExpr& self) -> clang::Expr * {
         return self.getExpr();
        } , py::return_value_policy::reference_internal)
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXDefaultInitExpr::*)() const)&clang::CXXDefaultInitExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXDefaultInitExpr::*)() const)&clang::CXXDefaultInitExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXDefaultInitExpr::*)())&clang::CXXDefaultInitExpr::children  )
    ;

    py::class_<clang::CXXBindTemporaryExpr, stmt_deleter<clang::CXXBindTemporaryExpr>::type>(m, "CXXBindTemporaryExpr" , py::base<clang::Expr>())

        //.def("getTemporary", (clang::CXXTemporary * (clang::CXXBindTemporaryExpr::*)())&clang::CXXBindTemporaryExpr::getTemporary , py::return_value_policy::reference_internal )
        //.def("getTemporary", (const clang::CXXTemporary * (clang::CXXBindTemporaryExpr::*)() const)&clang::CXXBindTemporaryExpr::getTemporary , py::return_value_policy::reference_internal )
        //.def("setTemporary", (void (clang::CXXBindTemporaryExpr::*)(clang::CXXTemporary *))&clang::CXXBindTemporaryExpr::setTemporary  )
        .def("getSubExpr", [](const clang::CXXBindTemporaryExpr& self) -> const clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getSubExpr", []( clang::CXXBindTemporaryExpr& self) -> clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("setSubExpr", (void (clang::CXXBindTemporaryExpr::*)(clang::Expr *))&clang::CXXBindTemporaryExpr::setSubExpr  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXBindTemporaryExpr::*)() const)&clang::CXXBindTemporaryExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXBindTemporaryExpr::*)() const)&clang::CXXBindTemporaryExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXBindTemporaryExpr::*)())&clang::CXXBindTemporaryExpr::children  )
    ;

    py::class_<clang::CXXConstructExpr, stmt_deleter<clang::CXXConstructExpr>::type>(m, "CXXConstructExpr" , py::base<clang::Expr>())

        .def("getConstructor", (clang::CXXConstructorDecl * (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getConstructor , py::return_value_policy::reference_internal )
        .def("getLocation", (clang::SourceLocation (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getLocation  )
        .def("setLocation", (void (clang::CXXConstructExpr::*)(clang::SourceLocation))&clang::CXXConstructExpr::setLocation  )
        .def("isElidable", (bool (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::isElidable  )
        .def("setElidable", (void (clang::CXXConstructExpr::*)(bool))&clang::CXXConstructExpr::setElidable  )
        .def("hadMultipleCandidates", (bool (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::hadMultipleCandidates  )
        .def("setHadMultipleCandidates", (void (clang::CXXConstructExpr::*)(bool))&clang::CXXConstructExpr::setHadMultipleCandidates  )
        .def("isListInitialization", (bool (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::isListInitialization  )
        .def("setListInitialization", (void (clang::CXXConstructExpr::*)(bool))&clang::CXXConstructExpr::setListInitialization  )
        .def("isStdInitListInitialization", (bool (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::isStdInitListInitialization  )
        .def("setStdInitListInitialization", (void (clang::CXXConstructExpr::*)(bool))&clang::CXXConstructExpr::setStdInitListInitialization  )
        .def("requiresZeroInitialization", (bool (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::requiresZeroInitialization  )
        .def("setRequiresZeroInitialization", (void (clang::CXXConstructExpr::*)(bool))&clang::CXXConstructExpr::setRequiresZeroInitialization  )
        .def("getConstructionKind", (clang::CXXConstructExpr::ConstructionKind (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getConstructionKind  )
        .def("setConstructionKind", (void (clang::CXXConstructExpr::*)(clang::CXXConstructExpr::ConstructionKind))&clang::CXXConstructExpr::setConstructionKind  )
        //.def("arguments", (llvm::iterator_range<clang::Stmt::ExprIterator> (clang::CXXConstructExpr::*)())&clang::CXXConstructExpr::arguments  )
        //.def("arguments", (llvm::iterator_range<clang::Stmt::ConstExprIterator> (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::arguments  )
        .def("getNumArgs", (unsigned int (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getNumArgs  )
        .def("getArg", []( clang::CXXConstructExpr& self, unsigned int Arg) -> clang::Expr * {
         return self.getArg(Arg);
        } , py::return_value_policy::reference_internal)
        .def("getArg", [](const clang::CXXConstructExpr& self, unsigned int Arg) -> const clang::Expr * {
         return self.getArg(Arg);
        } , py::return_value_policy::reference_internal)
        .def("setArg", (void (clang::CXXConstructExpr::*)(unsigned int, clang::Expr *))&clang::CXXConstructExpr::setArg  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getEndLoc  )
        .def("getParenOrBraceRange", (clang::SourceRange (clang::CXXConstructExpr::*)() const)&clang::CXXConstructExpr::getParenOrBraceRange  )
        .def("setParenOrBraceRange", (void (clang::CXXConstructExpr::*)(clang::SourceRange))&clang::CXXConstructExpr::setParenOrBraceRange  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXConstructExpr::*)())&clang::CXXConstructExpr::children  )
    ;

    py::class_<clang::CXXInheritedCtorInitExpr, stmt_deleter<clang::CXXInheritedCtorInitExpr>::type>(m, "CXXInheritedCtorInitExpr" , py::base<clang::Expr>())

        .def("getConstructor", (clang::CXXConstructorDecl * (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::getConstructor , py::return_value_policy::reference_internal )
        .def("constructsVBase", (bool (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::constructsVBase  )
        .def("getConstructionKind", (clang::CXXConstructExpr::ConstructionKind (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::getConstructionKind  )
        .def("inheritedFromVBase", (bool (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::inheritedFromVBase  )
        .def("getLocation", (clang::SourceLocation (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::getLocation  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXInheritedCtorInitExpr::*)() const)&clang::CXXInheritedCtorInitExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXInheritedCtorInitExpr::*)())&clang::CXXInheritedCtorInitExpr::children  )
    ;

    py::class_<clang::CXXFunctionalCastExpr, stmt_deleter<clang::CXXFunctionalCastExpr>::type>(m, "CXXFunctionalCastExpr" , py::base<clang::ExplicitCastExpr>())

        .def("getLParenLoc", (clang::SourceLocation (clang::CXXFunctionalCastExpr::*)() const)&clang::CXXFunctionalCastExpr::getLParenLoc  )
        .def("setLParenLoc", (void (clang::CXXFunctionalCastExpr::*)(clang::SourceLocation))&clang::CXXFunctionalCastExpr::setLParenLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::CXXFunctionalCastExpr::*)() const)&clang::CXXFunctionalCastExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::CXXFunctionalCastExpr::*)(clang::SourceLocation))&clang::CXXFunctionalCastExpr::setRParenLoc  )
        .def("isListInitialization", (bool (clang::CXXFunctionalCastExpr::*)() const)&clang::CXXFunctionalCastExpr::isListInitialization  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXFunctionalCastExpr::*)() const)&clang::CXXFunctionalCastExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXFunctionalCastExpr::*)() const)&clang::CXXFunctionalCastExpr::getEndLoc  )
    ;

    py::class_<clang::CXXTemporaryObjectExpr, stmt_deleter<clang::CXXTemporaryObjectExpr>::type>(m, "CXXTemporaryObjectExpr" , py::base<clang::CXXConstructExpr>())

        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::CXXTemporaryObjectExpr::*)() const)&clang::CXXTemporaryObjectExpr::getTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXTemporaryObjectExpr::*)() const)&clang::CXXTemporaryObjectExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXTemporaryObjectExpr::*)() const)&clang::CXXTemporaryObjectExpr::getEndLoc  )
    ;

    py::class_<clang::LambdaExpr, stmt_deleter<clang::LambdaExpr>::type>(m, "LambdaExpr" , py::base<clang::Expr>())

        .def("getCaptureDefault", (clang::LambdaCaptureDefault (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getCaptureDefault  )
        .def("getCaptureDefaultLoc", (clang::SourceLocation (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getCaptureDefaultLoc  )
        //.def("isInitCapture", (bool (clang::LambdaExpr::*)(const clang::LambdaCapture *) const)&clang::LambdaExpr::isInitCapture  )
        //.def("captures", (llvm::iterator_range<const clang::LambdaCapture *> (clang::LambdaExpr::*)() const)&clang::LambdaExpr::captures  )
        .def("capture_size", (unsigned int (clang::LambdaExpr::*)() const)&clang::LambdaExpr::capture_size  )
        //.def("explicit_captures", (llvm::iterator_range<const clang::LambdaCapture *> (clang::LambdaExpr::*)() const)&clang::LambdaExpr::explicit_captures  )
        //.def("implicit_captures", (llvm::iterator_range<const clang::LambdaCapture *> (clang::LambdaExpr::*)() const)&clang::LambdaExpr::implicit_captures  )
        //.def("capture_inits", (llvm::iterator_range<clang::Expr **> (clang::LambdaExpr::*)())&clang::LambdaExpr::capture_inits  )
        //.def("capture_inits", (llvm::iterator_range<clang::Expr *const *> (clang::LambdaExpr::*)() const)&clang::LambdaExpr::capture_inits  )
        .def("getIntroducerRange", (clang::SourceRange (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getIntroducerRange  )
        .def("getLambdaClass", (clang::CXXRecordDecl * (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getLambdaClass , py::return_value_policy::reference_internal )
        .def("getCallOperator", (clang::CXXMethodDecl * (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getCallOperator , py::return_value_policy::reference_internal )
        //.def("getTemplateParameterList", (clang::TemplateParameterList * (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getTemplateParameterList , py::return_value_policy::reference_internal )
        .def("isGenericLambda", (bool (clang::LambdaExpr::*)() const)&clang::LambdaExpr::isGenericLambda  )
        .def("getBody", (clang::CompoundStmt * (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getBody , py::return_value_policy::reference_internal )
        .def("isMutable", (bool (clang::LambdaExpr::*)() const)&clang::LambdaExpr::isMutable  )
        .def("hasExplicitParameters", (bool (clang::LambdaExpr::*)() const)&clang::LambdaExpr::hasExplicitParameters  )
        .def("hasExplicitResultType", (bool (clang::LambdaExpr::*)() const)&clang::LambdaExpr::hasExplicitResultType  )
        .def("getBeginLoc", (clang::SourceLocation (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::LambdaExpr::*)() const)&clang::LambdaExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::LambdaExpr::*)())&clang::LambdaExpr::children  )
    ;

    py::class_<clang::CXXScalarValueInitExpr, stmt_deleter<clang::CXXScalarValueInitExpr>::type>(m, "CXXScalarValueInitExpr" , py::base<clang::Expr>())

        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::CXXScalarValueInitExpr::*)() const)&clang::CXXScalarValueInitExpr::getTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("getRParenLoc", (clang::SourceLocation (clang::CXXScalarValueInitExpr::*)() const)&clang::CXXScalarValueInitExpr::getRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXScalarValueInitExpr::*)() const)&clang::CXXScalarValueInitExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXScalarValueInitExpr::*)() const)&clang::CXXScalarValueInitExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXScalarValueInitExpr::*)())&clang::CXXScalarValueInitExpr::children  )
    ;

    py::class_<clang::CXXNewExpr, stmt_deleter<clang::CXXNewExpr>::type>(m, "CXXNewExpr" , py::base<clang::Expr>())

        .def("getAllocatedType", (clang::QualType (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getAllocatedType  )
        .def("getAllocatedTypeSourceInfo", (clang::TypeSourceInfo * (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getAllocatedTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("shouldNullCheckAllocation", (bool (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::shouldNullCheckAllocation  )
        .def("getOperatorNew", (clang::FunctionDecl * (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getOperatorNew , py::return_value_policy::reference_internal )
        .def("setOperatorNew", (void (clang::CXXNewExpr::*)(clang::FunctionDecl *))&clang::CXXNewExpr::setOperatorNew  )
        .def("getOperatorDelete", (clang::FunctionDecl * (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getOperatorDelete , py::return_value_policy::reference_internal )
        .def("setOperatorDelete", (void (clang::CXXNewExpr::*)(clang::FunctionDecl *))&clang::CXXNewExpr::setOperatorDelete  )
        .def("isArray", (bool (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::isArray  )
        .def("getArraySize", []( clang::CXXNewExpr& self) -> clang::Expr * {
         return self.getArraySize();
        } , py::return_value_policy::reference_internal)
        .def("getArraySize", [](const clang::CXXNewExpr& self) -> const clang::Expr * {
         return self.getArraySize();
        } , py::return_value_policy::reference_internal)
        .def("getNumPlacementArgs", (unsigned int (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getNumPlacementArgs  )
        .def("getPlacementArg", []( clang::CXXNewExpr& self, unsigned int I) -> clang::Expr * {
         return self.getPlacementArg(I);
        } , py::return_value_policy::reference_internal)
        .def("getPlacementArg", [](const clang::CXXNewExpr& self, unsigned int I) -> const clang::Expr * {
         return self.getPlacementArg(I);
        } , py::return_value_policy::reference_internal)
        .def("isParenTypeId", (bool (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::isParenTypeId  )
        .def("getTypeIdParens", (clang::SourceRange (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getTypeIdParens  )
        .def("isGlobalNew", (bool (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::isGlobalNew  )
        .def("hasInitializer", (bool (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::hasInitializer  )
        .def("getInitializationStyle", (clang::CXXNewExpr::InitializationStyle (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getInitializationStyle  )
        .def("getInitializer", []( clang::CXXNewExpr& self) -> clang::Expr * {
         return self.getInitializer();
        } , py::return_value_policy::reference_internal)
        .def("getInitializer", [](const clang::CXXNewExpr& self) -> const clang::Expr * {
         return self.getInitializer();
        } , py::return_value_policy::reference_internal)
        .def("getConstructExpr", (const clang::CXXConstructExpr * (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getConstructExpr , py::return_value_policy::reference_internal )
        .def("passAlignment", (bool (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::passAlignment  )
        .def("doesUsualArrayDeleteWantSize", (bool (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::doesUsualArrayDeleteWantSize  )
        //.def("placement_arguments", (llvm::iterator_range<clang::Stmt::ExprIterator> (clang::CXXNewExpr::*)())&clang::CXXNewExpr::placement_arguments  )
        //.def("placement_arguments", (llvm::iterator_range<clang::Stmt::ConstExprIterator> (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::placement_arguments  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getEndLoc  )
        .def("getDirectInitRange", (clang::SourceRange (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getDirectInitRange  )
        .def("getSourceRange", (clang::SourceRange (clang::CXXNewExpr::*)() const)&clang::CXXNewExpr::getSourceRange  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXNewExpr::*)())&clang::CXXNewExpr::children  )
    ;

    py::class_<clang::CXXDeleteExpr, stmt_deleter<clang::CXXDeleteExpr>::type>(m, "CXXDeleteExpr" , py::base<clang::Expr>())

        .def("isGlobalDelete", (bool (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::isGlobalDelete  )
        .def("isArrayForm", (bool (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::isArrayForm  )
        .def("isArrayFormAsWritten", (bool (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::isArrayFormAsWritten  )
        .def("doesUsualArrayDeleteWantSize", (bool (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::doesUsualArrayDeleteWantSize  )
        .def("getOperatorDelete", (clang::FunctionDecl * (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::getOperatorDelete , py::return_value_policy::reference_internal )
        .def("getArgument", []( clang::CXXDeleteExpr& self) -> clang::Expr * {
         return self.getArgument();
        } , py::return_value_policy::reference_internal)
        .def("getArgument", [](const clang::CXXDeleteExpr& self) -> const clang::Expr * {
         return self.getArgument();
        } , py::return_value_policy::reference_internal)
        .def("getDestroyedType", (clang::QualType (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::getDestroyedType  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXDeleteExpr::*)() const)&clang::CXXDeleteExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXDeleteExpr::*)())&clang::CXXDeleteExpr::children  )
    ;

    py::class_<clang::CXXPseudoDestructorExpr, stmt_deleter<clang::CXXPseudoDestructorExpr>::type>(m, "CXXPseudoDestructorExpr" , py::base<clang::Expr>())

        .def("getBase", (clang::Expr * (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getBase , py::return_value_policy::reference_internal )
        .def("hasQualifier", (bool (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::hasQualifier  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getQualifier , py::return_value_policy::reference_internal )
        .def("isArrow", (bool (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::isArrow  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getOperatorLoc  )
        .def("getScopeTypeInfo", (clang::TypeSourceInfo * (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getScopeTypeInfo , py::return_value_policy::reference_internal )
        .def("getColonColonLoc", (clang::SourceLocation (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getColonColonLoc  )
        .def("getTildeLoc", (clang::SourceLocation (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getTildeLoc  )
        .def("getDestroyedTypeInfo", (clang::TypeSourceInfo * (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getDestroyedTypeInfo , py::return_value_policy::reference_internal )
        //.def("getDestroyedTypeIdentifier", (clang::IdentifierInfo * (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getDestroyedTypeIdentifier , py::return_value_policy::reference_internal )
        .def("getDestroyedType", (clang::QualType (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getDestroyedType  )
        .def("getDestroyedTypeLoc", (clang::SourceLocation (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getDestroyedTypeLoc  )
        //.def("setDestroyedType", (void (clang::CXXPseudoDestructorExpr::*)(clang::IdentifierInfo *, clang::SourceLocation))&clang::CXXPseudoDestructorExpr::setDestroyedType  )
        .def("setDestroyedType", []( clang::CXXPseudoDestructorExpr& self, clang::TypeSourceInfo * Info)  {
          self.setDestroyedType(Info);
        } )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXPseudoDestructorExpr::*)() const)&clang::CXXPseudoDestructorExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXPseudoDestructorExpr::*)())&clang::CXXPseudoDestructorExpr::children  )
    ;

    py::class_<clang::TypeTraitExpr, stmt_deleter<clang::TypeTraitExpr>::type>(m, "TypeTraitExpr" , py::base<clang::Expr>())

        .def("getTrait", (clang::TypeTrait (clang::TypeTraitExpr::*)() const)&clang::TypeTraitExpr::getTrait  )
        .def("getValue", (bool (clang::TypeTraitExpr::*)() const)&clang::TypeTraitExpr::getValue  )
        .def("getNumArgs", (unsigned int (clang::TypeTraitExpr::*)() const)&clang::TypeTraitExpr::getNumArgs  )
        .def("getArg", (clang::TypeSourceInfo * (clang::TypeTraitExpr::*)(unsigned int) const)&clang::TypeTraitExpr::getArg , py::return_value_policy::reference_internal )
        //.def("getArgs", (llvm::ArrayRef<clang::TypeSourceInfo *> (clang::TypeTraitExpr::*)() const)&clang::TypeTraitExpr::getArgs  )
        .def("getBeginLoc", (clang::SourceLocation (clang::TypeTraitExpr::*)() const)&clang::TypeTraitExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::TypeTraitExpr::*)() const)&clang::TypeTraitExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::TypeTraitExpr::*)())&clang::TypeTraitExpr::children  )
    ;

    py::class_<clang::ArrayTypeTraitExpr, stmt_deleter<clang::ArrayTypeTraitExpr>::type>(m, "ArrayTypeTraitExpr" , py::base<clang::Expr>())

        .def("getBeginLoc", (clang::SourceLocation (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getEndLoc  )
        .def("getTrait", (clang::ArrayTypeTrait (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getTrait  )
        .def("getQueriedType", (clang::QualType (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getQueriedType  )
        .def("getQueriedTypeSourceInfo", (clang::TypeSourceInfo * (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getQueriedTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("getValue", (unsigned long (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getValue  )
        .def("getDimensionExpression", (clang::Expr * (clang::ArrayTypeTraitExpr::*)() const)&clang::ArrayTypeTraitExpr::getDimensionExpression , py::return_value_policy::reference_internal )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ArrayTypeTraitExpr::*)())&clang::ArrayTypeTraitExpr::children  )
    ;

    py::class_<clang::ExpressionTraitExpr, stmt_deleter<clang::ExpressionTraitExpr>::type>(m, "ExpressionTraitExpr" , py::base<clang::Expr>())

        .def("getBeginLoc", (clang::SourceLocation (clang::ExpressionTraitExpr::*)() const)&clang::ExpressionTraitExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ExpressionTraitExpr::*)() const)&clang::ExpressionTraitExpr::getEndLoc  )
        .def("getTrait", (clang::ExpressionTrait (clang::ExpressionTraitExpr::*)() const)&clang::ExpressionTraitExpr::getTrait  )
        .def("getQueriedExpression", (clang::Expr * (clang::ExpressionTraitExpr::*)() const)&clang::ExpressionTraitExpr::getQueriedExpression , py::return_value_policy::reference_internal )
        .def("getValue", (bool (clang::ExpressionTraitExpr::*)() const)&clang::ExpressionTraitExpr::getValue  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ExpressionTraitExpr::*)())&clang::ExpressionTraitExpr::children  )
    ;

    py::class_<clang::OverloadExpr, stmt_deleter<clang::OverloadExpr>::type>(m, "OverloadExpr" , py::base<clang::Expr>())

        .def("getNamingClass", []( clang::OverloadExpr& self) -> clang::CXXRecordDecl * {
         return self.getNamingClass();
        } , py::return_value_policy::reference_internal)
        .def("getNamingClass", [](const clang::OverloadExpr& self) -> const clang::CXXRecordDecl * {
         return self.getNamingClass();
        } , py::return_value_policy::reference_internal)
        //.def("decls", (llvm::iterator_range<clang::UnresolvedSetIterator> (clang::OverloadExpr::*)() const)&clang::OverloadExpr::decls  )
        .def("getNumDecls", (unsigned int (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getNumDecls  )
        .def("getNameInfo", (const clang::DeclarationNameInfo & (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getNameInfo  )
        .def("getName", (clang::DeclarationName (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getName  )
        .def("getNameLoc", (clang::SourceLocation (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getNameLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getQualifier , py::return_value_policy::reference_internal )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getQualifierLoc  )
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getTemplateKeywordLoc  )
        .def("getLAngleLoc", (clang::SourceLocation (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getLAngleLoc  )
        .def("getRAngleLoc", (clang::SourceLocation (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getRAngleLoc  )
        .def("hasTemplateKeyword", (bool (clang::OverloadExpr::*)() const)&clang::OverloadExpr::hasTemplateKeyword  )
        .def("hasExplicitTemplateArgs", (bool (clang::OverloadExpr::*)() const)&clang::OverloadExpr::hasExplicitTemplateArgs  )
        //.def("getTemplateArgs", (const clang::TemplateArgumentLoc * (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getTemplateArgs , py::return_value_policy::reference_internal )
        .def("getNumTemplateArgs", (unsigned int (clang::OverloadExpr::*)() const)&clang::OverloadExpr::getNumTemplateArgs  )
        //.def("template_arguments", (llvm::ArrayRef<clang::TemplateArgumentLoc> (clang::OverloadExpr::*)() const)&clang::OverloadExpr::template_arguments  )
        //.def("copyTemplateArgumentsInto", (void (clang::OverloadExpr::*)(clang::TemplateArgumentListInfo &) const)&clang::OverloadExpr::copyTemplateArgumentsInto  )
    ;

    py::class_<clang::UnresolvedLookupExpr, stmt_deleter<clang::UnresolvedLookupExpr>::type>(m, "UnresolvedLookupExpr" , py::base<clang::OverloadExpr>())

        .def("requiresADL", (bool (clang::UnresolvedLookupExpr::*)() const)&clang::UnresolvedLookupExpr::requiresADL  )
        .def("isOverloaded", (bool (clang::UnresolvedLookupExpr::*)() const)&clang::UnresolvedLookupExpr::isOverloaded  )
        .def("getNamingClass", []( clang::UnresolvedLookupExpr& self) -> clang::CXXRecordDecl * {
         return self.getNamingClass();
        } , py::return_value_policy::reference_internal)
        .def("getNamingClass", [](const clang::UnresolvedLookupExpr& self) -> const clang::CXXRecordDecl * {
         return self.getNamingClass();
        } , py::return_value_policy::reference_internal)
        .def("getBeginLoc", (clang::SourceLocation (clang::UnresolvedLookupExpr::*)() const)&clang::UnresolvedLookupExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::UnresolvedLookupExpr::*)() const)&clang::UnresolvedLookupExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::UnresolvedLookupExpr::*)())&clang::UnresolvedLookupExpr::children  )
    ;

    py::class_<clang::DependentScopeDeclRefExpr, stmt_deleter<clang::DependentScopeDeclRefExpr>::type>(m, "DependentScopeDeclRefExpr" , py::base<clang::Expr>())

        .def("getNameInfo", (const clang::DeclarationNameInfo & (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getNameInfo  )
        .def("getDeclName", (clang::DeclarationName (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getDeclName  )
        .def("getLocation", (clang::SourceLocation (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getLocation  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getQualifier , py::return_value_policy::reference_internal )
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getTemplateKeywordLoc  )
        .def("getLAngleLoc", (clang::SourceLocation (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getLAngleLoc  )
        .def("getRAngleLoc", (clang::SourceLocation (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getRAngleLoc  )
        .def("hasTemplateKeyword", (bool (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::hasTemplateKeyword  )
        .def("hasExplicitTemplateArgs", (bool (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::hasExplicitTemplateArgs  )
        //.def("copyTemplateArgumentsInto", (void (clang::DependentScopeDeclRefExpr::*)(clang::TemplateArgumentListInfo &) const)&clang::DependentScopeDeclRefExpr::copyTemplateArgumentsInto  )
        //.def("getTemplateArgs", (const clang::TemplateArgumentLoc * (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getTemplateArgs , py::return_value_policy::reference_internal )
        .def("getNumTemplateArgs", (unsigned int (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getNumTemplateArgs  )
        //.def("template_arguments", (llvm::ArrayRef<clang::TemplateArgumentLoc> (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::template_arguments  )
        .def("getBeginLoc", (clang::SourceLocation (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::DependentScopeDeclRefExpr::*)() const)&clang::DependentScopeDeclRefExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DependentScopeDeclRefExpr::*)())&clang::DependentScopeDeclRefExpr::children  )
    ;

    py::class_<clang::ExprWithCleanups, stmt_deleter<clang::ExprWithCleanups>::type>(m, "ExprWithCleanups" , py::base<clang::FullExpr>())

        //.def("getObjects", (llvm::ArrayRef<clang::BlockDecl *> (clang::ExprWithCleanups::*)() const)&clang::ExprWithCleanups::getObjects  )
        .def("getNumObjects", (unsigned int (clang::ExprWithCleanups::*)() const)&clang::ExprWithCleanups::getNumObjects  )
        .def("getObject", (clang::BlockDecl * (clang::ExprWithCleanups::*)(unsigned int) const)&clang::ExprWithCleanups::getObject  )
        .def("cleanupsHaveSideEffects", (bool (clang::ExprWithCleanups::*)() const)&clang::ExprWithCleanups::cleanupsHaveSideEffects  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ExprWithCleanups::*)() const)&clang::ExprWithCleanups::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ExprWithCleanups::*)() const)&clang::ExprWithCleanups::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ExprWithCleanups::*)())&clang::ExprWithCleanups::children  )
    ;

    py::class_<clang::CXXUnresolvedConstructExpr, stmt_deleter<clang::CXXUnresolvedConstructExpr>::type>(m, "CXXUnresolvedConstructExpr" , py::base<clang::Expr>())

        .def("getTypeAsWritten", (clang::QualType (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::getTypeAsWritten  )
        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::getTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("getLParenLoc", (clang::SourceLocation (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::getLParenLoc  )
        .def("setLParenLoc", (void (clang::CXXUnresolvedConstructExpr::*)(clang::SourceLocation))&clang::CXXUnresolvedConstructExpr::setLParenLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::CXXUnresolvedConstructExpr::*)(clang::SourceLocation))&clang::CXXUnresolvedConstructExpr::setRParenLoc  )
        .def("isListInitialization", (bool (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::isListInitialization  )
        .def("arg_size", (unsigned int (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::arg_size  )
        //.def("arguments", (llvm::iterator_range<clang::Expr **> (clang::CXXUnresolvedConstructExpr::*)())&clang::CXXUnresolvedConstructExpr::arguments  )
        //.def("arguments", (llvm::iterator_range<const clang::Expr *const *> (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::arguments  )
        .def("getArg", []( clang::CXXUnresolvedConstructExpr& self, unsigned int I) -> clang::Expr * {
         return self.getArg(I);
        } , py::return_value_policy::reference_internal)
        .def("getArg", [](const clang::CXXUnresolvedConstructExpr& self, unsigned int I) -> const clang::Expr * {
         return self.getArg(I);
        } , py::return_value_policy::reference_internal)
        .def("setArg", (void (clang::CXXUnresolvedConstructExpr::*)(unsigned int, clang::Expr *))&clang::CXXUnresolvedConstructExpr::setArg  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXUnresolvedConstructExpr::*)() const)&clang::CXXUnresolvedConstructExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXUnresolvedConstructExpr::*)())&clang::CXXUnresolvedConstructExpr::children  )
    ;

    py::class_<clang::CXXDependentScopeMemberExpr, stmt_deleter<clang::CXXDependentScopeMemberExpr>::type>(m, "CXXDependentScopeMemberExpr" , py::base<clang::Expr>())

        .def("isImplicitAccess", (bool (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::isImplicitAccess  )
        .def("getBase", (clang::Expr * (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getBase , py::return_value_policy::reference_internal )
        .def("getBaseType", (clang::QualType (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getBaseType  )
        .def("isArrow", (bool (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::isArrow  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getOperatorLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getQualifier , py::return_value_policy::reference_internal )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getQualifierLoc  )
        .def("getFirstQualifierFoundInScope", (clang::NamedDecl * (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getFirstQualifierFoundInScope , py::return_value_policy::reference_internal )
        .def("getMemberNameInfo", (const clang::DeclarationNameInfo & (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getMemberNameInfo  )
        .def("getMember", (clang::DeclarationName (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getMember  )
        .def("getMemberLoc", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getMemberLoc  )
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getTemplateKeywordLoc  )
        .def("getLAngleLoc", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getLAngleLoc  )
        .def("getRAngleLoc", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getRAngleLoc  )
        .def("hasTemplateKeyword", (bool (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::hasTemplateKeyword  )
        .def("hasExplicitTemplateArgs", (bool (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::hasExplicitTemplateArgs  )
        //.def("copyTemplateArgumentsInto", (void (clang::CXXDependentScopeMemberExpr::*)(clang::TemplateArgumentListInfo &) const)&clang::CXXDependentScopeMemberExpr::copyTemplateArgumentsInto  )
        //.def("getTemplateArgs", (const clang::TemplateArgumentLoc * (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getTemplateArgs , py::return_value_policy::reference_internal )
        .def("getNumTemplateArgs", (unsigned int (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getNumTemplateArgs  )
        //.def("template_arguments", (llvm::ArrayRef<clang::TemplateArgumentLoc> (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::template_arguments  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXDependentScopeMemberExpr::*)() const)&clang::CXXDependentScopeMemberExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXDependentScopeMemberExpr::*)())&clang::CXXDependentScopeMemberExpr::children  )
    ;

    py::class_<clang::UnresolvedMemberExpr, stmt_deleter<clang::UnresolvedMemberExpr>::type>(m, "UnresolvedMemberExpr" , py::base<clang::OverloadExpr>())

        .def("isImplicitAccess", (bool (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::isImplicitAccess  )
        .def("getBase", []( clang::UnresolvedMemberExpr& self) -> clang::Expr * {
         return self.getBase();
        } , py::return_value_policy::reference_internal)
        .def("getBase", [](const clang::UnresolvedMemberExpr& self) -> const clang::Expr * {
         return self.getBase();
        } , py::return_value_policy::reference_internal)
        .def("getBaseType", (clang::QualType (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getBaseType  )
        .def("hasUnresolvedUsing", (bool (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::hasUnresolvedUsing  )
        .def("isArrow", (bool (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::isArrow  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getOperatorLoc  )
        .def("getNamingClass", []( clang::UnresolvedMemberExpr& self) -> clang::CXXRecordDecl * {
         return self.getNamingClass();
        } , py::return_value_policy::reference_internal)
        .def("getNamingClass", [](const clang::UnresolvedMemberExpr& self) -> const clang::CXXRecordDecl * {
         return self.getNamingClass();
        } , py::return_value_policy::reference_internal)
        .def("getMemberNameInfo", (const clang::DeclarationNameInfo & (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getMemberNameInfo  )
        .def("getMemberName", (clang::DeclarationName (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getMemberName  )
        .def("getMemberLoc", (clang::SourceLocation (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getMemberLoc  )
        .def("getExprLoc", (clang::SourceLocation (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getExprLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::UnresolvedMemberExpr::*)() const)&clang::UnresolvedMemberExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::UnresolvedMemberExpr::*)())&clang::UnresolvedMemberExpr::children  )
    ;

    py::class_<clang::CXXNoexceptExpr, stmt_deleter<clang::CXXNoexceptExpr>::type>(m, "CXXNoexceptExpr" , py::base<clang::Expr>())

        .def("getOperand", (clang::Expr * (clang::CXXNoexceptExpr::*)() const)&clang::CXXNoexceptExpr::getOperand , py::return_value_policy::reference_internal )
        .def("getBeginLoc", (clang::SourceLocation (clang::CXXNoexceptExpr::*)() const)&clang::CXXNoexceptExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CXXNoexceptExpr::*)() const)&clang::CXXNoexceptExpr::getEndLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::CXXNoexceptExpr::*)() const)&clang::CXXNoexceptExpr::getSourceRange  )
        .def("getValue", (bool (clang::CXXNoexceptExpr::*)() const)&clang::CXXNoexceptExpr::getValue  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CXXNoexceptExpr::*)())&clang::CXXNoexceptExpr::children  )
    ;

    py::class_<clang::PackExpansionExpr, stmt_deleter<clang::PackExpansionExpr>::type>(m, "PackExpansionExpr" , py::base<clang::Expr>())

        .def("getPattern", []( clang::PackExpansionExpr& self) -> clang::Expr * {
         return self.getPattern();
        } , py::return_value_policy::reference_internal)
        .def("getPattern", [](const clang::PackExpansionExpr& self) -> const clang::Expr * {
         return self.getPattern();
        } , py::return_value_policy::reference_internal)
        .def("getEllipsisLoc", (clang::SourceLocation (clang::PackExpansionExpr::*)() const)&clang::PackExpansionExpr::getEllipsisLoc  )
        //.def("getNumExpansions", (llvm::Optional<unsigned int> (clang::PackExpansionExpr::*)() const)&clang::PackExpansionExpr::getNumExpansions  )
        .def("getBeginLoc", (clang::SourceLocation (clang::PackExpansionExpr::*)() const)&clang::PackExpansionExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::PackExpansionExpr::*)() const)&clang::PackExpansionExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::PackExpansionExpr::*)())&clang::PackExpansionExpr::children  )
    ;

    py::class_<clang::SizeOfPackExpr, stmt_deleter<clang::SizeOfPackExpr>::type>(m, "SizeOfPackExpr" , py::base<clang::Expr>())

        .def("getOperatorLoc", (clang::SourceLocation (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getOperatorLoc  )
        .def("getPackLoc", (clang::SourceLocation (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getPackLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getRParenLoc  )
        .def("getPack", (clang::NamedDecl * (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getPack , py::return_value_policy::reference_internal )
        .def("getPackLength", (unsigned int (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getPackLength  )
        .def("isPartiallySubstituted", (bool (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::isPartiallySubstituted  )
        //.def("getPartialArguments", (llvm::ArrayRef<clang::TemplateArgument> (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getPartialArguments  )
        .def("getBeginLoc", (clang::SourceLocation (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::SizeOfPackExpr::*)() const)&clang::SizeOfPackExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SizeOfPackExpr::*)())&clang::SizeOfPackExpr::children  )
    ;

    py::class_<clang::SubstNonTypeTemplateParmExpr, stmt_deleter<clang::SubstNonTypeTemplateParmExpr>::type>(m, "SubstNonTypeTemplateParmExpr" , py::base<clang::Expr>())

        .def("getNameLoc", (clang::SourceLocation (clang::SubstNonTypeTemplateParmExpr::*)() const)&clang::SubstNonTypeTemplateParmExpr::getNameLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::SubstNonTypeTemplateParmExpr::*)() const)&clang::SubstNonTypeTemplateParmExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::SubstNonTypeTemplateParmExpr::*)() const)&clang::SubstNonTypeTemplateParmExpr::getEndLoc  )
        .def("getReplacement", (clang::Expr * (clang::SubstNonTypeTemplateParmExpr::*)() const)&clang::SubstNonTypeTemplateParmExpr::getReplacement , py::return_value_policy::reference_internal )
        .def("getParameter", (clang::NonTypeTemplateParmDecl * (clang::SubstNonTypeTemplateParmExpr::*)() const)&clang::SubstNonTypeTemplateParmExpr::getParameter , py::return_value_policy::reference_internal )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SubstNonTypeTemplateParmExpr::*)())&clang::SubstNonTypeTemplateParmExpr::children  )
    ;

    py::class_<clang::SubstNonTypeTemplateParmPackExpr, stmt_deleter<clang::SubstNonTypeTemplateParmPackExpr>::type>(m, "SubstNonTypeTemplateParmPackExpr" , py::base<clang::Expr>())

        .def("getParameterPack", (clang::NonTypeTemplateParmDecl * (clang::SubstNonTypeTemplateParmPackExpr::*)() const)&clang::SubstNonTypeTemplateParmPackExpr::getParameterPack , py::return_value_policy::reference_internal )
        .def("getParameterPackLocation", (clang::SourceLocation (clang::SubstNonTypeTemplateParmPackExpr::*)() const)&clang::SubstNonTypeTemplateParmPackExpr::getParameterPackLocation  )
        //.def("getArgumentPack", (clang::TemplateArgument (clang::SubstNonTypeTemplateParmPackExpr::*)() const)&clang::SubstNonTypeTemplateParmPackExpr::getArgumentPack  )
        .def("getBeginLoc", (clang::SourceLocation (clang::SubstNonTypeTemplateParmPackExpr::*)() const)&clang::SubstNonTypeTemplateParmPackExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::SubstNonTypeTemplateParmPackExpr::*)() const)&clang::SubstNonTypeTemplateParmPackExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SubstNonTypeTemplateParmPackExpr::*)())&clang::SubstNonTypeTemplateParmPackExpr::children  )
    ;
}
