
////////////////////////////////////////////////////////////////////////////////
// File autogenerated by clastgen
//  Clang - clang version 8.0.0 
//
// Warning. Changes made here will be overwritten.
////////////////////////////////////////////////////////////////////////////////
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "internal.h"

#include <clang/AST/AST.h>
#include <clang/ASTMatchers/ASTMatchers.h>
#include <clang/ASTMatchers/ASTMatchFinder.h>


namespace py = pybind11;

void autogenerated_classes_1(pybind11::module& m)
{

    py::class_<clang::SwitchStmt, stmt_deleter<clang::SwitchStmt>::type>(m, "SwitchStmt" , py::base<clang::Stmt>())

        .def("hasInitStorage", (bool (clang::SwitchStmt::*)() const)&clang::SwitchStmt::hasInitStorage  )
        .def("hasVarStorage", (bool (clang::SwitchStmt::*)() const)&clang::SwitchStmt::hasVarStorage  )
        .def("getCond", []( clang::SwitchStmt& self) -> clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getCond", [](const clang::SwitchStmt& self) -> const clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("setCond", (void (clang::SwitchStmt::*)(clang::Expr *))&clang::SwitchStmt::setCond  )
        .def("getBody", []( clang::SwitchStmt& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getBody", [](const clang::SwitchStmt& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("setBody", []( clang::SwitchStmt& self, clang::Stmt * Body)  {
          self.setBody(Body);
        } )
        .def("getInit", []( clang::SwitchStmt& self) -> clang::Stmt * {
         return self.getInit();
        } , py::return_value_policy::reference_internal)
        .def("getInit", [](const clang::SwitchStmt& self) -> const clang::Stmt * {
         return self.getInit();
        } , py::return_value_policy::reference_internal)
        .def("setInit", (void (clang::SwitchStmt::*)(clang::Stmt *))&clang::SwitchStmt::setInit  )
        .def("getConditionVariable", []( clang::SwitchStmt& self) -> clang::VarDecl * {
         return self.getConditionVariable();
        } , py::return_value_policy::reference_internal)
        .def("getConditionVariable", [](const clang::SwitchStmt& self) -> const clang::VarDecl * {
         return self.getConditionVariable();
        } , py::return_value_policy::reference_internal)
        .def("setConditionVariable", (void (clang::SwitchStmt::*)(const clang::ASTContext &, clang::VarDecl *))&clang::SwitchStmt::setConditionVariable  )
        .def("getConditionVariableDeclStmt", []( clang::SwitchStmt& self) -> clang::DeclStmt * {
         return self.getConditionVariableDeclStmt();
        } , py::return_value_policy::reference_internal)
        .def("getConditionVariableDeclStmt", [](const clang::SwitchStmt& self) -> const clang::DeclStmt * {
         return self.getConditionVariableDeclStmt();
        } , py::return_value_policy::reference_internal)
        .def("getSwitchCaseList", []( clang::SwitchStmt& self) -> clang::SwitchCase * {
         return self.getSwitchCaseList();
        } , py::return_value_policy::reference_internal)
        .def("getSwitchCaseList", [](const clang::SwitchStmt& self) -> const clang::SwitchCase * {
         return self.getSwitchCaseList();
        } , py::return_value_policy::reference_internal)
        .def("setSwitchCaseList", (void (clang::SwitchStmt::*)(clang::SwitchCase *))&clang::SwitchStmt::setSwitchCaseList  )
        .def("getSwitchLoc", (clang::SourceLocation (clang::SwitchStmt::*)() const)&clang::SwitchStmt::getSwitchLoc  )
        .def("setSwitchLoc", (void (clang::SwitchStmt::*)(clang::SourceLocation))&clang::SwitchStmt::setSwitchLoc  )
        .def("setBody", []( clang::SwitchStmt& self, clang::Stmt * S , clang::SourceLocation SL)  {
          self.setBody(S, SL);
        } )
        .def("addSwitchCase", (void (clang::SwitchStmt::*)(clang::SwitchCase *))&clang::SwitchStmt::addSwitchCase  )
        .def("setAllEnumCasesCovered", (void (clang::SwitchStmt::*)())&clang::SwitchStmt::setAllEnumCasesCovered  )
        .def("isAllEnumCasesCovered", (bool (clang::SwitchStmt::*)() const)&clang::SwitchStmt::isAllEnumCasesCovered  )
        .def("getBeginLoc", (clang::SourceLocation (clang::SwitchStmt::*)() const)&clang::SwitchStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::SwitchStmt::*)() const)&clang::SwitchStmt::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SwitchStmt::*)())&clang::SwitchStmt::children  )
    ;

    py::class_<clang::WhileStmt, stmt_deleter<clang::WhileStmt>::type>(m, "WhileStmt" , py::base<clang::Stmt>())

        .def("hasVarStorage", (bool (clang::WhileStmt::*)() const)&clang::WhileStmt::hasVarStorage  )
        .def("getCond", []( clang::WhileStmt& self) -> clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getCond", [](const clang::WhileStmt& self) -> const clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("setCond", (void (clang::WhileStmt::*)(clang::Expr *))&clang::WhileStmt::setCond  )
        .def("getBody", []( clang::WhileStmt& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getBody", [](const clang::WhileStmt& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("setBody", (void (clang::WhileStmt::*)(clang::Stmt *))&clang::WhileStmt::setBody  )
        .def("getConditionVariable", []( clang::WhileStmt& self) -> clang::VarDecl * {
         return self.getConditionVariable();
        } , py::return_value_policy::reference_internal)
        .def("getConditionVariable", [](const clang::WhileStmt& self) -> const clang::VarDecl * {
         return self.getConditionVariable();
        } , py::return_value_policy::reference_internal)
        .def("setConditionVariable", (void (clang::WhileStmt::*)(const clang::ASTContext &, clang::VarDecl *))&clang::WhileStmt::setConditionVariable  )
        .def("getConditionVariableDeclStmt", []( clang::WhileStmt& self) -> clang::DeclStmt * {
         return self.getConditionVariableDeclStmt();
        } , py::return_value_policy::reference_internal)
        .def("getConditionVariableDeclStmt", [](const clang::WhileStmt& self) -> const clang::DeclStmt * {
         return self.getConditionVariableDeclStmt();
        } , py::return_value_policy::reference_internal)
        .def("getWhileLoc", (clang::SourceLocation (clang::WhileStmt::*)() const)&clang::WhileStmt::getWhileLoc  )
        .def("setWhileLoc", (void (clang::WhileStmt::*)(clang::SourceLocation))&clang::WhileStmt::setWhileLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::WhileStmt::*)() const)&clang::WhileStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::WhileStmt::*)() const)&clang::WhileStmt::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::WhileStmt::*)())&clang::WhileStmt::children  )
    ;

    py::class_<clang::DoStmt, stmt_deleter<clang::DoStmt>::type>(m, "DoStmt" , py::base<clang::Stmt>())

        .def("getCond", []( clang::DoStmt& self) -> clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getCond", [](const clang::DoStmt& self) -> const clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("setCond", (void (clang::DoStmt::*)(clang::Expr *))&clang::DoStmt::setCond  )
        .def("getBody", []( clang::DoStmt& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getBody", [](const clang::DoStmt& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("setBody", (void (clang::DoStmt::*)(clang::Stmt *))&clang::DoStmt::setBody  )
        .def("getDoLoc", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getDoLoc  )
        .def("setDoLoc", (void (clang::DoStmt::*)(clang::SourceLocation))&clang::DoStmt::setDoLoc  )
        .def("getWhileLoc", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getWhileLoc  )
        .def("setWhileLoc", (void (clang::DoStmt::*)(clang::SourceLocation))&clang::DoStmt::setWhileLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getRParenLoc  )
        .def("setRParenLoc", (void (clang::DoStmt::*)(clang::SourceLocation))&clang::DoStmt::setRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::DoStmt::*)() const)&clang::DoStmt::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DoStmt::*)())&clang::DoStmt::children  )
    ;

    py::class_<clang::ForStmt, stmt_deleter<clang::ForStmt>::type>(m, "ForStmt" , py::base<clang::Stmt>())

        .def("getInit", []( clang::ForStmt& self) -> clang::Stmt * {
         return self.getInit();
        } , py::return_value_policy::reference_internal)
        .def("getConditionVariable", (clang::VarDecl * (clang::ForStmt::*)() const)&clang::ForStmt::getConditionVariable , py::return_value_policy::reference_internal )
        .def("setConditionVariable", (void (clang::ForStmt::*)(const clang::ASTContext &, clang::VarDecl *))&clang::ForStmt::setConditionVariable  )
        .def("getConditionVariableDeclStmt", (const clang::DeclStmt * (clang::ForStmt::*)() const)&clang::ForStmt::getConditionVariableDeclStmt , py::return_value_policy::reference_internal )
        .def("getCond", []( clang::ForStmt& self) -> clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getInc", []( clang::ForStmt& self) -> clang::Expr * {
         return self.getInc();
        } , py::return_value_policy::reference_internal)
        .def("getBody", []( clang::ForStmt& self) -> clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("getInit", [](const clang::ForStmt& self) -> const clang::Stmt * {
         return self.getInit();
        } , py::return_value_policy::reference_internal)
        .def("getCond", [](const clang::ForStmt& self) -> const clang::Expr * {
         return self.getCond();
        } , py::return_value_policy::reference_internal)
        .def("getInc", [](const clang::ForStmt& self) -> const clang::Expr * {
         return self.getInc();
        } , py::return_value_policy::reference_internal)
        .def("getBody", [](const clang::ForStmt& self) -> const clang::Stmt * {
         return self.getBody();
        } , py::return_value_policy::reference_internal)
        .def("setInit", (void (clang::ForStmt::*)(clang::Stmt *))&clang::ForStmt::setInit  )
        .def("setCond", (void (clang::ForStmt::*)(clang::Expr *))&clang::ForStmt::setCond  )
        .def("setInc", (void (clang::ForStmt::*)(clang::Expr *))&clang::ForStmt::setInc  )
        .def("setBody", (void (clang::ForStmt::*)(clang::Stmt *))&clang::ForStmt::setBody  )
        .def("getForLoc", (clang::SourceLocation (clang::ForStmt::*)() const)&clang::ForStmt::getForLoc  )
        .def("setForLoc", (void (clang::ForStmt::*)(clang::SourceLocation))&clang::ForStmt::setForLoc  )
        .def("getLParenLoc", (clang::SourceLocation (clang::ForStmt::*)() const)&clang::ForStmt::getLParenLoc  )
        .def("setLParenLoc", (void (clang::ForStmt::*)(clang::SourceLocation))&clang::ForStmt::setLParenLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::ForStmt::*)() const)&clang::ForStmt::getRParenLoc  )
        .def("setRParenLoc", (void (clang::ForStmt::*)(clang::SourceLocation))&clang::ForStmt::setRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ForStmt::*)() const)&clang::ForStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ForStmt::*)() const)&clang::ForStmt::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ForStmt::*)())&clang::ForStmt::children  )
    ;

    py::class_<clang::GotoStmt, stmt_deleter<clang::GotoStmt>::type>(m, "GotoStmt" , py::base<clang::Stmt>())

        .def("getLabel", (clang::LabelDecl * (clang::GotoStmt::*)() const)&clang::GotoStmt::getLabel , py::return_value_policy::reference_internal )
        .def("setLabel", (void (clang::GotoStmt::*)(clang::LabelDecl *))&clang::GotoStmt::setLabel  )
        .def("getGotoLoc", (clang::SourceLocation (clang::GotoStmt::*)() const)&clang::GotoStmt::getGotoLoc  )
        .def("setGotoLoc", (void (clang::GotoStmt::*)(clang::SourceLocation))&clang::GotoStmt::setGotoLoc  )
        .def("getLabelLoc", (clang::SourceLocation (clang::GotoStmt::*)() const)&clang::GotoStmt::getLabelLoc  )
        .def("setLabelLoc", (void (clang::GotoStmt::*)(clang::SourceLocation))&clang::GotoStmt::setLabelLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::GotoStmt::*)() const)&clang::GotoStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::GotoStmt::*)() const)&clang::GotoStmt::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::GotoStmt::*)())&clang::GotoStmt::children  )
    ;

    py::class_<clang::IndirectGotoStmt, stmt_deleter<clang::IndirectGotoStmt>::type>(m, "IndirectGotoStmt" , py::base<clang::Stmt>())

        .def("setGotoLoc", (void (clang::IndirectGotoStmt::*)(clang::SourceLocation))&clang::IndirectGotoStmt::setGotoLoc  )
        .def("getGotoLoc", (clang::SourceLocation (clang::IndirectGotoStmt::*)() const)&clang::IndirectGotoStmt::getGotoLoc  )
        .def("setStarLoc", (void (clang::IndirectGotoStmt::*)(clang::SourceLocation))&clang::IndirectGotoStmt::setStarLoc  )
        .def("getStarLoc", (clang::SourceLocation (clang::IndirectGotoStmt::*)() const)&clang::IndirectGotoStmt::getStarLoc  )
        .def("getTarget", []( clang::IndirectGotoStmt& self) -> clang::Expr * {
         return self.getTarget();
        } , py::return_value_policy::reference_internal)
        .def("getTarget", [](const clang::IndirectGotoStmt& self) -> const clang::Expr * {
         return self.getTarget();
        } , py::return_value_policy::reference_internal)
        .def("setTarget", (void (clang::IndirectGotoStmt::*)(clang::Expr *))&clang::IndirectGotoStmt::setTarget  )
        .def("getConstantTarget", []( clang::IndirectGotoStmt& self) -> clang::LabelDecl * {
         return self.getConstantTarget();
        } , py::return_value_policy::reference_internal)
        .def("getConstantTarget", [](const clang::IndirectGotoStmt& self) -> const clang::LabelDecl * {
         return self.getConstantTarget();
        } , py::return_value_policy::reference_internal)
        .def("getBeginLoc", (clang::SourceLocation (clang::IndirectGotoStmt::*)() const)&clang::IndirectGotoStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::IndirectGotoStmt::*)() const)&clang::IndirectGotoStmt::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::IndirectGotoStmt::*)())&clang::IndirectGotoStmt::children  )
    ;

    py::class_<clang::ContinueStmt, stmt_deleter<clang::ContinueStmt>::type>(m, "ContinueStmt" , py::base<clang::Stmt>())

        .def("getContinueLoc", (clang::SourceLocation (clang::ContinueStmt::*)() const)&clang::ContinueStmt::getContinueLoc  )
        .def("setContinueLoc", (void (clang::ContinueStmt::*)(clang::SourceLocation))&clang::ContinueStmt::setContinueLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ContinueStmt::*)() const)&clang::ContinueStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ContinueStmt::*)() const)&clang::ContinueStmt::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ContinueStmt::*)())&clang::ContinueStmt::children  )
    ;

    py::class_<clang::BreakStmt, stmt_deleter<clang::BreakStmt>::type>(m, "BreakStmt" , py::base<clang::Stmt>())

        .def("getBreakLoc", (clang::SourceLocation (clang::BreakStmt::*)() const)&clang::BreakStmt::getBreakLoc  )
        .def("setBreakLoc", (void (clang::BreakStmt::*)(clang::SourceLocation))&clang::BreakStmt::setBreakLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::BreakStmt::*)() const)&clang::BreakStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::BreakStmt::*)() const)&clang::BreakStmt::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::BreakStmt::*)())&clang::BreakStmt::children  )
    ;

    py::class_<clang::ReturnStmt, stmt_deleter<clang::ReturnStmt>::type>(m, "ReturnStmt" , py::base<clang::Stmt>())

        .def("getRetValue", []( clang::ReturnStmt& self) -> clang::Expr * {
         return self.getRetValue();
        } , py::return_value_policy::reference_internal)
        .def("getRetValue", [](const clang::ReturnStmt& self) -> const clang::Expr * {
         return self.getRetValue();
        } , py::return_value_policy::reference_internal)
        .def("setRetValue", (void (clang::ReturnStmt::*)(clang::Expr *))&clang::ReturnStmt::setRetValue  )
        .def("getNRVOCandidate", (const clang::VarDecl * (clang::ReturnStmt::*)() const)&clang::ReturnStmt::getNRVOCandidate , py::return_value_policy::reference_internal )
        .def("setNRVOCandidate", (void (clang::ReturnStmt::*)(const clang::VarDecl *))&clang::ReturnStmt::setNRVOCandidate  )
        .def("getReturnLoc", (clang::SourceLocation (clang::ReturnStmt::*)() const)&clang::ReturnStmt::getReturnLoc  )
        .def("setReturnLoc", (void (clang::ReturnStmt::*)(clang::SourceLocation))&clang::ReturnStmt::setReturnLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ReturnStmt::*)() const)&clang::ReturnStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ReturnStmt::*)() const)&clang::ReturnStmt::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ReturnStmt::*)())&clang::ReturnStmt::children  )
    ;

    py::class_<clang::AsmStmt, stmt_deleter<clang::AsmStmt>::type>(m, "AsmStmt" , py::base<clang::Stmt>())

        .def("getAsmLoc", (clang::SourceLocation (clang::AsmStmt::*)() const)&clang::AsmStmt::getAsmLoc  )
        .def("setAsmLoc", (void (clang::AsmStmt::*)(clang::SourceLocation))&clang::AsmStmt::setAsmLoc  )
        .def("isSimple", (bool (clang::AsmStmt::*)() const)&clang::AsmStmt::isSimple  )
        .def("setSimple", (void (clang::AsmStmt::*)(bool))&clang::AsmStmt::setSimple  )
        .def("isVolatile", (bool (clang::AsmStmt::*)() const)&clang::AsmStmt::isVolatile  )
        .def("setVolatile", (void (clang::AsmStmt::*)(bool))&clang::AsmStmt::setVolatile  )
        .def("getBeginLoc", (clang::SourceLocation (clang::AsmStmt::*)() const)&clang::AsmStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::AsmStmt::*)() const)&clang::AsmStmt::getEndLoc  )
        //.def("generateAsmString", (std::__cxx11::basic_string<char> (clang::AsmStmt::*)(const clang::ASTContext &) const)&clang::AsmStmt::generateAsmString  )
        .def("getNumOutputs", (unsigned int (clang::AsmStmt::*)() const)&clang::AsmStmt::getNumOutputs  )
        .def("getOutputConstraint", (llvm::StringRef (clang::AsmStmt::*)(unsigned int) const)&clang::AsmStmt::getOutputConstraint  )
        .def("isOutputPlusConstraint", (bool (clang::AsmStmt::*)(unsigned int) const)&clang::AsmStmt::isOutputPlusConstraint  )
        .def("getOutputExpr", (const clang::Expr * (clang::AsmStmt::*)(unsigned int) const)&clang::AsmStmt::getOutputExpr , py::return_value_policy::reference_internal )
        .def("getNumPlusOperands", (unsigned int (clang::AsmStmt::*)() const)&clang::AsmStmt::getNumPlusOperands  )
        .def("getNumInputs", (unsigned int (clang::AsmStmt::*)() const)&clang::AsmStmt::getNumInputs  )
        .def("getInputConstraint", (llvm::StringRef (clang::AsmStmt::*)(unsigned int) const)&clang::AsmStmt::getInputConstraint  )
        .def("getInputExpr", (const clang::Expr * (clang::AsmStmt::*)(unsigned int) const)&clang::AsmStmt::getInputExpr , py::return_value_policy::reference_internal )
        .def("getNumClobbers", (unsigned int (clang::AsmStmt::*)() const)&clang::AsmStmt::getNumClobbers  )
        .def("getClobber", (llvm::StringRef (clang::AsmStmt::*)(unsigned int) const)&clang::AsmStmt::getClobber  )
        //.def("inputs", (llvm::iterator_range<clang::Stmt::ExprIterator> (clang::AsmStmt::*)())&clang::AsmStmt::inputs  )
        //.def("inputs", (llvm::iterator_range<clang::Stmt::ConstExprIterator> (clang::AsmStmt::*)() const)&clang::AsmStmt::inputs  )
        //.def("outputs", (llvm::iterator_range<clang::Stmt::ExprIterator> (clang::AsmStmt::*)())&clang::AsmStmt::outputs  )
        //.def("outputs", (llvm::iterator_range<clang::Stmt::ConstExprIterator> (clang::AsmStmt::*)() const)&clang::AsmStmt::outputs  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::AsmStmt::*)())&clang::AsmStmt::children  )
    ;

    py::class_<clang::GCCAsmStmt, stmt_deleter<clang::GCCAsmStmt>::type>(m, "GCCAsmStmt" , py::base<clang::AsmStmt>())

        .def("getRParenLoc", (clang::SourceLocation (clang::GCCAsmStmt::*)() const)&clang::GCCAsmStmt::getRParenLoc  )
        .def("setRParenLoc", (void (clang::GCCAsmStmt::*)(clang::SourceLocation))&clang::GCCAsmStmt::setRParenLoc  )
        .def("getAsmString", [](const clang::GCCAsmStmt& self) -> const clang::StringLiteral * {
         return self.getAsmString();
        } , py::return_value_policy::reference_internal)
        .def("getAsmString", []( clang::GCCAsmStmt& self) -> clang::StringLiteral * {
         return self.getAsmString();
        } , py::return_value_policy::reference_internal)
        .def("setAsmString", (void (clang::GCCAsmStmt::*)(clang::StringLiteral *))&clang::GCCAsmStmt::setAsmString  )
        //.def("AnalyzeAsmString", (unsigned int (clang::GCCAsmStmt::*)(llvm::SmallVectorImpl<clang::GCCAsmStmt::AsmStringPiece> &, const clang::ASTContext &, unsigned int &) const)&clang::GCCAsmStmt::AnalyzeAsmString  )
        //.def("generateAsmString", (std::__cxx11::basic_string<char> (clang::GCCAsmStmt::*)(const clang::ASTContext &) const)&clang::GCCAsmStmt::generateAsmString  )
        //.def("getOutputIdentifier", (clang::IdentifierInfo * (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getOutputIdentifier , py::return_value_policy::reference_internal )
        .def("getOutputName", (llvm::StringRef (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getOutputName  )
        .def("getOutputConstraint", (llvm::StringRef (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getOutputConstraint  )
        .def("getOutputConstraintLiteral", [](const clang::GCCAsmStmt& self, unsigned int i) -> const clang::StringLiteral * {
         return self.getOutputConstraintLiteral(i);
        } , py::return_value_policy::reference_internal)
        .def("getOutputConstraintLiteral", []( clang::GCCAsmStmt& self, unsigned int i) -> clang::StringLiteral * {
         return self.getOutputConstraintLiteral(i);
        } , py::return_value_policy::reference_internal)
        .def("getOutputExpr", []( clang::GCCAsmStmt& self, unsigned int i) -> clang::Expr * {
         return self.getOutputExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("getOutputExpr", [](const clang::GCCAsmStmt& self, unsigned int i) -> const clang::Expr * {
         return self.getOutputExpr(i);
        } , py::return_value_policy::reference_internal)
        //.def("getInputIdentifier", (clang::IdentifierInfo * (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getInputIdentifier , py::return_value_policy::reference_internal )
        .def("getInputName", (llvm::StringRef (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getInputName  )
        .def("getInputConstraint", (llvm::StringRef (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getInputConstraint  )
        .def("getInputConstraintLiteral", [](const clang::GCCAsmStmt& self, unsigned int i) -> const clang::StringLiteral * {
         return self.getInputConstraintLiteral(i);
        } , py::return_value_policy::reference_internal)
        .def("getInputConstraintLiteral", []( clang::GCCAsmStmt& self, unsigned int i) -> clang::StringLiteral * {
         return self.getInputConstraintLiteral(i);
        } , py::return_value_policy::reference_internal)
        .def("getInputExpr", []( clang::GCCAsmStmt& self, unsigned int i) -> clang::Expr * {
         return self.getInputExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("setInputExpr", (void (clang::GCCAsmStmt::*)(unsigned int, clang::Expr *))&clang::GCCAsmStmt::setInputExpr  )
        .def("getInputExpr", [](const clang::GCCAsmStmt& self, unsigned int i) -> const clang::Expr * {
         return self.getInputExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("getNamedOperand", (int (clang::GCCAsmStmt::*)(llvm::StringRef) const)&clang::GCCAsmStmt::getNamedOperand  )
        .def("getClobber", (llvm::StringRef (clang::GCCAsmStmt::*)(unsigned int) const)&clang::GCCAsmStmt::getClobber  )
        .def("getClobberStringLiteral", []( clang::GCCAsmStmt& self, unsigned int i) -> clang::StringLiteral * {
         return self.getClobberStringLiteral(i);
        } , py::return_value_policy::reference_internal)
        .def("getClobberStringLiteral", [](const clang::GCCAsmStmt& self, unsigned int i) -> const clang::StringLiteral * {
         return self.getClobberStringLiteral(i);
        } , py::return_value_policy::reference_internal)
        .def("getBeginLoc", (clang::SourceLocation (clang::GCCAsmStmt::*)() const)&clang::GCCAsmStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::GCCAsmStmt::*)() const)&clang::GCCAsmStmt::getEndLoc  )
    ;

    py::class_<clang::MSAsmStmt, stmt_deleter<clang::MSAsmStmt>::type>(m, "MSAsmStmt" , py::base<clang::AsmStmt>())

        .def("getLBraceLoc", (clang::SourceLocation (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getLBraceLoc  )
        .def("setLBraceLoc", (void (clang::MSAsmStmt::*)(clang::SourceLocation))&clang::MSAsmStmt::setLBraceLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getEndLoc  )
        .def("setEndLoc", (void (clang::MSAsmStmt::*)(clang::SourceLocation))&clang::MSAsmStmt::setEndLoc  )
        .def("hasBraces", (bool (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::hasBraces  )
        .def("getNumAsmToks", (unsigned int (clang::MSAsmStmt::*)())&clang::MSAsmStmt::getNumAsmToks  )
        //.def("getAsmToks", (clang::Token * (clang::MSAsmStmt::*)())&clang::MSAsmStmt::getAsmToks , py::return_value_policy::reference_internal )
        .def("getAsmString", (llvm::StringRef (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getAsmString  )
        //.def("generateAsmString", (std::__cxx11::basic_string<char> (clang::MSAsmStmt::*)(const clang::ASTContext &) const)&clang::MSAsmStmt::generateAsmString  )
        .def("getOutputConstraint", (llvm::StringRef (clang::MSAsmStmt::*)(unsigned int) const)&clang::MSAsmStmt::getOutputConstraint  )
        .def("getOutputExpr", []( clang::MSAsmStmt& self, unsigned int i) -> clang::Expr * {
         return self.getOutputExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("getOutputExpr", [](const clang::MSAsmStmt& self, unsigned int i) -> const clang::Expr * {
         return self.getOutputExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("getInputConstraint", (llvm::StringRef (clang::MSAsmStmt::*)(unsigned int) const)&clang::MSAsmStmt::getInputConstraint  )
        .def("getInputExpr", []( clang::MSAsmStmt& self, unsigned int i) -> clang::Expr * {
         return self.getInputExpr(i);
        } , py::return_value_policy::reference_internal)
        .def("setInputExpr", (void (clang::MSAsmStmt::*)(unsigned int, clang::Expr *))&clang::MSAsmStmt::setInputExpr  )
        .def("getInputExpr", [](const clang::MSAsmStmt& self, unsigned int i) -> const clang::Expr * {
         return self.getInputExpr(i);
        } , py::return_value_policy::reference_internal)
        //.def("getAllConstraints", (llvm::ArrayRef<llvm::StringRef> (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getAllConstraints  )
        //.def("getClobbers", (llvm::ArrayRef<llvm::StringRef> (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getClobbers  )
        //.def("getAllExprs", (llvm::ArrayRef<clang::Expr *> (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getAllExprs  )
        .def("getClobber", (llvm::StringRef (clang::MSAsmStmt::*)(unsigned int) const)&clang::MSAsmStmt::getClobber  )
        .def("getBeginLoc", (clang::SourceLocation (clang::MSAsmStmt::*)() const)&clang::MSAsmStmt::getBeginLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::MSAsmStmt::*)())&clang::MSAsmStmt::children  )
    ;

    py::class_<clang::SEHExceptStmt, stmt_deleter<clang::SEHExceptStmt>::type>(m, "SEHExceptStmt" , py::base<clang::Stmt>())

        .def("getBeginLoc", (clang::SourceLocation (clang::SEHExceptStmt::*)() const)&clang::SEHExceptStmt::getBeginLoc  )
        .def("getExceptLoc", (clang::SourceLocation (clang::SEHExceptStmt::*)() const)&clang::SEHExceptStmt::getExceptLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::SEHExceptStmt::*)() const)&clang::SEHExceptStmt::getEndLoc  )
        .def("getFilterExpr", (clang::Expr * (clang::SEHExceptStmt::*)() const)&clang::SEHExceptStmt::getFilterExpr , py::return_value_policy::reference_internal )
        .def("getBlock", (clang::CompoundStmt * (clang::SEHExceptStmt::*)() const)&clang::SEHExceptStmt::getBlock , py::return_value_policy::reference_internal )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SEHExceptStmt::*)())&clang::SEHExceptStmt::children  )
    ;

    py::class_<clang::SEHFinallyStmt, stmt_deleter<clang::SEHFinallyStmt>::type>(m, "SEHFinallyStmt" , py::base<clang::Stmt>())

        .def("getBeginLoc", (clang::SourceLocation (clang::SEHFinallyStmt::*)() const)&clang::SEHFinallyStmt::getBeginLoc  )
        .def("getFinallyLoc", (clang::SourceLocation (clang::SEHFinallyStmt::*)() const)&clang::SEHFinallyStmt::getFinallyLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::SEHFinallyStmt::*)() const)&clang::SEHFinallyStmt::getEndLoc  )
        .def("getBlock", (clang::CompoundStmt * (clang::SEHFinallyStmt::*)() const)&clang::SEHFinallyStmt::getBlock , py::return_value_policy::reference_internal )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SEHFinallyStmt::*)())&clang::SEHFinallyStmt::children  )
    ;

    py::class_<clang::SEHTryStmt, stmt_deleter<clang::SEHTryStmt>::type>(m, "SEHTryStmt" , py::base<clang::Stmt>())

        .def("getBeginLoc", (clang::SourceLocation (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getBeginLoc  )
        .def("getTryLoc", (clang::SourceLocation (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getTryLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getEndLoc  )
        .def("getIsCXXTry", (bool (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getIsCXXTry  )
        .def("getTryBlock", (clang::CompoundStmt * (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getTryBlock , py::return_value_policy::reference_internal )
        .def("getHandler", (clang::Stmt * (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getHandler , py::return_value_policy::reference_internal )
        .def("getExceptHandler", (clang::SEHExceptStmt * (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getExceptHandler , py::return_value_policy::reference_internal )
        .def("getFinallyHandler", (clang::SEHFinallyStmt * (clang::SEHTryStmt::*)() const)&clang::SEHTryStmt::getFinallyHandler , py::return_value_policy::reference_internal )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SEHTryStmt::*)())&clang::SEHTryStmt::children  )
    ;

    py::class_<clang::SEHLeaveStmt, stmt_deleter<clang::SEHLeaveStmt>::type>(m, "SEHLeaveStmt" , py::base<clang::Stmt>())

        .def("getLeaveLoc", (clang::SourceLocation (clang::SEHLeaveStmt::*)() const)&clang::SEHLeaveStmt::getLeaveLoc  )
        .def("setLeaveLoc", (void (clang::SEHLeaveStmt::*)(clang::SourceLocation))&clang::SEHLeaveStmt::setLeaveLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::SEHLeaveStmt::*)() const)&clang::SEHLeaveStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::SEHLeaveStmt::*)() const)&clang::SEHLeaveStmt::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::SEHLeaveStmt::*)())&clang::SEHLeaveStmt::children  )
    ;

    py::class_<clang::CapturedStmt, stmt_deleter<clang::CapturedStmt>::type>(m, "CapturedStmt" , py::base<clang::Stmt>())

        .def("getCapturedStmt", []( clang::CapturedStmt& self) -> clang::Stmt * {
         return self.getCapturedStmt();
        } , py::return_value_policy::reference_internal)
        .def("getCapturedStmt", [](const clang::CapturedStmt& self) -> const clang::Stmt * {
         return self.getCapturedStmt();
        } , py::return_value_policy::reference_internal)
        .def("getCapturedDecl", []( clang::CapturedStmt& self) -> clang::CapturedDecl * {
         return self.getCapturedDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCapturedDecl", [](const clang::CapturedStmt& self) -> const clang::CapturedDecl * {
         return self.getCapturedDecl();
        } , py::return_value_policy::reference_internal)
        .def("setCapturedDecl", (void (clang::CapturedStmt::*)(clang::CapturedDecl *))&clang::CapturedStmt::setCapturedDecl  )
        .def("getCapturedRegionKind", (clang::CapturedRegionKind (clang::CapturedStmt::*)() const)&clang::CapturedStmt::getCapturedRegionKind  )
        .def("setCapturedRegionKind", (void (clang::CapturedStmt::*)(clang::CapturedRegionKind))&clang::CapturedStmt::setCapturedRegionKind  )
        .def("getCapturedRecordDecl", (const clang::RecordDecl * (clang::CapturedStmt::*)() const)&clang::CapturedStmt::getCapturedRecordDecl , py::return_value_policy::reference_internal )
        .def("setCapturedRecordDecl", (void (clang::CapturedStmt::*)(clang::RecordDecl *))&clang::CapturedStmt::setCapturedRecordDecl  )
        .def("capturesVariable", (bool (clang::CapturedStmt::*)(const clang::VarDecl *) const)&clang::CapturedStmt::capturesVariable  )
        //.def("captures", (llvm::iterator_range<clang::CapturedStmt::Capture *> (clang::CapturedStmt::*)())&clang::CapturedStmt::captures  )
        //.def("captures", (llvm::iterator_range<const clang::CapturedStmt::Capture *> (clang::CapturedStmt::*)() const)&clang::CapturedStmt::captures  )
        .def("capture_size", (unsigned int (clang::CapturedStmt::*)() const)&clang::CapturedStmt::capture_size  )
        //.def("capture_inits", (llvm::iterator_range<clang::Expr **> (clang::CapturedStmt::*)())&clang::CapturedStmt::capture_inits  )
        //.def("capture_inits", (llvm::iterator_range<clang::Expr *const *> (clang::CapturedStmt::*)() const)&clang::CapturedStmt::capture_inits  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CapturedStmt::*)() const)&clang::CapturedStmt::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CapturedStmt::*)() const)&clang::CapturedStmt::getEndLoc  )
        .def("getSourceRange", (clang::SourceRange (clang::CapturedStmt::*)() const)&clang::CapturedStmt::getSourceRange  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CapturedStmt::*)())&clang::CapturedStmt::children  )
    ;

    py::class_<clang::Expr, stmt_deleter<clang::Expr>::type>(m, "Expr" , py::base<clang::Stmt>())

        .def("getType", (clang::QualType (clang::Expr::*)() const)&clang::Expr::getType  )
        .def("setType", (void (clang::Expr::*)(clang::QualType))&clang::Expr::setType  )
        .def("isValueDependent", (bool (clang::Expr::*)() const)&clang::Expr::isValueDependent  )
        .def("setValueDependent", (void (clang::Expr::*)(bool))&clang::Expr::setValueDependent  )
        .def("isTypeDependent", (bool (clang::Expr::*)() const)&clang::Expr::isTypeDependent  )
        .def("setTypeDependent", (void (clang::Expr::*)(bool))&clang::Expr::setTypeDependent  )
        .def("isInstantiationDependent", (bool (clang::Expr::*)() const)&clang::Expr::isInstantiationDependent  )
        .def("setInstantiationDependent", (void (clang::Expr::*)(bool))&clang::Expr::setInstantiationDependent  )
        .def("containsUnexpandedParameterPack", (bool (clang::Expr::*)() const)&clang::Expr::containsUnexpandedParameterPack  )
        .def("setContainsUnexpandedParameterPack", (void (clang::Expr::*)(bool))&clang::Expr::setContainsUnexpandedParameterPack  )
        .def("getExprLoc", (clang::SourceLocation (clang::Expr::*)() const)&clang::Expr::getExprLoc  )
        .def("isLValue", (bool (clang::Expr::*)() const)&clang::Expr::isLValue  )
        .def("isRValue", (bool (clang::Expr::*)() const)&clang::Expr::isRValue  )
        .def("isXValue", (bool (clang::Expr::*)() const)&clang::Expr::isXValue  )
        .def("isGLValue", (bool (clang::Expr::*)() const)&clang::Expr::isGLValue  )
        .def("ClassifyLValue", (clang::Expr::LValueClassification (clang::Expr::*)(clang::ASTContext &) const)&clang::Expr::ClassifyLValue  )
        .def("isModifiableLvalue", (clang::Expr::isModifiableLvalueResult (clang::Expr::*)(clang::ASTContext &, clang::SourceLocation *) const)&clang::Expr::isModifiableLvalue  )
        //.def("Classify", (clang::Expr::Classification (clang::Expr::*)(clang::ASTContext &) const)&clang::Expr::Classify  )
        //.def("ClassifyModifiable", (clang::Expr::Classification (clang::Expr::*)(clang::ASTContext &, clang::SourceLocation &) const)&clang::Expr::ClassifyModifiable  )
        .def("getValueKind", (clang::ExprValueKind (clang::Expr::*)() const)&clang::Expr::getValueKind  )
        .def("getObjectKind", (clang::ExprObjectKind (clang::Expr::*)() const)&clang::Expr::getObjectKind  )
        .def("isOrdinaryOrBitFieldObject", (bool (clang::Expr::*)() const)&clang::Expr::isOrdinaryOrBitFieldObject  )
        .def("setValueKind", (void (clang::Expr::*)(clang::ExprValueKind))&clang::Expr::setValueKind  )
        .def("setObjectKind", (void (clang::Expr::*)(clang::ExprObjectKind))&clang::Expr::setObjectKind  )
        .def("refersToBitField", (bool (clang::Expr::*)() const)&clang::Expr::refersToBitField  )
        .def("getSourceBitField", []( clang::Expr& self) -> clang::FieldDecl * {
         return self.getSourceBitField();
        } , py::return_value_policy::reference_internal)
        .def("getSourceBitField", [](const clang::Expr& self) -> const clang::FieldDecl * {
         return self.getSourceBitField();
        } , py::return_value_policy::reference_internal)
        .def("getReferencedDeclOfCallee", []( clang::Expr& self) -> clang::Decl * {
         return self.getReferencedDeclOfCallee();
        } , py::return_value_policy::reference_internal)
        .def("getReferencedDeclOfCallee", [](const clang::Expr& self) -> const clang::Decl * {
         return self.getReferencedDeclOfCallee();
        } , py::return_value_policy::reference_internal)
        //.def("getObjCProperty", (const clang::ObjCPropertyRefExpr * (clang::Expr::*)() const)&clang::Expr::getObjCProperty , py::return_value_policy::reference_internal )
        .def("isObjCSelfExpr", (bool (clang::Expr::*)() const)&clang::Expr::isObjCSelfExpr  )
        .def("refersToVectorElement", (bool (clang::Expr::*)() const)&clang::Expr::refersToVectorElement  )
        .def("refersToGlobalRegisterVar", (bool (clang::Expr::*)() const)&clang::Expr::refersToGlobalRegisterVar  )
        .def("hasPlaceholderType", [](const clang::Expr& self) -> bool {
         return self.hasPlaceholderType();
        } )
        //.def("hasPlaceholderType", (bool (clang::Expr::*)(clang::BuiltinType::Kind) const)&clang::Expr::hasPlaceholderType  )
        .def("isKnownToHaveBooleanValue", (bool (clang::Expr::*)() const)&clang::Expr::isKnownToHaveBooleanValue  )
        //.def("isIntegerConstantExpr", (bool (clang::Expr::*)(llvm::APSInt &, const clang::ASTContext &, clang::SourceLocation *, bool) const)&clang::Expr::isIntegerConstantExpr  )
        .def("isIntegerConstantExpr", [](const clang::Expr& self, const clang::ASTContext & Ctx , clang::SourceLocation * Loc) -> bool {
         return self.isIntegerConstantExpr(Ctx, Loc);
        } )
        .def("isCXX98IntegralConstantExpr", (bool (clang::Expr::*)(const clang::ASTContext &) const)&clang::Expr::isCXX98IntegralConstantExpr  )
        //.def("isCXX11ConstantExpr", (bool (clang::Expr::*)(const clang::ASTContext &, clang::APValue *, clang::SourceLocation *) const)&clang::Expr::isCXX11ConstantExpr  )
        //.def("EvaluateAsRValue", (bool (clang::Expr::*)(clang::Expr::EvalResult &, const clang::ASTContext &, bool) const)&clang::Expr::EvaluateAsRValue  )
        .def("EvaluateAsBooleanCondition", (bool (clang::Expr::*)(bool &, const clang::ASTContext &) const)&clang::Expr::EvaluateAsBooleanCondition  )
        //.def("EvaluateAsInt", (bool (clang::Expr::*)(clang::Expr::EvalResult &, const clang::ASTContext &, clang::Expr::SideEffectsKind) const)&clang::Expr::EvaluateAsInt  )
        //.def("EvaluateAsFloat", (bool (clang::Expr::*)(llvm::APFloat &, const clang::ASTContext &, clang::Expr::SideEffectsKind) const)&clang::Expr::EvaluateAsFloat  )
        .def("isEvaluatable", (bool (clang::Expr::*)(const clang::ASTContext &, clang::Expr::SideEffectsKind) const)&clang::Expr::isEvaluatable  )
        .def("HasSideEffects", (bool (clang::Expr::*)(const clang::ASTContext &, bool) const)&clang::Expr::HasSideEffects  )
        .def("hasNonTrivialCall", (bool (clang::Expr::*)(const clang::ASTContext &) const)&clang::Expr::hasNonTrivialCall  )
        //.def("EvaluateKnownConstInt", (llvm::APSInt (clang::Expr::*)(const clang::ASTContext &, llvm::SmallVectorImpl<std::pair<clang::SourceLocation, clang::PartialDiagnostic> > *) const)&clang::Expr::EvaluateKnownConstInt  )
        //.def("EvaluateKnownConstIntCheckOverflow", (llvm::APSInt (clang::Expr::*)(const clang::ASTContext &, llvm::SmallVectorImpl<std::pair<clang::SourceLocation, clang::PartialDiagnostic> > *) const)&clang::Expr::EvaluateKnownConstIntCheckOverflow  )
        .def("EvaluateForOverflow", (void (clang::Expr::*)(const clang::ASTContext &) const)&clang::Expr::EvaluateForOverflow  )
        //.def("EvaluateAsLValue", (bool (clang::Expr::*)(clang::Expr::EvalResult &, const clang::ASTContext &) const)&clang::Expr::EvaluateAsLValue  )
        //.def("EvaluateAsInitializer", (bool (clang::Expr::*)(clang::APValue &, const clang::ASTContext &, const clang::VarDecl *, llvm::SmallVectorImpl<std::pair<clang::SourceLocation, clang::PartialDiagnostic> > &) const)&clang::Expr::EvaluateAsInitializer  )
        //.def("EvaluateWithSubstitution", (bool (clang::Expr::*)(clang::APValue &, clang::ASTContext &, const clang::FunctionDecl *, llvm::ArrayRef<const clang::Expr *>, const clang::Expr *) const)&clang::Expr::EvaluateWithSubstitution  )
        //.def("EvaluateAsConstantExpr", (bool (clang::Expr::*)(clang::Expr::EvalResult &, clang::Expr::ConstExprUsage, const clang::ASTContext &) const)&clang::Expr::EvaluateAsConstantExpr  )
        .def("tryEvaluateObjectSize", (bool (clang::Expr::*)(unsigned long &, clang::ASTContext &, unsigned int) const)&clang::Expr::tryEvaluateObjectSize  )
        .def("isNullPointerConstant", (clang::Expr::NullPointerConstantKind (clang::Expr::*)(clang::ASTContext &, clang::Expr::NullPointerConstantValueDependence) const)&clang::Expr::isNullPointerConstant  )
        .def("isOBJCGCCandidate", (bool (clang::Expr::*)(clang::ASTContext &) const)&clang::Expr::isOBJCGCCandidate  )
        .def("isBoundMemberFunction", (bool (clang::Expr::*)(clang::ASTContext &) const)&clang::Expr::isBoundMemberFunction  )
        .def("IgnoreImpCasts", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreImpCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreImplicit", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreImplicit();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreImplicit", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreImplicit();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParens", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreParens();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenCasts", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreParenCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreCasts", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenImpCasts", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreParenImpCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreConversionOperator", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreConversionOperator();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreConversionOperator", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreConversionOperator();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenImpCasts", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreParenImpCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenLValueCasts", []( clang::Expr& self) -> clang::Expr * {
         return self.IgnoreParenLValueCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenLValueCasts", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreParenLValueCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenNoopCasts", []( clang::Expr& self, clang::ASTContext & Ctx) -> clang::Expr * {
         return self.IgnoreParenNoopCasts(Ctx);
        } , py::return_value_policy::reference_internal)
        .def("ignoreParenBaseCasts", []( clang::Expr& self) -> clang::Expr * {
         return self.ignoreParenBaseCasts();
        } , py::return_value_policy::reference_internal)
        .def("ignoreParenBaseCasts", [](const clang::Expr& self) -> const clang::Expr * {
         return self.ignoreParenBaseCasts();
        } , py::return_value_policy::reference_internal)
        .def("isDefaultArgument", (bool (clang::Expr::*)() const)&clang::Expr::isDefaultArgument  )
        .def("isTemporaryObject", (bool (clang::Expr::*)(clang::ASTContext &, const clang::CXXRecordDecl *) const)&clang::Expr::isTemporaryObject  )
        .def("isImplicitCXXThis", (bool (clang::Expr::*)() const)&clang::Expr::isImplicitCXXThis  )
        .def("IgnoreImpCasts", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreImpCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParens", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreParens();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenCasts", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreParenCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreCasts", [](const clang::Expr& self) -> const clang::Expr * {
         return self.IgnoreCasts();
        } , py::return_value_policy::reference_internal)
        .def("IgnoreParenNoopCasts", [](const clang::Expr& self, clang::ASTContext & Ctx) -> const clang::Expr * {
         return self.IgnoreParenNoopCasts(Ctx);
        } , py::return_value_policy::reference_internal)
        .def("getBestDynamicClassType", (const clang::CXXRecordDecl * (clang::Expr::*)() const)&clang::Expr::getBestDynamicClassType , py::return_value_policy::reference_internal )
        .def("getBestDynamicClassTypeExpr", (const clang::Expr * (clang::Expr::*)() const)&clang::Expr::getBestDynamicClassTypeExpr , py::return_value_policy::reference_internal )
        //.def("skipRValueSubobjectAdjustments", (const clang::Expr * (clang::Expr::*)(llvm::SmallVectorImpl<const clang::Expr *> &, llvm::SmallVectorImpl<clang::SubobjectAdjustment> &) const)&clang::Expr::skipRValueSubobjectAdjustments , py::return_value_policy::reference_internal )
        .def("skipRValueSubobjectAdjustments", [](const clang::Expr& self) -> const clang::Expr * {
         return self.skipRValueSubobjectAdjustments();
        } , py::return_value_policy::reference_internal)
    ;

    py::class_<clang::FullExpr, stmt_deleter<clang::FullExpr>::type>(m, "FullExpr" , py::base<clang::Expr>())

        .def("getSubExpr", [](const clang::FullExpr& self) -> const clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getSubExpr", []( clang::FullExpr& self) -> clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("setSubExpr", (void (clang::FullExpr::*)(clang::Expr *))&clang::FullExpr::setSubExpr  )
    ;

    py::class_<clang::ConstantExpr, stmt_deleter<clang::ConstantExpr>::type>(m, "ConstantExpr" , py::base<clang::FullExpr>())

        .def("getBeginLoc", (clang::SourceLocation (clang::ConstantExpr::*)() const)&clang::ConstantExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ConstantExpr::*)() const)&clang::ConstantExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ConstantExpr::*)())&clang::ConstantExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ConstantExpr::*)() const)&clang::ConstantExpr::children  )
    ;

    py::class_<clang::OpaqueValueExpr, stmt_deleter<clang::OpaqueValueExpr>::type>(m, "OpaqueValueExpr" , py::base<clang::Expr>())

        .def("getLocation", (clang::SourceLocation (clang::OpaqueValueExpr::*)() const)&clang::OpaqueValueExpr::getLocation  )
        .def("getBeginLoc", (clang::SourceLocation (clang::OpaqueValueExpr::*)() const)&clang::OpaqueValueExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::OpaqueValueExpr::*)() const)&clang::OpaqueValueExpr::getEndLoc  )
        .def("getExprLoc", (clang::SourceLocation (clang::OpaqueValueExpr::*)() const)&clang::OpaqueValueExpr::getExprLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::OpaqueValueExpr::*)())&clang::OpaqueValueExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::OpaqueValueExpr::*)() const)&clang::OpaqueValueExpr::children  )
        .def("getSourceExpr", (clang::Expr * (clang::OpaqueValueExpr::*)() const)&clang::OpaqueValueExpr::getSourceExpr , py::return_value_policy::reference_internal )
        .def("setIsUnique", (void (clang::OpaqueValueExpr::*)(bool))&clang::OpaqueValueExpr::setIsUnique  )
        .def("isUnique", (bool (clang::OpaqueValueExpr::*)() const)&clang::OpaqueValueExpr::isUnique  )
    ;

    py::class_<clang::DeclRefExpr, stmt_deleter<clang::DeclRefExpr>::type>(m, "DeclRefExpr" , py::base<clang::Expr>())

        .def("getDecl", []( clang::DeclRefExpr& self) -> clang::ValueDecl * {
         return self.getDecl();
        } , py::return_value_policy::reference_internal)
        .def("getDecl", [](const clang::DeclRefExpr& self) -> const clang::ValueDecl * {
         return self.getDecl();
        } , py::return_value_policy::reference_internal)
        .def("setDecl", (void (clang::DeclRefExpr::*)(clang::ValueDecl *))&clang::DeclRefExpr::setDecl  )
        .def("getNameInfo", (clang::DeclarationNameInfo (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getNameInfo  )
        .def("getLocation", (clang::SourceLocation (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getLocation  )
        .def("setLocation", (void (clang::DeclRefExpr::*)(clang::SourceLocation))&clang::DeclRefExpr::setLocation  )
        .def("getBeginLoc", (clang::SourceLocation (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getEndLoc  )
        .def("hasQualifier", (bool (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::hasQualifier  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getQualifier , py::return_value_policy::reference_internal )
        .def("getFoundDecl", []( clang::DeclRefExpr& self) -> clang::NamedDecl * {
         return self.getFoundDecl();
        } , py::return_value_policy::reference_internal)
        .def("getFoundDecl", [](const clang::DeclRefExpr& self) -> const clang::NamedDecl * {
         return self.getFoundDecl();
        } , py::return_value_policy::reference_internal)
        .def("hasTemplateKWAndArgsInfo", (bool (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::hasTemplateKWAndArgsInfo  )
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getTemplateKeywordLoc  )
        .def("getLAngleLoc", (clang::SourceLocation (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getLAngleLoc  )
        .def("getRAngleLoc", (clang::SourceLocation (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getRAngleLoc  )
        .def("hasTemplateKeyword", (bool (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::hasTemplateKeyword  )
        .def("hasExplicitTemplateArgs", (bool (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::hasExplicitTemplateArgs  )
        //.def("copyTemplateArgumentsInto", (void (clang::DeclRefExpr::*)(clang::TemplateArgumentListInfo &) const)&clang::DeclRefExpr::copyTemplateArgumentsInto  )
        //.def("getTemplateArgs", (const clang::TemplateArgumentLoc * (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getTemplateArgs , py::return_value_policy::reference_internal )
        .def("getNumTemplateArgs", (unsigned int (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::getNumTemplateArgs  )
        //.def("template_arguments", (llvm::ArrayRef<clang::TemplateArgumentLoc> (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::template_arguments  )
        .def("hadMultipleCandidates", (bool (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::hadMultipleCandidates  )
        .def("setHadMultipleCandidates", (void (clang::DeclRefExpr::*)(bool))&clang::DeclRefExpr::setHadMultipleCandidates  )
        .def("refersToEnclosingVariableOrCapture", (bool (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::refersToEnclosingVariableOrCapture  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::DeclRefExpr::*)())&clang::DeclRefExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::DeclRefExpr::*)() const)&clang::DeclRefExpr::children  )
    ;

    py::class_<clang::IntegerLiteral, stmt_deleter<clang::IntegerLiteral>::type>(m, "IntegerLiteral" , py::base<clang::Expr>())

        .def("getBeginLoc", (clang::SourceLocation (clang::IntegerLiteral::*)() const)&clang::IntegerLiteral::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::IntegerLiteral::*)() const)&clang::IntegerLiteral::getEndLoc  )
        .def("getLocation", (clang::SourceLocation (clang::IntegerLiteral::*)() const)&clang::IntegerLiteral::getLocation  )
        .def("setLocation", (void (clang::IntegerLiteral::*)(clang::SourceLocation))&clang::IntegerLiteral::setLocation  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::IntegerLiteral::*)())&clang::IntegerLiteral::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::IntegerLiteral::*)() const)&clang::IntegerLiteral::children  )
    ;

    py::class_<clang::FixedPointLiteral, stmt_deleter<clang::FixedPointLiteral>::type>(m, "FixedPointLiteral" , py::base<clang::Expr>())

        .def("getBeginLoc", (clang::SourceLocation (clang::FixedPointLiteral::*)() const)&clang::FixedPointLiteral::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::FixedPointLiteral::*)() const)&clang::FixedPointLiteral::getEndLoc  )
        .def("getLocation", (clang::SourceLocation (clang::FixedPointLiteral::*)() const)&clang::FixedPointLiteral::getLocation  )
        .def("setLocation", (void (clang::FixedPointLiteral::*)(clang::SourceLocation))&clang::FixedPointLiteral::setLocation  )
        //.def("getValueAsString", (std::__cxx11::basic_string<char> (clang::FixedPointLiteral::*)(unsigned int) const)&clang::FixedPointLiteral::getValueAsString  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::FixedPointLiteral::*)())&clang::FixedPointLiteral::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::FixedPointLiteral::*)() const)&clang::FixedPointLiteral::children  )
    ;

    py::class_<clang::CharacterLiteral, stmt_deleter<clang::CharacterLiteral>::type>(m, "CharacterLiteral" , py::base<clang::Expr>())

        .def("getLocation", (clang::SourceLocation (clang::CharacterLiteral::*)() const)&clang::CharacterLiteral::getLocation  )
        .def("getKind", (clang::CharacterLiteral::CharacterKind (clang::CharacterLiteral::*)() const)&clang::CharacterLiteral::getKind  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CharacterLiteral::*)() const)&clang::CharacterLiteral::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CharacterLiteral::*)() const)&clang::CharacterLiteral::getEndLoc  )
        .def("getValue", (unsigned int (clang::CharacterLiteral::*)() const)&clang::CharacterLiteral::getValue  )
        .def("setLocation", (void (clang::CharacterLiteral::*)(clang::SourceLocation))&clang::CharacterLiteral::setLocation  )
        .def("setKind", (void (clang::CharacterLiteral::*)(clang::CharacterLiteral::CharacterKind))&clang::CharacterLiteral::setKind  )
        .def("setValue", (void (clang::CharacterLiteral::*)(unsigned int))&clang::CharacterLiteral::setValue  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CharacterLiteral::*)())&clang::CharacterLiteral::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::CharacterLiteral::*)() const)&clang::CharacterLiteral::children  )
    ;

    py::class_<clang::FloatingLiteral, stmt_deleter<clang::FloatingLiteral>::type>(m, "FloatingLiteral" , py::base<clang::Expr>())

        //.def("getValue", (llvm::APFloat (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getValue  )
        //.def("setValue", (void (clang::FloatingLiteral::*)(const clang::ASTContext &, const llvm::APFloat &))&clang::FloatingLiteral::setValue  )
        //.def("getRawSemantics", (clang::Stmt::APFloatSemantics (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getRawSemantics  )
        //.def("setRawSemantics", (void (clang::FloatingLiteral::*)(clang::Stmt::APFloatSemantics))&clang::FloatingLiteral::setRawSemantics  )
        //.def("getSemantics", (const llvm::fltSemantics & (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getSemantics  )
        //.def("setSemantics", (void (clang::FloatingLiteral::*)(const llvm::fltSemantics &))&clang::FloatingLiteral::setSemantics  )
        .def("isExact", (bool (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::isExact  )
        .def("setExact", (void (clang::FloatingLiteral::*)(bool))&clang::FloatingLiteral::setExact  )
        .def("getValueAsApproximateDouble", (double (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getValueAsApproximateDouble  )
        .def("getLocation", (clang::SourceLocation (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getLocation  )
        .def("setLocation", (void (clang::FloatingLiteral::*)(clang::SourceLocation))&clang::FloatingLiteral::setLocation  )
        .def("getBeginLoc", (clang::SourceLocation (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::FloatingLiteral::*)())&clang::FloatingLiteral::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::FloatingLiteral::*)() const)&clang::FloatingLiteral::children  )
    ;

    py::class_<clang::ImaginaryLiteral, stmt_deleter<clang::ImaginaryLiteral>::type>(m, "ImaginaryLiteral" , py::base<clang::Expr>())

        .def("getSubExpr", [](const clang::ImaginaryLiteral& self) -> const clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getSubExpr", []( clang::ImaginaryLiteral& self) -> clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("setSubExpr", (void (clang::ImaginaryLiteral::*)(clang::Expr *))&clang::ImaginaryLiteral::setSubExpr  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ImaginaryLiteral::*)() const)&clang::ImaginaryLiteral::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ImaginaryLiteral::*)() const)&clang::ImaginaryLiteral::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ImaginaryLiteral::*)())&clang::ImaginaryLiteral::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ImaginaryLiteral::*)() const)&clang::ImaginaryLiteral::children  )
    ;

    py::class_<clang::StringLiteral, stmt_deleter<clang::StringLiteral>::type>(m, "StringLiteral" , py::base<clang::Expr>())

        .def("getString", (llvm::StringRef (clang::StringLiteral::*)() const)&clang::StringLiteral::getString  )
        .def("getBytes", (llvm::StringRef (clang::StringLiteral::*)() const)&clang::StringLiteral::getBytes  )
        //.def("outputString", (void (clang::StringLiteral::*)(llvm::raw_ostream &) const)&clang::StringLiteral::outputString  )
        .def("getCodeUnit", (unsigned int (clang::StringLiteral::*)(unsigned long) const)&clang::StringLiteral::getCodeUnit  )
        .def("getByteLength", (unsigned int (clang::StringLiteral::*)() const)&clang::StringLiteral::getByteLength  )
        .def("getLength", (unsigned int (clang::StringLiteral::*)() const)&clang::StringLiteral::getLength  )
        .def("getCharByteWidth", (unsigned int (clang::StringLiteral::*)() const)&clang::StringLiteral::getCharByteWidth  )
        .def("getKind", (clang::StringLiteral::StringKind (clang::StringLiteral::*)() const)&clang::StringLiteral::getKind  )
        .def("isAscii", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::isAscii  )
        .def("isWide", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::isWide  )
        .def("isUTF8", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::isUTF8  )
        .def("isUTF16", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::isUTF16  )
        .def("isUTF32", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::isUTF32  )
        .def("isPascal", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::isPascal  )
        .def("containsNonAscii", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::containsNonAscii  )
        .def("containsNonAsciiOrNull", (bool (clang::StringLiteral::*)() const)&clang::StringLiteral::containsNonAsciiOrNull  )
        .def("getNumConcatenated", (unsigned int (clang::StringLiteral::*)() const)&clang::StringLiteral::getNumConcatenated  )
        .def("getStrTokenLoc", (clang::SourceLocation (clang::StringLiteral::*)(unsigned int) const)&clang::StringLiteral::getStrTokenLoc  )
        //.def("getLocationOfByte", (clang::SourceLocation (clang::StringLiteral::*)(unsigned int, const clang::SourceManager &, const clang::LangOptions &, const clang::TargetInfo &, unsigned int *, unsigned int *) const)&clang::StringLiteral::getLocationOfByte  )
        .def("getBeginLoc", (clang::SourceLocation (clang::StringLiteral::*)() const)&clang::StringLiteral::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::StringLiteral::*)() const)&clang::StringLiteral::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::StringLiteral::*)())&clang::StringLiteral::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::StringLiteral::*)() const)&clang::StringLiteral::children  )
    ;

    py::class_<clang::PredefinedExpr, stmt_deleter<clang::PredefinedExpr>::type>(m, "PredefinedExpr" , py::base<clang::Expr>())

        .def("getIdentKind", (clang::PredefinedExpr::IdentKind (clang::PredefinedExpr::*)() const)&clang::PredefinedExpr::getIdentKind  )
        .def("getLocation", (clang::SourceLocation (clang::PredefinedExpr::*)() const)&clang::PredefinedExpr::getLocation  )
        .def("setLocation", (void (clang::PredefinedExpr::*)(clang::SourceLocation))&clang::PredefinedExpr::setLocation  )
        .def("getFunctionName", []( clang::PredefinedExpr& self) -> clang::StringLiteral * {
         return self.getFunctionName();
        } , py::return_value_policy::reference_internal)
        .def("getFunctionName", [](const clang::PredefinedExpr& self) -> const clang::StringLiteral * {
         return self.getFunctionName();
        } , py::return_value_policy::reference_internal)
        .def("getBeginLoc", (clang::SourceLocation (clang::PredefinedExpr::*)() const)&clang::PredefinedExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::PredefinedExpr::*)() const)&clang::PredefinedExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::PredefinedExpr::*)())&clang::PredefinedExpr::children  )
    ;

    py::class_<clang::ParenExpr, stmt_deleter<clang::ParenExpr>::type>(m, "ParenExpr" , py::base<clang::Expr>())

        .def("getSubExpr", [](const clang::ParenExpr& self) -> const clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getSubExpr", []( clang::ParenExpr& self) -> clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("setSubExpr", (void (clang::ParenExpr::*)(clang::Expr *))&clang::ParenExpr::setSubExpr  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ParenExpr::*)() const)&clang::ParenExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ParenExpr::*)() const)&clang::ParenExpr::getEndLoc  )
        .def("getLParen", (clang::SourceLocation (clang::ParenExpr::*)() const)&clang::ParenExpr::getLParen  )
        .def("setLParen", (void (clang::ParenExpr::*)(clang::SourceLocation))&clang::ParenExpr::setLParen  )
        .def("getRParen", (clang::SourceLocation (clang::ParenExpr::*)() const)&clang::ParenExpr::getRParen  )
        .def("setRParen", (void (clang::ParenExpr::*)(clang::SourceLocation))&clang::ParenExpr::setRParen  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ParenExpr::*)())&clang::ParenExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ParenExpr::*)() const)&clang::ParenExpr::children  )
    ;

    py::class_<clang::UnaryOperator, stmt_deleter<clang::UnaryOperator>::type>(m, "UnaryOperator" , py::base<clang::Expr>())

        .def("getOpcode", (clang::UnaryOperatorKind (clang::UnaryOperator::*)() const)&clang::UnaryOperator::getOpcode  )
        .def("setOpcode", (void (clang::UnaryOperator::*)(clang::UnaryOperatorKind))&clang::UnaryOperator::setOpcode  )
        .def("getSubExpr", (clang::Expr * (clang::UnaryOperator::*)() const)&clang::UnaryOperator::getSubExpr , py::return_value_policy::reference_internal )
        .def("setSubExpr", (void (clang::UnaryOperator::*)(clang::Expr *))&clang::UnaryOperator::setSubExpr  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::UnaryOperator::*)() const)&clang::UnaryOperator::getOperatorLoc  )
        .def("setOperatorLoc", (void (clang::UnaryOperator::*)(clang::SourceLocation))&clang::UnaryOperator::setOperatorLoc  )
        .def("canOverflow", (bool (clang::UnaryOperator::*)() const)&clang::UnaryOperator::canOverflow  )
        .def("setCanOverflow", (void (clang::UnaryOperator::*)(bool))&clang::UnaryOperator::setCanOverflow  )
        .def("isPrefix", [](const clang::UnaryOperator& self) -> bool {
         return self.isPrefix();
        } )
        .def("isPostfix", [](const clang::UnaryOperator& self) -> bool {
         return self.isPostfix();
        } )
        .def("isIncrementOp", [](const clang::UnaryOperator& self) -> bool {
         return self.isIncrementOp();
        } )
        .def("isDecrementOp", [](const clang::UnaryOperator& self) -> bool {
         return self.isDecrementOp();
        } )
        .def("isIncrementDecrementOp", [](const clang::UnaryOperator& self) -> bool {
         return self.isIncrementDecrementOp();
        } )
        .def("isArithmeticOp", [](const clang::UnaryOperator& self) -> bool {
         return self.isArithmeticOp();
        } )
        .def("getBeginLoc", (clang::SourceLocation (clang::UnaryOperator::*)() const)&clang::UnaryOperator::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::UnaryOperator::*)() const)&clang::UnaryOperator::getEndLoc  )
        .def("getExprLoc", (clang::SourceLocation (clang::UnaryOperator::*)() const)&clang::UnaryOperator::getExprLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::UnaryOperator::*)())&clang::UnaryOperator::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::UnaryOperator::*)() const)&clang::UnaryOperator::children  )
    ;

    py::class_<clang::OffsetOfExpr, stmt_deleter<clang::OffsetOfExpr>::type>(m, "OffsetOfExpr" , py::base<clang::Expr>())

        .def("getOperatorLoc", (clang::SourceLocation (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getOperatorLoc  )
        .def("setOperatorLoc", (void (clang::OffsetOfExpr::*)(clang::SourceLocation))&clang::OffsetOfExpr::setOperatorLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::OffsetOfExpr::*)(clang::SourceLocation))&clang::OffsetOfExpr::setRParenLoc  )
        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("setTypeSourceInfo", (void (clang::OffsetOfExpr::*)(clang::TypeSourceInfo *))&clang::OffsetOfExpr::setTypeSourceInfo  )
        //.def("getComponent", (const clang::OffsetOfNode & (clang::OffsetOfExpr::*)(unsigned int) const)&clang::OffsetOfExpr::getComponent  )
        //.def("setComponent", (void (clang::OffsetOfExpr::*)(unsigned int, clang::OffsetOfNode))&clang::OffsetOfExpr::setComponent  )
        .def("getNumComponents", (unsigned int (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getNumComponents  )
        .def("getIndexExpr", []( clang::OffsetOfExpr& self, unsigned int Idx) -> clang::Expr * {
         return self.getIndexExpr(Idx);
        } , py::return_value_policy::reference_internal)
        .def("getIndexExpr", [](const clang::OffsetOfExpr& self, unsigned int Idx) -> const clang::Expr * {
         return self.getIndexExpr(Idx);
        } , py::return_value_policy::reference_internal)
        .def("setIndexExpr", (void (clang::OffsetOfExpr::*)(unsigned int, clang::Expr *))&clang::OffsetOfExpr::setIndexExpr  )
        .def("getNumExpressions", (unsigned int (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getNumExpressions  )
        .def("getBeginLoc", (clang::SourceLocation (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::OffsetOfExpr::*)())&clang::OffsetOfExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::OffsetOfExpr::*)() const)&clang::OffsetOfExpr::children  )
    ;

    py::class_<clang::UnaryExprOrTypeTraitExpr, stmt_deleter<clang::UnaryExprOrTypeTraitExpr>::type>(m, "UnaryExprOrTypeTraitExpr" , py::base<clang::Expr>())

        .def("getKind", (clang::UnaryExprOrTypeTrait (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getKind  )
        .def("setKind", (void (clang::UnaryExprOrTypeTraitExpr::*)(clang::UnaryExprOrTypeTrait))&clang::UnaryExprOrTypeTraitExpr::setKind  )
        .def("isArgumentType", (bool (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::isArgumentType  )
        .def("getArgumentType", (clang::QualType (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getArgumentType  )
        .def("getArgumentTypeInfo", (clang::TypeSourceInfo * (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getArgumentTypeInfo , py::return_value_policy::reference_internal )
        .def("getArgumentExpr", []( clang::UnaryExprOrTypeTraitExpr& self) -> clang::Expr * {
         return self.getArgumentExpr();
        } , py::return_value_policy::reference_internal)
        .def("getArgumentExpr", [](const clang::UnaryExprOrTypeTraitExpr& self) -> const clang::Expr * {
         return self.getArgumentExpr();
        } , py::return_value_policy::reference_internal)
        .def("setArgument", []( clang::UnaryExprOrTypeTraitExpr& self, clang::Expr * E)  {
          self.setArgument(E);
        } )
        .def("setArgument", []( clang::UnaryExprOrTypeTraitExpr& self, clang::TypeSourceInfo * TInfo)  {
          self.setArgument(TInfo);
        } )
        .def("getTypeOfArgument", (clang::QualType (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getTypeOfArgument  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getOperatorLoc  )
        .def("setOperatorLoc", (void (clang::UnaryExprOrTypeTraitExpr::*)(clang::SourceLocation))&clang::UnaryExprOrTypeTraitExpr::setOperatorLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::UnaryExprOrTypeTraitExpr::*)(clang::SourceLocation))&clang::UnaryExprOrTypeTraitExpr::setRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::UnaryExprOrTypeTraitExpr::*)())&clang::UnaryExprOrTypeTraitExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::UnaryExprOrTypeTraitExpr::*)() const)&clang::UnaryExprOrTypeTraitExpr::children  )
    ;

    py::class_<clang::ArraySubscriptExpr, stmt_deleter<clang::ArraySubscriptExpr>::type>(m, "ArraySubscriptExpr" , py::base<clang::Expr>())

        .def("getLHS", []( clang::ArraySubscriptExpr& self) -> clang::Expr * {
         return self.getLHS();
        } , py::return_value_policy::reference_internal)
        .def("getLHS", [](const clang::ArraySubscriptExpr& self) -> const clang::Expr * {
         return self.getLHS();
        } , py::return_value_policy::reference_internal)
        .def("setLHS", (void (clang::ArraySubscriptExpr::*)(clang::Expr *))&clang::ArraySubscriptExpr::setLHS  )
        .def("getRHS", []( clang::ArraySubscriptExpr& self) -> clang::Expr * {
         return self.getRHS();
        } , py::return_value_policy::reference_internal)
        .def("getRHS", [](const clang::ArraySubscriptExpr& self) -> const clang::Expr * {
         return self.getRHS();
        } , py::return_value_policy::reference_internal)
        .def("setRHS", (void (clang::ArraySubscriptExpr::*)(clang::Expr *))&clang::ArraySubscriptExpr::setRHS  )
        .def("getBase", []( clang::ArraySubscriptExpr& self) -> clang::Expr * {
         return self.getBase();
        } , py::return_value_policy::reference_internal)
        .def("getBase", [](const clang::ArraySubscriptExpr& self) -> const clang::Expr * {
         return self.getBase();
        } , py::return_value_policy::reference_internal)
        .def("getIdx", []( clang::ArraySubscriptExpr& self) -> clang::Expr * {
         return self.getIdx();
        } , py::return_value_policy::reference_internal)
        .def("getIdx", [](const clang::ArraySubscriptExpr& self) -> const clang::Expr * {
         return self.getIdx();
        } , py::return_value_policy::reference_internal)
        .def("getBeginLoc", (clang::SourceLocation (clang::ArraySubscriptExpr::*)() const)&clang::ArraySubscriptExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ArraySubscriptExpr::*)() const)&clang::ArraySubscriptExpr::getEndLoc  )
        .def("getRBracketLoc", (clang::SourceLocation (clang::ArraySubscriptExpr::*)() const)&clang::ArraySubscriptExpr::getRBracketLoc  )
        .def("setRBracketLoc", (void (clang::ArraySubscriptExpr::*)(clang::SourceLocation))&clang::ArraySubscriptExpr::setRBracketLoc  )
        .def("getExprLoc", (clang::SourceLocation (clang::ArraySubscriptExpr::*)() const)&clang::ArraySubscriptExpr::getExprLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ArraySubscriptExpr::*)())&clang::ArraySubscriptExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ArraySubscriptExpr::*)() const)&clang::ArraySubscriptExpr::children  )
    ;

    py::class_<clang::CallExpr, stmt_deleter<clang::CallExpr>::type>(m, "CallExpr" , py::base<clang::Expr>())

        .def("getCallee", []( clang::CallExpr& self) -> clang::Expr * {
         return self.getCallee();
        } , py::return_value_policy::reference_internal)
        .def("getCallee", [](const clang::CallExpr& self) -> const clang::Expr * {
         return self.getCallee();
        } , py::return_value_policy::reference_internal)
        .def("setCallee", (void (clang::CallExpr::*)(clang::Expr *))&clang::CallExpr::setCallee  )
        .def("getADLCallKind", (clang::CallExpr::ADLCallKind (clang::CallExpr::*)() const)&clang::CallExpr::getADLCallKind  )
        .def("setADLCallKind", (void (clang::CallExpr::*)(clang::CallExpr::ADLCallKind))&clang::CallExpr::setADLCallKind  )
        .def("usesADL", (bool (clang::CallExpr::*)() const)&clang::CallExpr::usesADL  )
        .def("getCalleeDecl", []( clang::CallExpr& self) -> clang::Decl * {
         return self.getCalleeDecl();
        } , py::return_value_policy::reference_internal)
        .def("getCalleeDecl", [](const clang::CallExpr& self) -> const clang::Decl * {
         return self.getCalleeDecl();
        } , py::return_value_policy::reference_internal)
        .def("getDirectCallee", []( clang::CallExpr& self) -> clang::FunctionDecl * {
         return self.getDirectCallee();
        } , py::return_value_policy::reference_internal)
        .def("getDirectCallee", [](const clang::CallExpr& self) -> const clang::FunctionDecl * {
         return self.getDirectCallee();
        } , py::return_value_policy::reference_internal)
        .def("getNumArgs", (unsigned int (clang::CallExpr::*)() const)&clang::CallExpr::getNumArgs  )
        .def("getArg", []( clang::CallExpr& self, unsigned int Arg) -> clang::Expr * {
         return self.getArg(Arg);
        } , py::return_value_policy::reference_internal)
        .def("getArg", [](const clang::CallExpr& self, unsigned int Arg) -> const clang::Expr * {
         return self.getArg(Arg);
        } , py::return_value_policy::reference_internal)
        .def("setArg", (void (clang::CallExpr::*)(unsigned int, clang::Expr *))&clang::CallExpr::setArg  )
        .def("shrinkNumArgs", (void (clang::CallExpr::*)(unsigned int))&clang::CallExpr::shrinkNumArgs  )
        //.def("arguments", (llvm::iterator_range<clang::Stmt::ExprIterator> (clang::CallExpr::*)())&clang::CallExpr::arguments  )
        //.def("arguments", (llvm::iterator_range<clang::Stmt::ConstExprIterator> (clang::CallExpr::*)() const)&clang::CallExpr::arguments  )
        //.def("getRawSubExprs", (llvm::ArrayRef<clang::Stmt *> (clang::CallExpr::*)())&clang::CallExpr::getRawSubExprs  )
        .def("getNumCommas", (unsigned int (clang::CallExpr::*)() const)&clang::CallExpr::getNumCommas  )
        .def("getBuiltinCallee", (unsigned int (clang::CallExpr::*)() const)&clang::CallExpr::getBuiltinCallee  )
        .def("isUnevaluatedBuiltinCall", (bool (clang::CallExpr::*)(const clang::ASTContext &) const)&clang::CallExpr::isUnevaluatedBuiltinCall  )
        .def("getCallReturnType", (clang::QualType (clang::CallExpr::*)(const clang::ASTContext &) const)&clang::CallExpr::getCallReturnType  )
        //.def("getUnusedResultAttr", (const clang::Attr * (clang::CallExpr::*)(const clang::ASTContext &) const)&clang::CallExpr::getUnusedResultAttr , py::return_value_policy::reference_internal )
        .def("hasUnusedResultAttr", (bool (clang::CallExpr::*)(const clang::ASTContext &) const)&clang::CallExpr::hasUnusedResultAttr  )
        .def("getRParenLoc", (clang::SourceLocation (clang::CallExpr::*)() const)&clang::CallExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::CallExpr::*)(clang::SourceLocation))&clang::CallExpr::setRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CallExpr::*)() const)&clang::CallExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CallExpr::*)() const)&clang::CallExpr::getEndLoc  )
        .def("isBuiltinAssumeFalse", (bool (clang::CallExpr::*)(const clang::ASTContext &) const)&clang::CallExpr::isBuiltinAssumeFalse  )
        .def("isCallToStdMove", (bool (clang::CallExpr::*)() const)&clang::CallExpr::isCallToStdMove  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CallExpr::*)())&clang::CallExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::CallExpr::*)() const)&clang::CallExpr::children  )
    ;

    py::class_<clang::MemberExpr, stmt_deleter<clang::MemberExpr>::type>(m, "MemberExpr" , py::base<clang::Expr>())

        .def("setBase", (void (clang::MemberExpr::*)(clang::Expr *))&clang::MemberExpr::setBase  )
        .def("getBase", (clang::Expr * (clang::MemberExpr::*)() const)&clang::MemberExpr::getBase , py::return_value_policy::reference_internal )
        .def("getMemberDecl", (clang::ValueDecl * (clang::MemberExpr::*)() const)&clang::MemberExpr::getMemberDecl , py::return_value_policy::reference_internal )
        .def("setMemberDecl", (void (clang::MemberExpr::*)(clang::ValueDecl *))&clang::MemberExpr::setMemberDecl  )
        //.def("getFoundDecl", (clang::DeclAccessPair (clang::MemberExpr::*)() const)&clang::MemberExpr::getFoundDecl  )
        .def("hasQualifier", (bool (clang::MemberExpr::*)() const)&clang::MemberExpr::hasQualifier  )
        //.def("getQualifierLoc", (clang::NestedNameSpecifierLoc (clang::MemberExpr::*)() const)&clang::MemberExpr::getQualifierLoc  )
        //.def("getQualifier", (clang::NestedNameSpecifier * (clang::MemberExpr::*)() const)&clang::MemberExpr::getQualifier , py::return_value_policy::reference_internal )
        .def("getTemplateKeywordLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getTemplateKeywordLoc  )
        .def("getLAngleLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getLAngleLoc  )
        .def("getRAngleLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getRAngleLoc  )
        .def("hasTemplateKeyword", (bool (clang::MemberExpr::*)() const)&clang::MemberExpr::hasTemplateKeyword  )
        .def("hasExplicitTemplateArgs", (bool (clang::MemberExpr::*)() const)&clang::MemberExpr::hasExplicitTemplateArgs  )
        //.def("copyTemplateArgumentsInto", (void (clang::MemberExpr::*)(clang::TemplateArgumentListInfo &) const)&clang::MemberExpr::copyTemplateArgumentsInto  )
        //.def("getTemplateArgs", (const clang::TemplateArgumentLoc * (clang::MemberExpr::*)() const)&clang::MemberExpr::getTemplateArgs , py::return_value_policy::reference_internal )
        .def("getNumTemplateArgs", (unsigned int (clang::MemberExpr::*)() const)&clang::MemberExpr::getNumTemplateArgs  )
        //.def("template_arguments", (llvm::ArrayRef<clang::TemplateArgumentLoc> (clang::MemberExpr::*)() const)&clang::MemberExpr::template_arguments  )
        .def("getMemberNameInfo", (clang::DeclarationNameInfo (clang::MemberExpr::*)() const)&clang::MemberExpr::getMemberNameInfo  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getOperatorLoc  )
        .def("isArrow", (bool (clang::MemberExpr::*)() const)&clang::MemberExpr::isArrow  )
        .def("setArrow", (void (clang::MemberExpr::*)(bool))&clang::MemberExpr::setArrow  )
        .def("getMemberLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getMemberLoc  )
        .def("setMemberLoc", (void (clang::MemberExpr::*)(clang::SourceLocation))&clang::MemberExpr::setMemberLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getEndLoc  )
        .def("getExprLoc", (clang::SourceLocation (clang::MemberExpr::*)() const)&clang::MemberExpr::getExprLoc  )
        .def("isImplicitAccess", (bool (clang::MemberExpr::*)() const)&clang::MemberExpr::isImplicitAccess  )
        .def("hadMultipleCandidates", (bool (clang::MemberExpr::*)() const)&clang::MemberExpr::hadMultipleCandidates  )
        .def("setHadMultipleCandidates", (void (clang::MemberExpr::*)(bool))&clang::MemberExpr::setHadMultipleCandidates  )
        //.def("performsVirtualDispatch", (bool (clang::MemberExpr::*)(const clang::LangOptions &) const)&clang::MemberExpr::performsVirtualDispatch  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::MemberExpr::*)())&clang::MemberExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::MemberExpr::*)() const)&clang::MemberExpr::children  )
    ;

    py::class_<clang::CompoundLiteralExpr, stmt_deleter<clang::CompoundLiteralExpr>::type>(m, "CompoundLiteralExpr" , py::base<clang::Expr>())

        .def("getInitializer", [](const clang::CompoundLiteralExpr& self) -> const clang::Expr * {
         return self.getInitializer();
        } , py::return_value_policy::reference_internal)
        .def("getInitializer", []( clang::CompoundLiteralExpr& self) -> clang::Expr * {
         return self.getInitializer();
        } , py::return_value_policy::reference_internal)
        .def("setInitializer", (void (clang::CompoundLiteralExpr::*)(clang::Expr *))&clang::CompoundLiteralExpr::setInitializer  )
        .def("isFileScope", (bool (clang::CompoundLiteralExpr::*)() const)&clang::CompoundLiteralExpr::isFileScope  )
        .def("setFileScope", (void (clang::CompoundLiteralExpr::*)(bool))&clang::CompoundLiteralExpr::setFileScope  )
        .def("getLParenLoc", (clang::SourceLocation (clang::CompoundLiteralExpr::*)() const)&clang::CompoundLiteralExpr::getLParenLoc  )
        .def("setLParenLoc", (void (clang::CompoundLiteralExpr::*)(clang::SourceLocation))&clang::CompoundLiteralExpr::setLParenLoc  )
        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::CompoundLiteralExpr::*)() const)&clang::CompoundLiteralExpr::getTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("setTypeSourceInfo", (void (clang::CompoundLiteralExpr::*)(clang::TypeSourceInfo *))&clang::CompoundLiteralExpr::setTypeSourceInfo  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CompoundLiteralExpr::*)() const)&clang::CompoundLiteralExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CompoundLiteralExpr::*)() const)&clang::CompoundLiteralExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CompoundLiteralExpr::*)())&clang::CompoundLiteralExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::CompoundLiteralExpr::*)() const)&clang::CompoundLiteralExpr::children  )
    ;

    py::class_<clang::CastExpr, stmt_deleter<clang::CastExpr>::type>(m, "CastExpr" , py::base<clang::Expr>())

        .def("getCastKind", (clang::CastKind (clang::CastExpr::*)() const)&clang::CastExpr::getCastKind  )
        .def("setCastKind", (void (clang::CastExpr::*)(clang::CastKind))&clang::CastExpr::setCastKind  )
        .def("getCastKindName", [](const clang::CastExpr& self) -> const char * {
         return self.getCastKindName();
        } )
        .def("getSubExpr", []( clang::CastExpr& self) -> clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("getSubExpr", [](const clang::CastExpr& self) -> const clang::Expr * {
         return self.getSubExpr();
        } , py::return_value_policy::reference_internal)
        .def("setSubExpr", (void (clang::CastExpr::*)(clang::Expr *))&clang::CastExpr::setSubExpr  )
        .def("getSubExprAsWritten", []( clang::CastExpr& self) -> clang::Expr * {
         return self.getSubExprAsWritten();
        } , py::return_value_policy::reference_internal)
        .def("getSubExprAsWritten", [](const clang::CastExpr& self) -> const clang::Expr * {
         return self.getSubExprAsWritten();
        } , py::return_value_policy::reference_internal)
        .def("getConversionFunction", (clang::NamedDecl * (clang::CastExpr::*)() const)&clang::CastExpr::getConversionFunction , py::return_value_policy::reference_internal )
        .def("path_empty", (bool (clang::CastExpr::*)() const)&clang::CastExpr::path_empty  )
        .def("path_size", (unsigned int (clang::CastExpr::*)() const)&clang::CastExpr::path_size  )
        .def("getTargetUnionField", (const clang::FieldDecl * (clang::CastExpr::*)() const)&clang::CastExpr::getTargetUnionField , py::return_value_policy::reference_internal )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::CastExpr::*)())&clang::CastExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::CastExpr::*)() const)&clang::CastExpr::children  )
    ;

    py::class_<clang::ImplicitCastExpr, stmt_deleter<clang::ImplicitCastExpr>::type>(m, "ImplicitCastExpr" , py::base<clang::CastExpr>())

        .def("isPartOfExplicitCast", (bool (clang::ImplicitCastExpr::*)() const)&clang::ImplicitCastExpr::isPartOfExplicitCast  )
        .def("setIsPartOfExplicitCast", (void (clang::ImplicitCastExpr::*)(bool))&clang::ImplicitCastExpr::setIsPartOfExplicitCast  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ImplicitCastExpr::*)() const)&clang::ImplicitCastExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ImplicitCastExpr::*)() const)&clang::ImplicitCastExpr::getEndLoc  )
    ;

    py::class_<clang::ExplicitCastExpr, stmt_deleter<clang::ExplicitCastExpr>::type>(m, "ExplicitCastExpr" , py::base<clang::CastExpr>())

        .def("getTypeInfoAsWritten", (clang::TypeSourceInfo * (clang::ExplicitCastExpr::*)() const)&clang::ExplicitCastExpr::getTypeInfoAsWritten , py::return_value_policy::reference_internal )
        .def("setTypeInfoAsWritten", (void (clang::ExplicitCastExpr::*)(clang::TypeSourceInfo *))&clang::ExplicitCastExpr::setTypeInfoAsWritten  )
        .def("getTypeAsWritten", (clang::QualType (clang::ExplicitCastExpr::*)() const)&clang::ExplicitCastExpr::getTypeAsWritten  )
    ;

    py::class_<clang::CStyleCastExpr, stmt_deleter<clang::CStyleCastExpr>::type>(m, "CStyleCastExpr" , py::base<clang::ExplicitCastExpr>())

        .def("getLParenLoc", (clang::SourceLocation (clang::CStyleCastExpr::*)() const)&clang::CStyleCastExpr::getLParenLoc  )
        .def("setLParenLoc", (void (clang::CStyleCastExpr::*)(clang::SourceLocation))&clang::CStyleCastExpr::setLParenLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::CStyleCastExpr::*)() const)&clang::CStyleCastExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::CStyleCastExpr::*)(clang::SourceLocation))&clang::CStyleCastExpr::setRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::CStyleCastExpr::*)() const)&clang::CStyleCastExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::CStyleCastExpr::*)() const)&clang::CStyleCastExpr::getEndLoc  )
    ;

    py::class_<clang::BinaryOperator, stmt_deleter<clang::BinaryOperator>::type>(m, "BinaryOperator" , py::base<clang::Expr>())

        .def("getExprLoc", (clang::SourceLocation (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getExprLoc  )
        .def("getOperatorLoc", (clang::SourceLocation (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getOperatorLoc  )
        .def("setOperatorLoc", (void (clang::BinaryOperator::*)(clang::SourceLocation))&clang::BinaryOperator::setOperatorLoc  )
        .def("getOpcode", (clang::BinaryOperatorKind (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getOpcode  )
        .def("setOpcode", (void (clang::BinaryOperator::*)(clang::BinaryOperatorKind))&clang::BinaryOperator::setOpcode  )
        .def("getLHS", (clang::Expr * (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getLHS , py::return_value_policy::reference_internal )
        .def("setLHS", (void (clang::BinaryOperator::*)(clang::Expr *))&clang::BinaryOperator::setLHS  )
        .def("getRHS", (clang::Expr * (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getRHS , py::return_value_policy::reference_internal )
        .def("setRHS", (void (clang::BinaryOperator::*)(clang::Expr *))&clang::BinaryOperator::setRHS  )
        .def("getBeginLoc", (clang::SourceLocation (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getEndLoc  )
        .def("getOpcodeStr", [](const clang::BinaryOperator& self) -> llvm::StringRef {
         return self.getOpcodeStr();
        } )
        .def("isPtrMemOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isPtrMemOp();
        } )
        .def("isMultiplicativeOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isMultiplicativeOp();
        } )
        .def("isAdditiveOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isAdditiveOp();
        } )
        .def("isShiftOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isShiftOp();
        } )
        .def("isBitwiseOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isBitwiseOp();
        } )
        .def("isRelationalOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isRelationalOp();
        } )
        .def("isEqualityOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isEqualityOp();
        } )
        .def("isComparisonOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isComparisonOp();
        } )
        .def("isLogicalOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isLogicalOp();
        } )
        .def("isAssignmentOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isAssignmentOp();
        } )
        .def("isCompoundAssignmentOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isCompoundAssignmentOp();
        } )
        .def("isShiftAssignOp", [](const clang::BinaryOperator& self) -> bool {
         return self.isShiftAssignOp();
        } )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::BinaryOperator::*)())&clang::BinaryOperator::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::BinaryOperator::*)() const)&clang::BinaryOperator::children  )
        //.def("setFPFeatures", (void (clang::BinaryOperator::*)(clang::FPOptions))&clang::BinaryOperator::setFPFeatures  )
        //.def("getFPFeatures", (clang::FPOptions (clang::BinaryOperator::*)() const)&clang::BinaryOperator::getFPFeatures  )
        .def("isFPContractableWithinStatement", (bool (clang::BinaryOperator::*)() const)&clang::BinaryOperator::isFPContractableWithinStatement  )
        .def("isFEnvAccessOn", (bool (clang::BinaryOperator::*)() const)&clang::BinaryOperator::isFEnvAccessOn  )
    ;

    py::class_<clang::CompoundAssignOperator, stmt_deleter<clang::CompoundAssignOperator>::type>(m, "CompoundAssignOperator" , py::base<clang::BinaryOperator>())

        .def("getComputationLHSType", (clang::QualType (clang::CompoundAssignOperator::*)() const)&clang::CompoundAssignOperator::getComputationLHSType  )
        .def("setComputationLHSType", (void (clang::CompoundAssignOperator::*)(clang::QualType))&clang::CompoundAssignOperator::setComputationLHSType  )
        .def("getComputationResultType", (clang::QualType (clang::CompoundAssignOperator::*)() const)&clang::CompoundAssignOperator::getComputationResultType  )
        .def("setComputationResultType", (void (clang::CompoundAssignOperator::*)(clang::QualType))&clang::CompoundAssignOperator::setComputationResultType  )
    ;

    py::class_<clang::AbstractConditionalOperator, stmt_deleter<clang::AbstractConditionalOperator>::type>(m, "AbstractConditionalOperator" , py::base<clang::Expr>())

        .def("getCond", (clang::Expr * (clang::AbstractConditionalOperator::*)() const)&clang::AbstractConditionalOperator::getCond , py::return_value_policy::reference_internal )
        .def("getTrueExpr", (clang::Expr * (clang::AbstractConditionalOperator::*)() const)&clang::AbstractConditionalOperator::getTrueExpr , py::return_value_policy::reference_internal )
        .def("getFalseExpr", (clang::Expr * (clang::AbstractConditionalOperator::*)() const)&clang::AbstractConditionalOperator::getFalseExpr , py::return_value_policy::reference_internal )
        .def("getQuestionLoc", (clang::SourceLocation (clang::AbstractConditionalOperator::*)() const)&clang::AbstractConditionalOperator::getQuestionLoc  )
        .def("getColonLoc", (clang::SourceLocation (clang::AbstractConditionalOperator::*)() const)&clang::AbstractConditionalOperator::getColonLoc  )
    ;

    py::class_<clang::ConditionalOperator, stmt_deleter<clang::ConditionalOperator>::type>(m, "ConditionalOperator" , py::base<clang::AbstractConditionalOperator>())

        .def("getCond", (clang::Expr * (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getCond , py::return_value_policy::reference_internal )
        .def("getTrueExpr", (clang::Expr * (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getTrueExpr , py::return_value_policy::reference_internal )
        .def("getFalseExpr", (clang::Expr * (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getFalseExpr , py::return_value_policy::reference_internal )
        .def("getLHS", (clang::Expr * (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getLHS , py::return_value_policy::reference_internal )
        .def("getRHS", (clang::Expr * (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getRHS , py::return_value_policy::reference_internal )
        .def("getBeginLoc", (clang::SourceLocation (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ConditionalOperator::*)())&clang::ConditionalOperator::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ConditionalOperator::*)() const)&clang::ConditionalOperator::children  )
    ;

    py::class_<clang::BinaryConditionalOperator, stmt_deleter<clang::BinaryConditionalOperator>::type>(m, "BinaryConditionalOperator" , py::base<clang::AbstractConditionalOperator>())

        .def("getCommon", (clang::Expr * (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getCommon , py::return_value_policy::reference_internal )
        .def("getOpaqueValue", (clang::OpaqueValueExpr * (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getOpaqueValue , py::return_value_policy::reference_internal )
        .def("getCond", (clang::Expr * (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getCond , py::return_value_policy::reference_internal )
        .def("getTrueExpr", (clang::Expr * (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getTrueExpr , py::return_value_policy::reference_internal )
        .def("getFalseExpr", (clang::Expr * (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getFalseExpr , py::return_value_policy::reference_internal )
        .def("getBeginLoc", (clang::SourceLocation (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::BinaryConditionalOperator::*)())&clang::BinaryConditionalOperator::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::BinaryConditionalOperator::*)() const)&clang::BinaryConditionalOperator::children  )
    ;

    py::class_<clang::AddrLabelExpr, stmt_deleter<clang::AddrLabelExpr>::type>(m, "AddrLabelExpr" , py::base<clang::Expr>())

        .def("getAmpAmpLoc", (clang::SourceLocation (clang::AddrLabelExpr::*)() const)&clang::AddrLabelExpr::getAmpAmpLoc  )
        .def("setAmpAmpLoc", (void (clang::AddrLabelExpr::*)(clang::SourceLocation))&clang::AddrLabelExpr::setAmpAmpLoc  )
        .def("getLabelLoc", (clang::SourceLocation (clang::AddrLabelExpr::*)() const)&clang::AddrLabelExpr::getLabelLoc  )
        .def("setLabelLoc", (void (clang::AddrLabelExpr::*)(clang::SourceLocation))&clang::AddrLabelExpr::setLabelLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::AddrLabelExpr::*)() const)&clang::AddrLabelExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::AddrLabelExpr::*)() const)&clang::AddrLabelExpr::getEndLoc  )
        .def("getLabel", (clang::LabelDecl * (clang::AddrLabelExpr::*)() const)&clang::AddrLabelExpr::getLabel , py::return_value_policy::reference_internal )
        .def("setLabel", (void (clang::AddrLabelExpr::*)(clang::LabelDecl *))&clang::AddrLabelExpr::setLabel  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::AddrLabelExpr::*)())&clang::AddrLabelExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::AddrLabelExpr::*)() const)&clang::AddrLabelExpr::children  )
    ;

    py::class_<clang::StmtExpr, stmt_deleter<clang::StmtExpr>::type>(m, "StmtExpr" , py::base<clang::Expr>())

        .def("getSubStmt", []( clang::StmtExpr& self) -> clang::CompoundStmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("getSubStmt", [](const clang::StmtExpr& self) -> const clang::CompoundStmt * {
         return self.getSubStmt();
        } , py::return_value_policy::reference_internal)
        .def("setSubStmt", (void (clang::StmtExpr::*)(clang::CompoundStmt *))&clang::StmtExpr::setSubStmt  )
        .def("getBeginLoc", (clang::SourceLocation (clang::StmtExpr::*)() const)&clang::StmtExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::StmtExpr::*)() const)&clang::StmtExpr::getEndLoc  )
        .def("getLParenLoc", (clang::SourceLocation (clang::StmtExpr::*)() const)&clang::StmtExpr::getLParenLoc  )
        .def("setLParenLoc", (void (clang::StmtExpr::*)(clang::SourceLocation))&clang::StmtExpr::setLParenLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::StmtExpr::*)() const)&clang::StmtExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::StmtExpr::*)(clang::SourceLocation))&clang::StmtExpr::setRParenLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::StmtExpr::*)())&clang::StmtExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::StmtExpr::*)() const)&clang::StmtExpr::children  )
    ;

    py::class_<clang::ShuffleVectorExpr, stmt_deleter<clang::ShuffleVectorExpr>::type>(m, "ShuffleVectorExpr" , py::base<clang::Expr>())

        .def("getBuiltinLoc", (clang::SourceLocation (clang::ShuffleVectorExpr::*)() const)&clang::ShuffleVectorExpr::getBuiltinLoc  )
        .def("setBuiltinLoc", (void (clang::ShuffleVectorExpr::*)(clang::SourceLocation))&clang::ShuffleVectorExpr::setBuiltinLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::ShuffleVectorExpr::*)() const)&clang::ShuffleVectorExpr::getRParenLoc  )
        .def("setRParenLoc", (void (clang::ShuffleVectorExpr::*)(clang::SourceLocation))&clang::ShuffleVectorExpr::setRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ShuffleVectorExpr::*)() const)&clang::ShuffleVectorExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ShuffleVectorExpr::*)() const)&clang::ShuffleVectorExpr::getEndLoc  )
        .def("getNumSubExprs", (unsigned int (clang::ShuffleVectorExpr::*)() const)&clang::ShuffleVectorExpr::getNumSubExprs  )
        .def("getExpr", []( clang::ShuffleVectorExpr& self, unsigned int Index) -> clang::Expr * {
         return self.getExpr(Index);
        } , py::return_value_policy::reference_internal)
        .def("getExpr", [](const clang::ShuffleVectorExpr& self, unsigned int Index) -> const clang::Expr * {
         return self.getExpr(Index);
        } , py::return_value_policy::reference_internal)
        //.def("setExprs", (void (clang::ShuffleVectorExpr::*)(const clang::ASTContext &, llvm::ArrayRef<clang::Expr *>))&clang::ShuffleVectorExpr::setExprs  )
        //.def("getShuffleMaskIdx", (llvm::APSInt (clang::ShuffleVectorExpr::*)(const clang::ASTContext &, unsigned int) const)&clang::ShuffleVectorExpr::getShuffleMaskIdx  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ShuffleVectorExpr::*)())&clang::ShuffleVectorExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ShuffleVectorExpr::*)() const)&clang::ShuffleVectorExpr::children  )
    ;

    py::class_<clang::ConvertVectorExpr, stmt_deleter<clang::ConvertVectorExpr>::type>(m, "ConvertVectorExpr" , py::base<clang::Expr>())

        .def("getSrcExpr", (clang::Expr * (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::getSrcExpr , py::return_value_policy::reference_internal )
        .def("getTypeSourceInfo", (clang::TypeSourceInfo * (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::getTypeSourceInfo , py::return_value_policy::reference_internal )
        .def("setTypeSourceInfo", (void (clang::ConvertVectorExpr::*)(clang::TypeSourceInfo *))&clang::ConvertVectorExpr::setTypeSourceInfo  )
        .def("getBuiltinLoc", (clang::SourceLocation (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::getBuiltinLoc  )
        .def("getRParenLoc", (clang::SourceLocation (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::getRParenLoc  )
        .def("getBeginLoc", (clang::SourceLocation (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::getBeginLoc  )
        .def("getEndLoc", (clang::SourceLocation (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::getEndLoc  )
        //.def("children", (llvm::iterator_range<clang::StmtIterator> (clang::ConvertVectorExpr::*)())&clang::ConvertVectorExpr::children  )
        //.def("children", (llvm::iterator_range<clang::ConstStmtIterator> (clang::ConvertVectorExpr::*)() const)&clang::ConvertVectorExpr::children  )
    ;
}
